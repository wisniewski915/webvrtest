/*

This is a Javascript high-level library incapsulates Clique API and browser WebRTC functions
to provide an effective, easy to use way to equip your application with voice, screen 
sharing and chat functions.

Naming conventions:
in order, objects provides functions with camelCase names starts with a noun meaning the subject
following with the verb meaning the action.

Example: chatInvite - the function making "Invite" with the "chat"
PLEASE DO NOT PROVIDE FUNCTIONS WITH NAMES THAT ARE NOT FIT THIS CONVENTION

*/

(function (global, factory) {
    /*global define*/
    if (typeof define === 'function' && define.amd) {
        define(['./verto/verto', 'socket.io-client', 'peerjs'], factory);                 // AMD
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('./verto/verto'), require('socket.io-client'), require('peerjs')); // commonjs
    } else {
        global.CliqueClient = factory(global.Verto, global.io, global.Peer);                        // Browser
    }
}(this, function(Verto, io, Peer) {

    /*
    
    CliqueContact represents a contact information that is needed to invite a participant to the conference

    */

    class CliqueContact {

        constructor (data) {
            this._types = ['email', 'sms', 'call'];
            this.type = data.type;
            this.contact = data.contact || data.text;
            this.name = data.name;
        }
        
        validate () {
            switch (this.type) {
                case 'email':
                    return !!this.contact.match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
                case 'sms':
                    return !!this.contact.match(/^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/);
                case 'call':
                    return !!this.contact;
                default:
                    return false;
            }
        };

        toString () { return this.contact || ''; };
        isEmail () { return this.type === 'email'; };
        isSms () { return this.type === 'sms'; };
        isCall() { return this.type === 'call'; };
    }

    /*
    
    AjaxRequest is an internal function that is not exposed to library users.
    It represents a high-level interface on top of XMLHttpRequest and we
    use it to avoid soem third-party implmentation, such as jQuery

    */

    function AjaxRequest (request) {
        return new Promise(function(resolve, reject) {
            if (request.method == null) request.method = 'GET';

            var xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE ) {
                    if (xmlhttp.status >= 200 && xmlhttp.status < 400) return resolve(xmlhttp.response);

                    reject(xmlhttp.status);
                }
            };

            xmlhttp.responseType = request.dataType.toLowerCase() || '';
            var params = '';
            for (var key in request.data) {
                params = params + '&' + key + '=' + request.data[key];
            }
            params = params.replace('&','');

            xmlhttp.open(request.method, request.url + ( (request.method === 'GET' && params) ? '?'+params : ''), true);
            xmlhttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

            if (request.bearer) xmlhttp.setRequestHeader('Authorization', 'Bearer ' + request.bearer);

            if (request.method !== 'GET') {
                xmlhttp.setRequestHeader('Content-Type', 'application/json');
                xmlhttp.send( JSON.stringify(request.data) );
            } else {
                xmlhttp.send();
            }
        });
    }

    /*
    
    CliqueAPI represents a JS wrapper to Clique RESTful API.
    It uses a temporary session token to authenticate. You should implement a session
    token issuement and updation using your application.

    CliqueAPI is not exposed to library users while its instance is available as a part of
    Conference and SimpleDial objects.

    */

    class CliqueAPI {
        constructor (options) {
            let self = this;
            self.sessionToken = options.sessionToken;
            self.apiEndpoint = options.baseURL + '/api/v2';
        }

        init() {
            let self = this;
            return new Promise(function(resolve, reject){
                if (self.user) return resolve();
    
                AjaxRequest({
                    url : self.apiEndpoint + '/users/?token=' + self.sessionToken,
                    dataType : 'JSON',
                    bearer: self.sessionToken
                })
                .then(function(data) {
                    if (!data.ok) return reject({code:'api-error', data: data});
                    self.user = data.result[0];
                    return resolve();
                })
                .catch(function(error) {
                    return reject({code:'http-error', data: error});
                });
            });
        }

        userUpdate (user_data) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/users/'+self.user.uuid,
                method: 'PUT',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: user_data
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};

                self.user = data.user;
                return self.user;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        userFetch () {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/users/'+self.user.uuid,
                method: 'GET',
                dataType : 'JSON',
                bearer: self.sessionToken,
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};

                self.user = data.user;
                return self.user;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        conferenceCreate (options) {
            let self = this;
            var post_data = { creator_uuid: self.user.uuid, node_autoassign: true, settings: options && options.conference_settings  }
            if  ( options && options.p2p ) {
                post_data.node_autoassign = false;
                post_data.node_domain = 'p2p';
            }

            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: post_data
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.conference;
            });
        }


        conferenceFetch (id, startFlag) {
            let self = this;
            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/' + id + (startFlag?'/start':''),
                method: startFlag?'POST':'GET',
                dataType : 'JSON',
                bearer: self.sessionToken,
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.conference;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        conferenceUpdate(id, conference_data) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/'+id,
                method: 'PUT',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: conference_data
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.conference;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }
        
        conferenceUsers (id) {
            let self = this;
            
            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/'+id+'/user-list-hash',
                method: 'GET',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.result;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        conferenceSettings (id, settings) {
            let self = this;

            if (typeof settings === 'undefined')
                return AjaxRequest({
                    url : self.apiEndpoint + '/conferences/'+id+'/settings',
                    method: 'GET',
                    dataType : 'JSON',
                    bearer: self.sessionToken
                }).then(function(data) {
                    if (!data.ok) throw {code:'api-error', data: data};
                    return data.settings;
                }).catch(function(err) {
                    throw {code: 'http-error', data: err}
                });                
            else 
                return AjaxRequest({
                    url : self.apiEndpoint + '/conferences/'+id+'/settings',
                    method: 'PUT',
                    dataType : 'JSON',
                    bearer: self.sessionToken,
                    data: settings
                }).then(function(data) {
                    if (!data.ok) throw {code:'api-error', data: data};
                    return data.settings;
                }).catch(function(err) {
                    throw {code: 'http-error', data: err}
                });
        }

        conferenceInvite(id, inviteData) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/invites/' + id + '/send',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: inviteData
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.failures;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        conferenceFind(params) {
            let self = this;

            var queryString = Object.keys(params).map(function(k) {
                return window.encodeURIComponent(k) + '=' + window.encodeURIComponent(params[k]);
            }).join('&');
            
            return AjaxRequest({
                url : self.apiEndpoint + '/conferences?' + queryString,
                method: 'GET',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.result;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        recordingById(recordingId) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/recording/' + recordingId,
                method: 'GET',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.record;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        recordingBySessionId(sessionId) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/recording/' + sessionId + '/session',
                method: 'GET',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.record;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        phoneNumberAssign(id, data) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/' + id + '/phone_number',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: data
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.phone_number;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        phoneNumberUpdate(id, data) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/' + id + '/phone_number',
                method: 'PUT',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: data
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data.phone_number;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        phoneNumberRelease(id) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/conferences/' + id + '/phone_number',
                method: 'DELETE',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return true;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        chatCreate(data = {}) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/chats',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: data,
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        chatJoin(chatId) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/chats/' + chatId + '/join',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        chatLeave(chatId) {
            let self = this;

            return AjaxRequest({
                url : self.apiEndpoint + '/chats/' + chatId + '/leave',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        whitelistCreate(conference_id, allowed_users) {
            let self = this;
            return AjaxRequest({
                url : self.apiEndpoint + '/whitelists',
                method: 'POST',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: { conference_id: conference_id, allowed_users: allowed_users }
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        whitelistGet(conference_id) {
            let self = this;
            return AjaxRequest({
                url : self.apiEndpoint + '/whitelists/' + conference_id,
                method: 'GET',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        whitelistAddUsers(conference_id, users) {
            let self = this;
            return AjaxRequest({
                url : self.apiEndpoint + '/whitelists/' + conference_id + '/add_users',
                method: 'PUT',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: { users: users }
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        whitelistDelUsers(conference_id, users) {
            let self = this;
            return AjaxRequest({
                url : self.apiEndpoint + '/whitelists/' + conference_id + '/del_users',
                method: 'PUT',
                dataType : 'JSON',
                bearer: self.sessionToken,
                data: { users: users }
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }

        whitelistDelete(conference_id) {
            let self = this;
            return AjaxRequest({
                url : self.apiEndpoint + '/whitelists/' + conference_id,
                method: 'DELETE',
                dataType : 'JSON',
                bearer: self.sessionToken
            }).then(function(data) {
                if (!data.ok) throw {code:'api-error', data: data};
                return data;
            }).catch(function(err) {
                throw {code: 'http-error', data: err}
            });
        }
    }

    class CliqueAbstract {

        constructor(options) {
            if (typeof Verto === 'undefined') throw new Error('Verto is not available');
            if (typeof io === 'undefined') throw new Error('Socket.io is not available');
            if (typeof Peer === 'undefined') throw new Error('Peer.js is not available');
            if (!options || options && (!(options.base_url || options.baseURL) || !(options.session_token || options.sessionToken))) throw new Error('Invalid config params');

            let self = this;

            self.baseURL = options.base_url || options.baseURL;
            self.apiEndpoint = self.baseURL + '/api/v2';
            self.websocketEndpoint = self.baseURL;
            self.sessionToken = options.session_token || options.sessionToken;
            self.debug = options.debug || options.Debug || false;
            console.log('DEBUG is set to',self.debug);
            self.wssPort = options.wss_port || options.wssPort || '443';
            self.peerManager = options.peermanager || options.peerManager || self.baseURL + '/peermanager';
            self.iceServers = options.ice_servers || options.iceServers || [{url:'stun:stun.l.google.com:19302'}];
            self.musicOnHoldUrl = options.music_on_hold_url || options.musicOnHoldUrl || 
            'data:audio/mp3;base64,';

            self.eventHandlers = {};
            self.verto = {};
            self.call = null;
            self.socket = null;
            self.initCompletionPromise = null;
        }   

        init () {
            let self = this;

            if (!self.initCompletionPromise) self.initCompletionPromise = new Promise(function(resolve, reject){
                if (self.user) return resolve();

                self.api = new CliqueAPI({ baseURL: self.baseURL, sessionToken: self.sessionToken });

                self.api.init()
                    .then( () => {
                        self.user = self.api.user;
                        resolve();
                    } )
                    .catch( (error) => {
                        return reject({code:'http-error', data: error});    
                    } );
                
            });

            return self.initCompletionPromise;
        }

        on (event_name, event_handler) {
            let self = this;
            if (typeof event_name !== 'string' || typeof event_handler !== 'function') throw new Error('Invalid function params');

            if (!self.eventHandlers[event_name]) self.eventHandlers[event_name] = [];
            self.eventHandlers[event_name].push(event_handler);
        }

        off (event_name) {
            let self = this;
            self.eventHandlers[event_name] = null;
        }

        socketInit_ (p2pSessionId) {
            let self = this;

            if (!self.socket) {
                let query = 'token=' + self.sessionToken;
                if (p2pSessionId) query = query + '&p2pSessionId=' + p2pSessionId;
                self.socket = io.connect(self.websocketEndpoint, { query: query });
                self.handleEvents_();
            }
        }

        socketSubscribe_ (id) {
            let self = this;
            self.socket.emit('join', id);
        }

        socketClose_ () {
            let self = this;
            self.socket.close();
            self.socket = null;
        }

        trigger_ (event_name, event_data) {
            let self = this;
            if (!self.eventHandlers[event_name]) return;

            self.eventHandlers[event_name].forEach( (event_handler) => {
                event_handler(event_data);
            });
        }

        cleanup_ () {

        }
 
     }

    /*
    
    CliqueBase is a base class for all voice-related objects. Extend it if you need voice functions.

    We do not expose it to users as an independent entity. However, keep noted, that its methods will be
    visible to all its children.

    */

    class CliqueBase extends CliqueAbstract {
        handleEvents_ () {

        }

        audioElementCreate_ (id) {
            function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
            }
            var audioElement = document.createElement('audio');
            if (!id) id = guid();
            audioElement.id = id;
            audioElement.autoplay = true;
            audioElement.style.display = 'none';
            document.body.appendChild(audioElement);

            return id;
        }
       
        localVolume (volume) {
            var v = document.getElementById(this.number || this.conference.id);
            if (!v) throw new Error('Audio element not found.');

            if (volume) v.volume = volume/100;

            return v.volume*100;
        }

        initUA_ (node_domain) {
            let self = this;
            return new Promise( function(resolve, reject) {

                var vertoCallbacks = {
                    onWSLogin: onWSLogin,
                    onWSClose: onWSClose,
                    onDialogState: onDialogState
                };

                const confId = self.conference ? self.conference.id : null;

                let audio_id = self.audioElementCreate_(confId);

                self.socketInit_();

                self.verto = new Verto({
                    socketUrl: 'wss://' + node_domain + ':' + self.wssPort,
                    login: self.user.uuid,
                    passwd: self.user.sip_pwd,
                    iceServers: self.iceServers,
                    tag: audio_id,
                    keepalive: 1000 * 60 * 3, // 3 mins
                }, vertoCallbacks);

                self.trackVertoStats_(self.verto);

                function onWSLogin(verto, success) {
                    success ? resolve(self.verto) : reject('Signaling connection failed');
                }

                function onWSClose(verto, success) {
                }

                function onDialogState(d) {

                    self.vertoDialogState_(d);
 
                }
                
            }); // end of promise
        }

        vertoDialogState_(d) {

        }

        isNetworkConnectionLost_(data) {
            let connectionLost = false;
            if (!self.webrtcStats) {
                self.webrtcStats = {
                    audio: {
                        packetsSent: 0,
                        sentLost: 0,
                        packetsReceived: 0,
                        receivedLost: 0,
                    },
                    video: {
                        packetsSent: 0,
                        sentLost: 0,
                        packetsReceived: 0,
                        receivedLost: 0,
                    },
                };
            }
            if (data.packetsSent) {
                const sentPacketsDelta = Math.abs((+data.packetsSent || 0) - self.webrtcStats[data.mediaType].packetsSent);
                const sentLostDelta = Math.abs((+data.packetsLost || 0) - self.webrtcStats[data.mediaType].sentLost);
                connectionLost = Math.abs((sentPacketsDelta - sentLostDelta) / sentPacketsDelta) <= 0.7;
                self.webrtcStats[data.mediaType].packetsSent = +data.packetsSent || 0;
                self.webrtcStats[data.mediaType].sentLost = +data.packetsLost || 0;
            }
            if (data.packetsReceived) {
                const receivedPacketsDelta = Math.abs((+data.packetsReceived || 0) - self.webrtcStats[data.mediaType].packetsReceived);
                const receivedLostDelta = Math.abs((+data.packetsLost || 0) - self.webrtcStats[data.mediaType].receivedLost);
                connectionLost = Math.abs((receivedPacketsDelta - receivedLostDelta) / receivedPacketsDelta) <= 0.7;
                self.webrtcStats[data.mediaType].packetsReceived = +data.packetsReceived || 0;
                self.webrtcStats[data.mediaType].receivedLost = +data.packetsLost || 0;
            }

            return connectionLost;
        }

        sendNetworkConnectionEvent_(status) {
            if (!this.networkStatusTimestamp) this.networkStatusTimestamp = {};
            if (this.networkStatusTimestamp[status] && (this.networkStatusTimestamp[status] - Date.now()) < 15000) {
                this.trigger_('network-status', { status: status });
            }
            this.networkStatusTimestamp[status] = Date.now();

        }

        trackVertoStats_ (verto, options = {}) {
            let self = this;
            const repeatInterval = options.repeatInterval || 3000;
            self.removeVertoStats_();
            if (!verto.dialogs) throw { code: 'not-supported', data: 'WebRTC stats is not supported' }


            self.repeatVertoStatsInterval = setInterval(() => {
                Object.keys(verto.dialogs).forEach(dialogId => {
                    if (!verto.dialogs[dialogId].rtc.peer) return;
                    self.getPeerStats_(verto.dialogs[dialogId].rtc.peer.peer)
                    .catch(err => console.log('WebRTC stats', err));
                });
            }, repeatInterval);
        }

        trackPeerjsStats_ (peer, options = {}) {
            let self = this;
            const repeatInterval = options.repeatInterval || 3000;
            self.removePeerjsStats_();
            if (!peer.connections) throw { code: 'not-supported', data: 'WebRTC stats is not supported' }

            self.repeatPeerjsStatsInterval = setInterval(() => {
                Object.keys(peer.connections).forEach(connection => {
                    const mediaConnection = peer.connections[connection][1];
                    if (!mediaConnection || mediaConnection && !mediaConnection.pc) return self.removePeerjsStats_();
                    self.getPeerStats_(mediaConnection.pc)
                    .catch(err => console.log('WebRTC stats', err));
                });
            }, repeatInterval);
        }

        removePeerjsStats_ () {
            if (this.repeatPeerjsStatsInterval) clearInterval(this.repeatPeerjsStatsInterval);
        }

        removeVertoStats_ () {
            if (this.repeatVertoStatsInterval) clearInterval(this.repeatVertoStatsInterval);
        }

        getPeerStats_ (peer) {
            let self = this;
            if (!peer.getStats) return Promise.reject({ code: 'not-supported', data: 'WebRTC stats is not supported' });


            if (!!navigator.mozGetUserMedia) {
                return peer.getStats()
                .then(stats => {
                    stats.forEach(result => {
                        if (result.type === 'outbound-rtp' || result.type === 'inbound-rtp') {
                            if (self.isNetworkConnectionLost_(result)) self.sendNetworkConnectionEvent_('packets_lost');
                        }
                    });
                    return Promise.resolve({
                        success: true,
                    });
                });
            } else {
                return new Promise((resolve, reject) => {
                    peer.getStats(stats => {
                        const statsList = stats.result();
                        let ssrcStat = statsList.find(stat => (stat.type === 'ssrc'));
                        if (ssrcStat) {
                            var ssrc = {};
                            ssrcStat.names().forEach(name => {
                                ssrc[name] = ssrcStat.stat(name);
                            });
                            ssrc.id = ssrcStat.id;
                            ssrc.type = ssrcStat.type;
                            ssrc.timestamp = ssrcStat.timestamp;

                            if (self.isNetworkConnectionLost_(ssrc)) {
                                self.sendNetworkConnectionEvent_('packets_lost');
                            }
                        }
                        resolve({
                            success: true,
                        });
                    });
                });
            }
        }


    }

    /*

    CliqueConference is the high-level object represents a Clique Conference.

    */

    class CliqueConference extends CliqueBase {

        /* Public Interface */

        id () {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}
            return self.conference.id;
        }
        
        create (options) {
            let self = this;
            return self.actionRun_('create', options).catch((data)=>{
                if (self.debug) console.error(data);
                throw {code:'api-error', data: data}
            });
        }
        
        join (id) {
            let self = this;
            return self.actionRun_('join', id).catch((data)=>{
                if (self.debug) console.error(data);
                throw {code:'api-error', data: data}
            });
        }

        leave () {
            let self = this;
            return new Promise((resolve, reject) => {
                if (!self.conference) return reject({code: 'not-connected', data: 'Instance is not connected to the conference'})
                
                if (self.conference.ss_calls) {
                    for (var call in self.conference.ss_calls){
                        self.conference.ss_calls[call].close();
                    }
                }
                
                if (self.isP2P){
                    for (var call in self.conference.calls){
                        var id = self.conference.calls[call].audio_id;
                        if (self.conference.calls[call]) self.conference.calls[call].close();
                        var audio_el = document.getElementById(id);
                        if (audio_el) document.body.removeChild(audio_el);
                    }
                    self.p2pUnbindMicManager_();
                } else {
                    self.call && self.call.hangup();    
                    var audio_el = document.getElementById(self.conference.id);
                    if (audio_el) document.body.removeChild(audio_el);
                }

                self.cleanup_();
                resolve();
            });
        }

        users() {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}
            return self.conference.users || [];
        }

        checkModerator() {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}
            if (!self.conference.users) return [];

            return Object.keys(self.conference.users).filter(uuid => (self.conference.users[uuid].meta.is_moderator));
        }

        mohPlay() {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}

            const audioFile = self.musicOnHoldUrl;
            self.conference.audioEl = document.getElementById(self.conference.id) || document.getElementById(self.audioElementCreate_(self.conference.id));
            self.conference.audioEl.setAttribute('src', audioFile);
            self.conference.audioEl.loop = true;
            self.conference.audioEl.play();
        }

        mohStop() {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}

            if (self.conference.audioEl) {
                self.conference.audioEl.loop = false;
                self.conference.audioEl.pause();
            }
        }

        invite (data, options) {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}

            return self.init()
            .then(function() {
                return self.api.conferenceSettings(self.conference.id);
            })
            .then(function(conferenceSettings) {
                if (!conferenceSettings) return Promise.reject('Incorrect conference id');

                return self.prepareInvitation_(conferenceSettings, data, options);
            })
            .then(function(inviteData) {
                return self.api.conferenceInvite(self.conference.id, inviteData);
            });
        }

        lock () {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}

            if (self.isP2P && self.conference.creator_uuid === self.user.uuid){
                var lockEvent = {
                    Action: 'lock',
                    Room: self.conference.id,
                    'Caller-Caller-ID-Number': self.user.uuid,
                    User: self.user,
                    Time: (new Date()).toISOString(),
                };
                self.socket.emit('inject', lockEvent);
            }
            self.socket.emit('lock', self.conference.id);
        }

        setGrace (period) {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}
            self.socket.emit('setgrace', period);
        }

        unlock () {
            let self = this;
            if (!self.conference) throw {code: 'not-connected', data: 'Instance is not connected to the conference'}

            if (self.isP2P && self.conference.creator_uuid === self.user.uuid){
                var lockEvent = {
                    Action: 'unlock',
                    Room: self.conference.id,
                    'Caller-Caller-ID-Number': self.user.uuid,
                    User: self.user,
                    Time: (new Date()).toISOString(),
                };
                self.socket.emit('inject', lockEvent);
            }
            self.socket.emit('unlock', this.conference.id);
        }

        userMute (uuid) {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }
            self.socket.emit('mute-local', uuid);
        }

        userUnmute (uuid) {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }
            self.socket.emit('unmute-local', uuid);
        }

        muteUser (uuid) {
            console.warn("muteUser is deprecated, please use userMute instead");
            this.userMute(uuid);
        }

        unmuteUser (uuid) {
            console.warn("unmuteUser is deprecated, please use userUnmute instead");
            this.userUnmute(uuid);
        }


        recordingStart (options) {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }

            self.socket.emit('recording-start', options);
        }

        recordingStop () {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }

            self.socket.emit('recording-stop');
        }

        getRecordingById (recordingId) {
            let self = this;
            if (!self.api) return Promise.reject({ code: 'not-ready', data: 'Instance is not ready' });

            return self.api.recordingById(recordingId)
                .then(recording => ({
                    status: recording.status,
                    conference_session_id: recording.session_id,
                    url: recording.url,
                }));
        }

        getRecordingBySessionId (sessionId) {
            let self = this;
            if (!self.api) return Promise.reject({ code: 'not-ready', data: 'Instance is not ready' });

            return self.api.recordingBySessionId(sessionId)
                .then(recording => ({
                    status: recording.status,
                    conference_session_id: recording.session_id,
                    url: recording.url,
                }));
        }
        
        localMute () {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }

            self.socket.emit('mute-local', self.user.uuid);
        }

        localUnmute () {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }

            self.socket.emit('unmute-local', self.user.uuid);
        }

        isMuted () {
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }
            if (self.conference.node_domain === 'p2p') return self.p2pMuted;

            return self.call.getMute();
        }

        screenShareStart (appId, options = {}){
            let self = this;
            if (!self.conference) return Promise.reject({ code: 'not-connected', data: 'Instance is not connected to the conference' });
            if (!window.chrome) return Promise.reject({code:'not-supported', data: 'Browser is not supported'});
            if (self.ssStream) return Promise.reject({code:'in-use', data: 'Screen sharing is active'});

            var chromeMediaSource = 'screen';
            var screen_constraints = {
                mandatory: {
                    chromeMediaSource: chromeMediaSource,
                    maxWidth: screen.width > 1920 ? screen.width : 1920,
                    maxHeight: screen.height > 1080 ? screen.height : 1080
                },
                optional: []
            };

            if (!self.screenShareSource || self.screenShareSource.disconnected) {
                if(self.screenShareSource) self.screenShareSource.destroy();
                self.screenShareSource = self.p2pScreenShareInit_();
                self.screenShareSource.on('error', (err) => {
                    if(self.debug) console.error('PeerJS error occured:', err);
                    self.screenShareSource.destroy();
                    self.screenShareSource = self.p2pScreenShareInit_();
                    self.trackPeerjsStats_(self.screenShareSource);
                });
                self.screenShareSource.on('disconnected', () => {
                    self.screenShareSource.destroy();
                    self.screenShareSource = self.p2pScreenShareInit_();
                    self.trackPeerjsStats_(self.screenShareSource);
                });
                self.trackPeerjsStats_(self.screenShareSource);
                if (self.debug) console.log("Screen Share Broadcast object initialized", self.screenShareSource);
            }

            const request = { action: 'capture_screen', sources: options.sources || ['screen', 'window', 'tab'] };
            return new Promise((resolve, reject) => {
                window.chrome.runtime.sendMessage(appId, request, response => {
                    if (response && response.error) return reject(response.error);
                    if (!response || response && !response.sourceId) return reject('PermissionDeniedError')
                    return resolve(response.sourceId);
                });
            })
            .then(sourceId => {
                return setSource(sourceId);
            })
            .catch(err => Promise.reject({ code:'mediastream', data: err }));

            function setSource(sourceId) {
                return new Promise((resolve, reject)=>{
                    screen_constraints.mandatory.chromeMediaSource = 'desktop';
                    screen_constraints.mandatory.chromeMediaSourceId = sourceId;

                    navigator.getUserMedia({
                        video: screen_constraints,
                        audio: false
                    }, (stream) => {
                        self.ssStream = stream;
                        self.ssStream.getVideoTracks()[0].onended = () => {
                            var currentTime = (new Date()).toISOString();
                            var screenShareStopEvent = {
                                Action: 'screen-share-stop',
                                Room: self.conference.id,
                                'Caller-Caller-ID-Number': self.user.uuid,
                                User: self.user,
                                Time: currentTime,
                            };
                            self.socket.emit('inject', screenShareStopEvent);     
                            self.screenShareSource.destroy();
                            self.ssStream = null;
                            self.screenShareSource = null;
                            self.removePeerjsStats_();
                        };

                        var currentTime = (new Date()).toISOString();
                        var screenShareStartEvent = {
                            Action: 'screen-share-start',
                            Room: self.conference.id,
                            'Caller-Caller-ID-Number': self.user.uuid,
                            User: self.user,
                            Time: currentTime,
                        };
                        self.socket.emit('inject', screenShareStartEvent);   
                        resolve();
                    },
                    (error) => {
                        reject({code: 'screen-share-failed', data: error});
                    });
                });
            }
        }

        screenShareStop (){
            let self = this;
            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }
            if (!self.ssStream) throw {code:'not-in-use', data:'Screen is not shared'}

            // Stop all tracks of the share stream
            self.ssStream.getTracks().forEach(track => track.stop());
            self.ssStream = null;

            // Disconnect and remove PeerJS connection
            self.screenShareSource = null;
            self.removePeerjsStats_();

            // Send screen-share-stop
            var currentTime = (new Date()).toISOString();
            var screenShareStopEvent = {
                Action: 'screen-share-stop',
                Room: self.conference.id,
                'Caller-Caller-ID-Number': self.user.uuid,
                // ConferenceUniqueID: event['Conference-Unique-ID'],
                User: self.user,
                Time: currentTime,
            };             
            self.socket.emit('inject', screenShareStopEvent);
        }

        screenShareViewStart (uuid, domElement){
            let self = this;
            if (!domElement) return Promise.reject({ code: 'dom-element-missed', data: 'DOM element is not exist' });
            if (!self.conference) return Promise.reject({ code: 'not-connected', data: 'Instance is not connected to the conference' });

            const peerCallId = 'ss-' + uuid + self.id();

            self.conference.domElements[peerCallId] = domElement;
            if (!self.screenShareViewer || self.screenShareViewer.disconnected) {
                if(self.screenShareViewer) self.screenShareViewer.destroy();

                self.screenShareViewer = self.p2pScreenShareInit_(self.user.p2pSessionId);
                self.screenShareViewer.on('error', (err) => {
                    if(self.debug) console.error('PeerJS error occured:', err);
                    self.screenShareViewer.destroy();
                    self.screenShareViewer = self.p2pScreenShareInit_(self.user.p2pSessionId);
                    self.trackPeerjsStats_(self.screenShareViewer);
                });
                self.screenShareViewer.on('disconnected', () => {
                    if(self.screenShareViewer) self.screenShareViewer.reconnect();
                });

                self.trackPeerjsStats_(self.screenShareViewer);
            }


            var currentTime = (new Date()).toISOString();
            var callMeEvent = {
                Action: 'call-me',
                Room: self.conference.id,
                'Caller-Caller-ID-Number': self.user.uuid,
                'Callee-Callee-ID-Number': uuid,
                User: self.user,
                Time: currentTime,
            };

            self.socket.emit('broadcast', callMeEvent);
            self.ssViewSessionsCount = self.ssViewSessionsCount + 1;
        }

        screenShareViewStop (uuid){
            let self = this;
            const peerCallId = 'ss-' + uuid + self.id();

            if (!self.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }
            if (!self.conference.ss_calls[peerCallId]) throw { code: 'no-session', data: 'There is no screen share session for user with UUID = ' + uuid };

            self.conference.ss_calls[peerCallId].close();
            delete self.conference.ss_calls[peerCallId];

            self.conference.domElements[peerCallId].srcObject = null;
            self.removePeerjsStats_();
            self.ssViewSessionsCount = self.ssViewSessionsCount - 1;
            if (self.ssViewSessionsCount <= 0) {
                self.screenShareViewer.destroy();
                self.screenShareViewer = null;
            }
        }

        userKick (uuid) {
            console.warn("kickUser is deprecated, please use userKick instead");
            this.kickUser(uuid);
        }

        kickUser (uuid) {
            if (!this.conference) throw { code: 'not-connected', data: 'Instance is not connected to the conference' }

            let self = this;
            if (self.isP2P &&
                self.conference.creator_uuid === self.user.uuid){
                var userKickSocketEvent = {
                    Action: 'kick-member',
                    Room: self.conference.id,
                    'Caller-Caller-ID-Number': uuid,
                    Time: (new Date()).toISOString(),
                };
                self.socket.emit('inject', userKickSocketEvent);
            }
            self.socket.emit('kick', uuid);
        }

        /* End of Public interface */

        cleanup_ () {
            let self = this;
            self.mohStop();
            self.socketClose_();
            if(self.screenShareSource) self.screenShareSource.destroy();
            self.screenShareSource = null;
            if(self.screenShareViewer) self.screenShareViewer.destroy();
            self.screenShareViewer = null;

            self.call = null;
            self.conference = null;
        }

        prepareConference_(conference) {
            let self = this;
            let c = Object.assign({}, conference);
            c.calls = {};
            c.users = {};
            c.ss_calls = {};
            c.domElements = {};
            return c;            
        }

        initUA_ (conference) {
            let self = this;

            self.ssViewSessionsCount = 0;
            self.user.p2pSessionId = Date.now();

            if (conference.node_domain === 'p2p') {
                self.isP2P = true;

                self.p2pInit_(conference.id);
                return Promise.resolve(); 
            }
            else {
                return super.initUA_(conference.node_domain);
            }
        }

        vertoDialogState_(d) {
            let self = this;
            
            switch (d.state.name) {
            case 'trying':
                break;
            case 'answering':
               break;
            case 'active':
                if (self.conference && self.conference.Settings && self.conference.Settings.e1_joins_muted) self.call && self.call.setMute('off');
                self.trigger_('session-connect', { });
                break;
            case 'hangup':
                var error;
                if (d.cause !== 'NORMAL_CLEARING') { error = d.cause; }
                self.trigger_('session-disconnect', { });
                break;
            case 'destroy':
                // cleanup...
                self.cleanup_();
                break;
            }            
        }

        handleEvents_ () {
            let self = this;

            self.socket.on('reconnect', function(event){
                if (self.conference && self.conference.id) {
                    self.actionRun_('reconnect', self.conference.id);
                }
            });

            self.socket.on('event', function(event){

                switch (event.Action) {

                case 'add-member':
                    const sameUser = event.User.uuid === self.user.uuid;

                    const response = {
                        user: event.User,
                        is_moderator: event.User.meta.is_moderator,
                        p2p_session_id: event.User.p2pSessionId,
                    };
                    
                    // Our own add-member received, so we have a participant list attached
                    if (self.user.uuid === event['Caller-Caller-ID-Number']) {
                        
                        self.conference.users = Object.assign({}, self.conference.users, event.ListUsersInConference);
                        response.listUsersInConference = Object.assign({}, self.conference.users);
                    }

                    let userAlreadyInList = self.conference.users[event.User.uuid];
                    if (self.debug) console.log('userAlreadyInList',userAlreadyInList);

                    if (self.isP2P) {
                        self.conference.users[event.User.uuid] = event.User;

                        const conferenceHasModerator = self.checkModerator().length;
                        const numberUsersInConference = Object.keys(self.conference.users).length;
                        const waitForModerator = self.conference.Settings.wait_for_moderator;
                        const musicOnHold = self.conference.Settings.music_on_hold;

                        if (userAlreadyInList){
                            // Kill media for the same user we probably have connected
                            let peerCallId = userAlreadyInList.uuid + self.conference.id + userAlreadyInList.p2pSessionId;
                            if (self.conference.calls[peerCallId]) {
                                self.conference.calls[peerCallId].close();
                                var audio_el = document.getElementById(self.conference.calls[peerCallId].audio_id);
                                if (audio_el) document.body.removeChild(audio_el);
                                delete self.conference.calls[peerCallId];
                            }

                            if ((userAlreadyInList.uuid == self.user.uuid) && (userAlreadyInList.p2pSessionId == self.user.p2pSessionId)){
                                // We've got add-member for the same user we're running
                                // but having different p2pSessionId
                                let res = {
                                    newUser: event.User,
                                    oldUser: userAlreadyInList
                                };
                                self.leave();
                                self.trigger_('device-switch', res);
                                return;
                            }
                        }

                
                        if (musicOnHold && sameUser && (!conferenceHasModerator && waitForModerator || numberUsersInConference === 1)) {
                            self.mohPlay();
                        }
                        if (musicOnHold && numberUsersInConference !== 1 && (conferenceHasModerator && waitForModerator || !waitForModerator)) {
                            self.mohStop();
                        }
                        if (!waitForModerator || conferenceHasModerator && waitForModerator) {

                            // It's time to place calls

                            Object.keys(self.conference.users || {}).forEach(uuid => {

                                // Calling everybody but the user himself and users we already have a call with

                                let peerCallId = uuid + self.conference.id + self.conference.users[uuid].p2pSessionId || "";
                                if (uuid !== self.user.uuid && !self.conference.calls[peerCallId]) { 
                                    if (self.debug) console.log('Call', uuid, self.conference.users[uuid].p2pSessionId);
                                    self.p2pCall_(self.conference.id, uuid, self.conference.users[uuid].p2pSessionId)
                                    .then((call, id) => {
                                        if (self.debug) console.log('Call', uuid, self.conference.users[uuid].p2pSessionId, 'ready');
                                        self.conference.calls[peerCallId] = call;
                                        self.conference.calls[peerCallId].audio_id = id;
                                    })
                                    .catch(error => {
                                        if (self.debug) console.log('Call', uuid, self.conference.users[uuid].p2pSessionId, 'failed');
                                        if (self.debug) console.error('P2P call error:', error);
                                    });
                                }
                            }); // forEach
                        }
                    } else {
                        // Server-based conferences
                        self.conference.users[event.User.uuid] = event.User;
                    }

                    self.trigger_('add-member', response);
                    break;

                case 'del-member':
                    if (self.conference && self.conference.users){
                        let user = self.conference.users[event['Caller-Caller-ID-Number']];
                        if ((user && (user.p2pSessionId == event.User.p2pSessionId)) || !self.isP2P){
                            if (self.debug) console.log('del-member:', user);
                            delete self.conference.users[event['Caller-Caller-ID-Number']];
                        }
                    }
                    self.trigger_('del-member', { uuid: event['Caller-Caller-ID-Number'], p2p_session_id: event.User.p2pSessionId });
                    break;

                case 'start-talking':
                    self.trigger_('start-talking', {uuid: event['Caller-Caller-ID-Number']});
                    break;

                case 'stop-talking':
                    self.trigger_('stop-talking', {uuid: event['Caller-Caller-ID-Number']});
                    break;

                case 'mute-member':
                    if (self.user.uuid === event['Caller-Caller-ID-Number']) {
                        if (self.isP2P){
                            self.p2pChangeMuteState_(true);
                        } else {
                            self.call && self.call.setMute('off');
                        }
                    }
                    self.trigger_('mute-member', {uuid: event['Caller-Caller-ID-Number']});
                    break;

                case 'unmute-member':
                    if (self.user.uuid === event['Caller-Caller-ID-Number']) {
                        if (self.isP2P){
                            self.p2pChangeMuteState_(false);
                        } else {
                            self.call && self.call.setMute('on');
                        }
                    }
                    self.trigger_('unmute-member', {uuid: event['Caller-Caller-ID-Number']});
                    break;

                case 'lock':
                    self.trigger_('lock', { });
                    break;

                case 'unlock':
                    self.trigger_('unlock', { });
                    break;

                case 'kick-member':
                    if (self.isP2P) {
                        self.p2pKick_(event['Caller-Caller-ID-Number'], event.User.p2pSessionId);
                    }
                    self.trigger_('kick-member', {uuid: event['Caller-Caller-ID-Number'], p2p_session_id: event.User.p2pSessionId});
                    break;

                case 'conference-create':
                    self.trigger_('conference-create', { conference_session_id: event['ConferenceUniqueID'] });
                    break;

                case 'conference-destroy':
                    self.trigger_('conference-destroy', { conference_session_id: event['ConferenceUniqueID'] });
                    break;

                case 'call-status-amd':
                    self.trigger_('call-status-amd', {uuid: event['Caller-Caller-ID-Number'], status: event['Status']});
                    break;

                case 'call-status':
                    self.trigger_('call-status', {uuid: event['Caller-Callee-ID-Number'], status: event['Status'], number: event['Number']});
                    break;

                case 'setgrace':
                    self.trigger_('setgrace', { });
                    break;

                case 'start-recording':
                    self.trigger_('start-recording', { recordingID: event.Record });
                    break;

                case 'stop-recording':
                    self.trigger_('stop-recording', { recordingID: event.Record });
                    break;

                case 'recording-completed':
                    self.trigger_('recording-completed', { recordingID: event.Record, url: event.url });
                    break;
                case 'screen-share-start':
                    self.trigger_('screen-share-start', { uuid: event['Caller-Caller-ID-Number'] });
                    break;
                case 'screen-share-stop':
                    self.trigger_('screen-share-stop', { uuid: event['Caller-Caller-ID-Number'] });
                    break;
                case 'call-me':
                if (self.debug) console.log(event)
                    if ((event['Callee-Callee-ID-Number'] == self.user.uuid) && self.ssStream){
                        if (!self.screenShareSource || self.screenShareSource.disconnected) {
                            self.screenShareSource = self.p2pScreenShareInit_();
                            self.screenShareSource.on('error', (err) => {
                                if(self.debug) console.error('PeerJS error occured:', err);
                                self.screenShareSource.destroy();
                                self.screenShareSource = self.p2pScreenShareInit_();
                                self.trackPeerjsStats_(self.screenShareSource);
                            });
                            self.screenShareSource.on('disconnected', () => {
                                if(self.screenShareSource) self.screenShareSource.reconnect();
                            });
                            self.trackPeerjsStats_(self.screenShareSource);
                        }
                        var call;
                        let tries = 1;
                        let timer = setInterval(() => {
                            call = self.screenShareSource.call('ss-' + event['Caller-Caller-ID-Number'] + self.id() + (event.User.p2pSessionId||""), self.ssStream);
                            if (self.debug) console.log(`Attempt ${tries}: calling ss-` + event['Caller-Caller-ID-Number'] + self.id() + (event.User.p2pSessionId||""));
                            if (call) {
                                call.on('stream', (remoteStream) => {
                                }); 
                            } else {
                                tries = tries + 1;
                            }
                            if (call || (tries > 5)) {
                                clearInterval(timer);
                                if (self.debug && !call) console.error(`Calling ss-` + event['Caller-Caller-ID-Number'] + self.id() + (event.User.p2pSessionId||"") + ' failed');
                            }
                        }, 1000);

                    }
                    break;
                }
            });
        } // handleEvents_

        prepareInvitation_ (conferenceSettings, data, options) {
            let self = this;

            if (!options || options && !options.conference_url) return Promise.reject('Missing conference url');
            if (!data) return Promise.reject('Missing contacts information');
            var inviteData = { invited_by_uuid: this.user.uuid };
            var contacts = [];

            data.forEach(function(data) { return contacts.push(new CliqueContact(data)) });

            var emails = contacts.filter(function (el) { return el.isEmail() }).map(function(el) { return { contact: el.contact } });
            var phones = contacts.filter(function (el) { return el.isSms() }).map(function(el) { return { contact: el.contact } });
            var calls = contacts.filter(function (el) { return el.isCall() }).map(function(el) { return { contact: el.contact } });

            if (emails.length) inviteData.email = {
                contacts: emails,
                template_name: options.email_template,
                template_params: {
                    name: options.sender_name || options.sender_email || 'Your contact',
                    conference_url: options.conference_url,
                    defaultLogoUrl: options.defaultLogoUrl,
                    phone: conferenceSettings.phone_number,
                },
            };

            if (phones.length) inviteData.sms = {
                contacts: phones,
                template_name: options.sms_template,
                template_params: {
                    name: options.sender_name || options.sender_email || 'Your contact',
                    conference_url: options.conference_url,
                    phone: conferenceSettings.phone_number,
                },
            };

            if (calls.length && self.conference.node_domain !== 'p2p') inviteData.call = {
                contacts: calls,
            };

            return Promise.resolve(inviteData);
        }

        actionRun_ (action, data) {
            let self = this;

            if (self.call && action !== 'reconnect') return Promise.reject({code: 'already-connected', data: 'Instance is already connected to the conference'});

            return new Promise( (resolve, reject) => {
                self.init()
                    .then( () => {
                        let whitelist = Object.assign({}, data.whitelist||{});
                        if(data.whitelist) { 
                            delete data.whitelist; 
                        }
                        let conferencePromise = (action == 'create'? self.api.conferenceCreate(data): self.api.conferenceFetch(data, true));

                        if(Object.keys(whitelist).length) {
                            let wl_array = Object.values(whitelist);
                            if(!wl_array.includes(self.user.uuid)) {
                                wl_array.push(self.user.uuid);
                            }
                            return new Promise( (resolve_, reject_) => {
                                conferencePromise.then( (conference) => {
                                    self.api.whitelistCreate(conference.id, wl_array);
                                    resolve_(conference);
                                });
                            } );
                        }
                        else return conferencePromise;
                    } )
                    .then( (conference) => {
                        self.conference = self.prepareConference_(conference);
                        self.p2pMuted = conference.Settings.e1_joins_muted;
                        if (conference.locked && self.user.uuid !== conference.creator_uuid) {
                            return Promise.reject({code: 'conference-locked', data: 'Conference is locked'});
                        }

                        return self.initUA_(conference);
                    } )
                    .then(function() {
                        self.socketSubscribe_(self.conference.id);

                        if (self.isP2P){
                            var currentTime = (new Date()).toISOString();
                            self.user.meta.is_moderator = self.conference.creator_uuid === self.user.uuid;
                            var userAddSocketEvent = {
                                Action: 'add-member',
                                Room: self.conference.id,
                                'Caller-Caller-ID-Number': self.user.uuid,
                                // ConferenceUniqueID: event['Conference-Unique-ID'],
                                User: self.user,
                                Time: currentTime,
                            };
                            if (self.debug) console.log('P2P add-member', self.user);

                            self.socket.emit('inject', userAddSocketEvent);
                        }
                        else if (action !== 'reconnect') {
                            self.call = self.verto.newCall({destination_number:'conference_' + self.conference.id, caller_id_number:self.user.uuid});
                        }
                        resolve(self.conference);
                    } )
                    .catch( (data) => {
                        reject(data);
                    } );            
            } );
        }

        p2pChangeMuteState_ (isMuted){
            let self = this;
            self.p2pMuted = isMuted;
            if (self.conference.calls) {
                Object.keys(self.conference.calls).forEach(peerCallId => {
                    self.conference.calls[peerCallId].localStream.getAudioTracks()[0].enabled = !isMuted;
                });
            }
        }

        // P2P routines
        p2pBindMicManager_ (stream, threshold){
            let self = this;
            if (self.micContext) return; // We don't wanna make too much microphone managers
            self.micContext = new (window.AudioContext || window.webkitAudioContext)();
            let micSource = self.micContext.createMediaStreamSource(stream);
            let micProcessor = self.micContext.createScriptProcessor(2048, 1, 1);
            let micAnalyser = self.micContext.createAnalyser();
            micProcessor.connect(self.micContext.destination);
            micSource.connect(micAnalyser);

            // Now we should have an AudioContext associated with the local microphone
            micAnalyser.fftSize = 64;
            var data = new Uint8Array(micAnalyser.frequencyBinCount);
            var talkStatus = false;
            var talkCount = 0;
            micProcessor.onaudioprocess = function (){
                micAnalyser.getByteFrequencyData(data);
                var sum = 0;
                for (let item of data){
                    if (item) sum += item;
                }
                if (sum > threshold) {
                    if (!talkStatus && talkCount>10) {
                        talkStatus = true;
                        let currentTime = (new Date()).toISOString();
                        if (self.conference && self.conference.p2p) {
                            let startTalkingEvent = {
                                Action: 'start-talking',
                                Room: self.conference.id,
                                'Caller-Caller-ID-Number': self.user.uuid,
                                // ConferenceUniqueID: event['Conference-Unique-ID'],
                                User: self.user,
                                Time: currentTime,
                            };
                            self.socket.emit('inject', startTalkingEvent);
                        }
                    }
                    if (!talkStatus) talkCount++;
                } else {
                    if (talkStatus && talkCount<=0) {
                        talkStatus = false;
                        let currentTime = (new Date()).toISOString();
                        if (self.conference && self.conference.p2p) {
                            let stopTalkingEvent = {
                                Action: 'stop-talking',
                                Room: self.conference.id,
                                'Caller-Caller-ID-Number': self.user.uuid,
                                // ConferenceUniqueID: event['Conference-Unique-ID'],
                                User: self.user,
                                Time: currentTime,
                            };
                            self.socket.emit('inject', stopTalkingEvent);
                        }
                    }
                    if (talkStatus) talkCount--;
                }
            }
        };

        p2pUnbindMicManager_ (){
            let self = this;
            if (!self.micContext) return;
            self.micContext.close();
            delete self.micContext;
        }

        p2pScreenShareInit_ (p2pSessionId){
            let self = this;

            p2pSessionId = (p2pSessionId?p2pSessionId:"");
            var location = new URL(self.peerManager);
            var port = location.port || (location.protocol == 'https:' ? '443' : '80');
            var ssPeer = new Peer('ss-' + self.user.uuid + self.id() + p2pSessionId, {
                debug: 3,
                secure: location.protocol == 'https:',
                host: location.hostname,
                port: port,
                path: location.pathname,
                authParams: { conference_id: self.id(), session_token: self.sessionToken },
                config: {iceServers: self.iceServers}
            });
            ssPeer.on('call', function (call) {
                if (self.debug) console.log(call.peer)
                self.conference.ss_calls[call.peer] = call;
                self.conference.ss_calls[call.peer].answer(null);
                self.conference.ss_calls[call.peer].on('stream', function(remoteStream) {
                    self.conference.domElements[call.peer].srcObject = remoteStream;
                    let p = self.conference.domElements[call.peer].play();
                    if (p) p.then(()=>{}).catch(()=>{});
                });
                self.conference.ss_calls[call.peer].on('error', function(err){
                    if (self.debug) console.error(err);
                });
                self.conference.ss_calls[call.peer].on('close', function(){
                    if (self.debug) console.log('Close connection');
                    delete self.conference.ss_calls[call.peer];
                });
            });
            return ssPeer;
        }

        p2pInit_ (conference_id){
            let self = this;
            if (self.p2pObj) return;
            self.p2pMicThreshold = self.p2pMicThreshold || 800;

            self.socketInit_(self.user.p2pSessionId);

            var location = new URL(self.peerManager);
            var port = location.port || (location.protocol == 'https:' ? '443' : '80');
            if (self.debug) console.log("Init P2P",self.user.uuid, self.id(), self.user.p2pSessionId)
            self.p2pObj = new Peer(self.user.uuid + self.id() + self.user.p2pSessionId, {
                debug: 3,
                secure: location.protocol == 'https:',
                host: location.hostname,
                port: port,
                path: location.pathname,
                authParams: { conference_id: self.id(), session_token: self.sessionToken },
                config: {iceServers: self.iceServers}
            });
            self.p2pObj.on('call', function(call){
                // call is a mediaConnection instance
                if (!self.conference) return;
                navigator.getUserMedia({video: false, audio:true}, function(stream){
                    self.micStream = stream;
                    self.p2pBindMicManager_(stream, self.p2pMicThreshold);
                    // TODO: Add conference id check, participant number limit
                    if (!self.conference.calls) self.conference.calls = {};
                    self.conference.p2p = true;
                    self.conference.calls[call.peer] = call;
                    call.answer(stream);
                    call.on('stream', function(remoteStream){
                        var id = self.audioElementCreate_(call.peer);
                        document.getElementById(id).srcObject = remoteStream;
                        self.conference.calls[call.peer].audio_id = id;
                        if (self.p2pMuted) {
                            self.conference.calls[call.peer].localStream.getAudioTracks()[0].enabled = false;
                        }
                    });
                }, function(error){
                    if (self.debug) console.error('FATAL: Can\'t getUserMedia', error);
                    throw error;
                });
            });
        }

        p2pCall_ (conference_id, user_id, p2pSessionId){
            let self = this;
            if (self.debug) console.log('P2P Call:', conference_id, user_id, p2pSessionId);
            return new Promise((resolve, reject) => {
                var peerCallId = user_id + conference_id + p2pSessionId;
                navigator.getUserMedia({video: false, audio:true}, function(stream){
                    if (!self.conference.users[user_id]) {
                        // No such user in the conference
                        return reject({code: 'no-user'});
                    };
                    self.micStream = stream;
                    let call = self.p2pObj.call(peerCallId, stream);
                    if (!call) {
                        // Call failed
                        return reject({code: 'no-call'})
                    }
                    if (self.debug) console.log("P2P Call Stage #2");

                    self.p2pBindMicManager_(stream, self.p2pMicThreshold);

                    var id = self.audioElementCreate_(peerCallId);
                    call.on('stream', function(remoteStream){
                        if (self.debug) console.log("P2P Call Stream Ready", remoteStream);
                        document.getElementById(id).srcObject = remoteStream;

                        if (self.p2pMuted) {
                            call.localStream.getAudioTracks()[0].enabled = false;
                        }
                    });
                    return resolve(call, id);
                }, function(error){
                    if (self.debug) console.error('FATAL: Can\'t getUserMedia', error);
                    return reject({code:'webrtc-error',error:error});
                });
            });
        }

        p2pKick_ (uuid, p2pSessionId){
            let self = this;
            return new Promise((resolve, reject) => {
                if (!self.conference) return reject({code: 'not-connected', data: 'Instance is not connected to the conference'})
                if (uuid !== self.user.uuid) {
                    const peerCallId = uuid + self.conference.id + (p2pSessionId||"")
                    if (self.conference.calls && self.conference.calls[peerCallId]) {
                        self.conference.calls[peerCallId].close();
                    }
                } else {
                    if (p2pSessionId == self.user.p2pSessionId){
                        self.leave();
                    }
                }

                resolve();
            });
        }
    }


    /*

    CliqueSimpleCall provides an interface to usual two-side calls via Clique servers.

    PSTN numbers, SIP URIs are supported. 

    */
 
    class CliqueSimpleCall extends CliqueBase {

        id () {
            let self = this;
            return self.number;
        }

        initUA_ () {
            let self = this;

            self.socketInit_();

            return AjaxRequest({
                url : self.apiEndpoint + '/nodes',
                dataType : 'JSON',
                bearer: self.sessionToken
            })
            .then( (data) => {

            //TODO: remove this logic from frontend. We need API method to return domain with the least cpu load
                var minLoad = 101;
                var minIndex = 0;

                for (var i in data.result){
                    if (data.result[i].cpu_load < minLoad) {
                        minLoad = data.result[i].cpu_load;
                        minIndex = i;
                    }
                }

                var node = data.result[minIndex];
                if (!node) throw new Error('Node is undefined');

                return super.initUA_(node.domain_name);
            })
            .then( () => {
                return self.verto
            });
        }

        vertoDialogState_(d) {
            let self = this;
            switch (d.state.name) {
            case 'trying':
                break;
            case 'answering':
                self.trigger_('call-answer', { });
               break;
            case 'active':
                self.trigger_('call-active', { });
                break;
            case 'hangup':
                var error;
                if (d.cause !== 'NORMAL_CLEARING') { error = d.cause; }
                self.trigger_('call-hangup', { });
                break;
            case 'destroy':
                // cleanup...
                self.cleanup_();
                break;
            }            
        }

        handleEvents_ () {
            let self = this;

           self.socket.on('event', function(event){

                switch (event.Action) {

                default:
                    break;
                }
            });
        } // handleEvents_

        dial (number, options) {
            let self = this;

            self.init()
                .then( () => {
                    return self.initUA_()
                } )
                .then(function (ua) {
                    var vars = {};

                    if (options && (options.detect_machine || options.detectMachine)) vars.Live_Answer = true;
                    if (options && (options.detect_beep || options.detectBeep)) vars.Detect_Beep = true;
                    if (options && (options.connect_on_live || options.connectOnLive)) {
                        vars.Live_Answer = true;
                        vars.Connect_On_Live = true;
                    }
                    if (!vars.Live_Answer) {
                        vars.Detect_Beep = false;
                    }

                    self.call = ua.newCall({ destination_number:number, userVariables: vars, caller_id_number: options && options.source || self.user.uuid });
                    self.number = number;
                    return Promise.resolve(self.call);
                })
                .catch(function(err) {
                    throw {code: 'http-error', data: err}
                });
        }
        
        hangup () {
            this.call && this.call.hangup();
        }

        cleanup_ () {
            let self = this;
            self.call = null;
            self.number = null;
        }
    }

    class CliqueUser extends CliqueAbstract {
        getConferenceSettings() {
            return this.init()
            .then(() => {
                return this.api.userFetch();
            })
            .then(user => user.settings);
        }

        updateConferenceSettings(props) {
            return this.init()
            .then(() => {
                return this.api.userUpdate({ settings: props });
            })
            .then(user => user.settings);
        }
    }

    class CliqueChat extends CliqueAbstract {
        constructor(options) {
            super(options);
            this.doneTypingInterval = 5000;
            this.subscribedChats = {};
            this.typingTimer = [];
            this.socketInit_();
        }

        create(data) {
            let self = this;

            return self.init()
            .then(() => {
                return self.api.chatCreate(data);
            })
            .then(chatInfo => {
                self.subscribedChats[chatInfo.chat.chat_id] = {};
                self.subscribe_(chatInfo.chat.chat_id);
                return chatInfo.chat;
            });
        }

        join(chatId) {
            let self = this;

            return self.init()
            .then(() => {
                return self.api.chatJoin(chatId);
            })
            .then(chatInfo => {
                self.subscribedChats[chatInfo.chat.chat_id] = {};
                self.subscribe_(chatInfo.chat.chat_id);
                return chatInfo.chat;
            });
        }

        leave(chatId) {
            let self = this;

            return self.init()
            .then(() => {
                return self.api.chatLeave(chatId);
            })
            .then(chatInfo => {
                delete self.subscribedChats[chatId];
                self.unsubscribe_(chatId);
                return chatInfo.chat;
            });
        }

        send(chat_id, message) {
            let self = this;

            if (!chat_id) return Promise.reject({code: 'not-connected', data: 'Chat id missed'})

            self.socket.emit('message', {
                chat_id: chat_id,
                message: message,
                timestamp: (new Date()).toISOString(),
            });
        }

        fetchMessageHistory(chat_id, options = {}) {
            let self = this;

            return self.init()
            .then(() => {
                self.socket.emit('message-history', {
                    chat_id: chat_id,
                    options: options,
                });
            });
        }

        markMessagesAsRead(chat_id, timestamp) {
            this.socket.emit('message-marked-read', {
                chat_id: chat_id,
            });
        }

        subscribe_(chat_id) {
            this.socket.emit('subscribe', {
                channel: chat_id,
                type: 'chat',
            });
        }

        unsubscribe_(chat_id) {
            this.socket.emit('unsubscribe', {
                channel: chat_id,
                type: 'chat',
            });
        }

        handleEvents_ () {
            let self = this;

            self.socket.on('reconnect', function(event){
                if (Object.keys(self.subscribedChats).length) {
                    self.actionRun_('reconnect', Object.keys(self.subscribedChats));
                }
            });

            self.socket.on('event', function(event){

                switch (event.Action) {
                case 'message':
                    self.trigger_('message', { uuid: event['Caller-Caller-ID-Number'], message: event.message, chat_id: event.chat_id, timestamp: event.timestamp });
                    break;
                case 'message-history':
                    self.trigger_('message-history', { uuid: event['Caller-Caller-ID-Number'], messages: event.messages, total: event.total, chat_id: event.chat_id });
                    break;
                case 'message-start-typing':
                    self.trigger_('message-start-typing', { uuid: event['Caller-Caller-ID-Number'], chat_id: event.chat_id });
                    break;
                case 'subscribe':
                    self.trigger_('subscribe', { uuid: event['Caller-Caller-ID-Number'], chat_id: event.channel, unread_message_count: event.unread_message_count });
                    break;
                case 'unsubscribe':
                    self.trigger_('unsubscribe', { uuid: event['Caller-Caller-ID-Number'], chat_id: event.channel });
                    break;
                case 'message-stop-typing':
                    self.trigger_('message-stop-typing', { uuid: event['Caller-Caller-ID-Number'], chat_id: event.chat_id });
                    break;
                }
            });
        } // handleEvents_


        actionRun_ (action, chatList = []) {
            let self = this;

            self.socketInit_();
            return Promise.all(chatList.map((chatId) => self.join(chatId)));
        }
    }


return { Conference: CliqueConference, User: CliqueUser, SimpleCall: CliqueSimpleCall, Chat: CliqueChat }

}));