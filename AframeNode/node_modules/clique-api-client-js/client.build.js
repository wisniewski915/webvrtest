!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.io=e():t.io=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t,e){"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{};var n,r=i(t),s=r.source,p=r.id,h=r.path,f=u[p]&&h in u[p].nsps,l=e.forceNew||e["force new connection"]||!1===e.multiplex||f;return l?(c("ignoring socket cache for %s",s),n=a(s,e)):(u[p]||(c("new io instance for %s",s),u[p]=a(s,e)),n=u[p]),r.query&&!e.query&&(e.query=r.query),n.socket(r.path,e)}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(1),s=n(7),a=n(12),c=n(3)("socket.io-client");t.exports=e=r;var u=e.managers={};e.protocol=s.protocol,e.connect=r,e.Manager=n(12),e.Socket=n(37)},function(t,e,n){(function(e){"use strict";function r(t,n){var r=t;n=n||e.location,null==t&&(t=n.protocol+"//"+n.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?n.protocol+t:n.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t="undefined"!=typeof n?n.protocol+"//"+t:"https://"+t),i("parse %s",t),r=o(t)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";var s=r.host.indexOf(":")!==-1,a=s?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+a+":"+r.port,r.href=r.protocol+"://"+a+(n&&n.port===r.port?"":":"+r.port),r}var o=n(2),i=n(3)("socket.io-client:url");t.exports=r}).call(e,function(){return this}())},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");o!=-1&&i!=-1&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=n.exec(t||""),a={},c=14;c--;)a[r[c]]=s[c]||"";return o!=-1&&i!=-1&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e,n){(function(r){function o(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function i(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),n){var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r)}}function s(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function a(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(n){}}function c(){var t;try{t=e.storage.debug}catch(n){}return!t&&"undefined"!=typeof r&&"env"in r&&(t=r.env.DEBUG),t}function u(){try{return window.localStorage}catch(t){}}e=t.exports=n(5),e.log=s,e.formatArgs=i,e.save=a,e.load=c,e.useColors=o,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:u(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},e.enable(c())}).call(e,n(4))},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(t){if(p===setTimeout)return setTimeout(t,0);if((p===n||!p)&&setTimeout)return p=setTimeout,setTimeout(t,0);try{return p(t,0)}catch(e){try{return p.call(null,t,0)}catch(e){return p.call(this,t,0)}}}function i(t){if(h===clearTimeout)return clearTimeout(t);if((h===r||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function s(){y&&l&&(y=!1,l.length?d=l.concat(d):m=-1,d.length&&a())}function a(){if(!y){var t=o(s);y=!0;for(var e=d.length;e;){for(l=d,d=[];++m<e;)l&&l[m].run();m=-1,e=d.length}l=null,y=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function u(){}var p,h,f=t.exports={};!function(){try{p="function"==typeof setTimeout?setTimeout:n}catch(t){p=n}try{h="function"==typeof clearTimeout?clearTimeout:r}catch(t){h=r}}();var l,d=[],y=!1,m=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new c(t,e)),1!==d.length||y||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.prependListener=u,f.prependOnceListener=u,f.listeners=function(t){return[]},f.binding=function(t){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(t){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(t,e,n){function r(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}function o(t){function n(){if(n.enabled){var t=n,r=+new Date,i=r-(o||r);t.diff=i,t.prev=o,t.curr=r,o=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;c++;var o=e.formatters[r];if("function"==typeof o){var i=s[c];n=o.call(t,i),s.splice(c,1),c--}return n}),e.formatArgs.call(t,s);var u=n.log||e.log||console.log.bind(console);u.apply(t,s)}}var o;return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=r(t),n.destroy=i,"function"==typeof e.init&&e.init(n),e.instances.push(n),n}function i(){var t=e.instances.indexOf(this);return t!==-1&&(e.instances.splice(t,1),!0)}function s(t){e.save(t),e.names=[],e.skips=[];var n,r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&(t=r[n].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}}function a(){e.enable("")}function c(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1}function u(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o.debug=o["default"]=o,e.coerce=u,e.disable=a,e.enable=s,e.enabled=c,e.humanize=n(6),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){function n(t){if(t=String(t),!(t.length>100)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*p;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*c;case"minutes":case"minute":case"mins":case"min":case"m":return n*a;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function r(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms"}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms"}function i(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,p=365.25*u;t.exports=function(t,e){e=e||{};var i=typeof t;if("string"===i&&t.length>0)return n(t);if("number"===i&&isNaN(t)===!1)return e["long"]?o(t):r(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){function r(){}function o(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var r=i(t.data);if(r===!1)return g;n+=r}return f("encoded %j as %s",t,n),n}function i(t){try{return JSON.stringify(t)}catch(e){return!1}}function s(t,e){function n(t){var n=d.deconstructPacket(t),r=o(n.packet),i=n.buffers;i.unshift(r),e(i)}d.removeBlobs(t,n)}function a(){this.reconstructor=null}function c(t){var n=0,r={type:Number(t.charAt(0))};if(null==e.types[r.type])return h("unknown packet type "+r.type);if(e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type){for(var o="";"-"!==t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||"-"!==t.charAt(n))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===t.charAt(n+1))for(r.nsp="";++n;){var i=t.charAt(n);if(","===i)break;if(r.nsp+=i,n===t.length)break}else r.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(r.id="";++n;){var i=t.charAt(n);if(null==i||Number(i)!=i){--n;break}if(r.id+=t.charAt(n),n===t.length)break}r.id=Number(r.id)}if(t.charAt(++n)){var a=u(t.substr(n)),c=a!==!1&&(r.type===e.ERROR||y(a));if(!c)return h("invalid payload");r.data=a}return f("decoded %s as %j",t,r),r}function u(t){try{return JSON.parse(t)}catch(e){return!1}}function p(t){this.reconPack=t,this.buffers=[]}function h(t){return{type:e.ERROR,data:"parser error: "+t}}var f=n(3)("socket.io-parser"),l=n(8),d=n(9),y=n(10),m=n(11);e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=r,e.Decoder=a;var g=e.ERROR+'"encode error"';r.prototype.encode=function(t,n){if(f("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)s(t,n);else{var r=o(t);n([r])}},l(a.prototype),a.prototype.add=function(t){var n;if("string"==typeof t)n=c(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!m(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");n=this.reconstructor.takeBinaryData(t),n&&(this.reconstructor=null,this.emit("decoded",n))}},a.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=d.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){function r(t){if(t)return o(t)}function o(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===e||r.fn===e){n.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n){n=n.slice(0);for(var r=0,o=n.length;r<o;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){(function(t){function r(t,e){if(!t)return t;if(s(t)){var n={_placeholder:!0,num:e.length};return e.push(t),n}if(i(t)){for(var o=new Array(t.length),a=0;a<t.length;a++)o[a]=r(t[a],e);return o}if("object"==typeof t&&!(t instanceof Date)){var o={};for(var c in t)o[c]=r(t[c],e);return o}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(i(t))for(var n=0;n<t.length;n++)t[n]=o(t[n],e);else if("object"==typeof t)for(var r in t)t[r]=o(t[r],e);return t}var i=n(10),s=n(11),a=Object.prototype.toString,c="function"==typeof t.Blob||"[object BlobConstructor]"===a.call(t.Blob),u="function"==typeof t.File||"[object FileConstructor]"===a.call(t.File);e.deconstructPacket=function(t){var e=[],n=t.data,o=t;return o.data=r(n,e),o.attachments=e.length,{packet:o,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){function n(t,a,p){if(!t)return t;if(c&&t instanceof Blob||u&&t instanceof File){r++;var h=new FileReader;h.onload=function(){p?p[a]=this.result:o=this.result,--r||e(o)},h.readAsArrayBuffer(t)}else if(i(t))for(var f=0;f<t.length;f++)n(t[f],f,t);else if("object"==typeof t&&!s(t))for(var l in t)n(t[l],l,t)}var r=0,o=t;n(o),r||e(o)}}).call(e,function(){return this}())},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){(function(e){function n(t){return r&&e.Buffer.isBuffer(t)||o&&(t instanceof e.ArrayBuffer||i(t))}t.exports=n;var r="function"==typeof e.Buffer&&"function"==typeof e.Buffer.isBuffer,o="function"==typeof e.ArrayBuffer,i=function(){return o&&"function"==typeof e.ArrayBuffer.isView?e.ArrayBuffer.isView:function(t){return t.buffer instanceof e.ArrayBuffer}}()}).call(e,function(){return this}())},function(t,e,n){"use strict";function r(t,e){if(!(this instanceof r))return new r(t,e);t&&"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||c;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=e.autoConnect!==!1,this.autoConnect&&this.open()}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(13),s=n(37),a=n(8),c=n(7),u=n(39),p=n(40),h=n(3)("socket.io-client:manager"),f=n(36),l=n(41),d=Object.prototype.hasOwnProperty;t.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)d.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},r.prototype.updateSocketIds=function(){for(var t in this.nsps)d.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},r.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},a(r.prototype),r.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},r.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},r.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(t,e){if(h("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;h("opening %s",this.uri),this.engine=i(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var o=u(n,"open",function(){r.onopen(),t&&t()}),s=u(n,"error",function(e){if(h("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var a=this._timeout;h("connect attempt will timeout after %d",a);var c=setTimeout(function(){h("connect attempt timed out after %d",a),o.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",a)},a);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(o),this.subs.push(s),this},r.prototype.onopen=function(){h("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(u(t,"data",p(this,"ondata"))),this.subs.push(u(t,"ping",p(this,"onping"))),this.subs.push(u(t,"pong",p(this,"onpong"))),this.subs.push(u(t,"error",p(this,"onerror"))),this.subs.push(u(t,"close",p(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",p(this,"ondecoded")))},r.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},r.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},r.prototype.ondata=function(t){this.decoder.add(t)},r.prototype.ondecoded=function(t){this.emit("packet",t)},r.prototype.onerror=function(t){h("error",t),this.emitAll("error",t)},r.prototype.socket=function(t,e){function n(){~f(o.connecting,r)||o.connecting.push(r)}var r=this.nsps[t];if(!r){r=new s(this,t,e),this.nsps[t]=r;var o=this;r.on("connecting",n),r.on("connect",function(){r.id=o.generateId(t)}),this.autoConnect&&n()}return r},r.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},r.prototype.packet=function(t){h("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},r.prototype.cleanup=function(){h("cleanup");for(var t=this.subs.length,e=0;e<t;e++){var n=this.subs.shift();n.destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){h("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},r.prototype.onclose=function(t){h("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)h("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();h("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(h("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(h("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(h("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){t.exports=n(14),t.exports.parser=n(21)},function(t,e,n){(function(e){function r(t,n){if(!(this instanceof r))return new r(t,n);n=n||{},t&&"object"==typeof t&&(n=t,t=null),t?(t=p(t),n.hostname=t.host,n.secure="https"===t.protocol||"wss"===t.protocol,n.port=t.port,t.query&&(n.query=t.query)):n.host&&(n.hostname=p(n.host).host),this.secure=null!=n.secure?n.secure:e.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(e.location?location.hostname:"localhost"),this.port=n.port||(e.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=h.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var o="object"==typeof e&&e;o.global===o&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function o(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var i=n(15),s=n(8),a=n(3)("engine.io-client:socket"),c=n(36),u=n(21),p=n(2),h=n(30);t.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=u.protocol,r.Socket=r,r.Transport=n(20),r.transports=n(15),r.parser=n(21),r.prototype.createTransport=function(t){a('creating transport "%s"',t);var e=o(this.query);e.EIO=u.protocol,e.transport=t;var n=this.transportOptions[t]||{};this.id&&(e.sid=this.id);var r=new i[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0});return r},r.prototype.open=function(){var t;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(n){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},r.prototype.setTransport=function(t){a("setting transport %s",t.name);var e=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},r.prototype.probe=function(t){function e(){if(f.onlyBinaryUpgrades){var e=!this.supportsBinary&&f.transport.supportsBinary;h=h||e}h||(a('probe transport "%s" opened',t),p.send([{type:"ping",data:"probe"}]),p.once("packet",function(e){if(!h)if("pong"===e.type&&"probe"===e.data){if(a('probe transport "%s" pong',t),f.upgrading=!0,f.emit("upgrading",p),!p)return;r.priorWebsocketSuccess="websocket"===p.name,a('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){h||"closed"!==f.readyState&&(a("changing transport and sending upgrade packet"),u(),f.setTransport(p),p.send([{type:"upgrade"}]),f.emit("upgrade",p),p=null,f.upgrading=!1,f.flush())})}else{a('probe transport "%s" failed',t);var n=new Error("probe error");n.transport=p.name,f.emit("upgradeError",n)}}))}function n(){h||(h=!0,u(),p.close(),p=null)}function o(e){var r=new Error("probe error: "+e);r.transport=p.name,n(),a('probe transport "%s" failed because of error: %s',t,e),f.emit("upgradeError",r)}function i(){o("transport closed")}function s(){o("socket closed")}function c(t){p&&t.name!==p.name&&(a('"%s" works - aborting "%s"',t.name,p.name),n())}function u(){p.removeListener("open",e),p.removeListener("error",o),p.removeListener("close",i),f.removeListener("close",s),f.removeListener("upgrading",c)}a('probing transport "%s"',t);var p=this.createTransport(t,{probe:1}),h=!1,f=this;r.priorWebsocketSuccess=!1,p.once("open",e),p.once("error",o),p.once("close",i),this.once("close",s),this.once("upgrading",c),p.open()},r.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",r.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},r.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else a('packet received with socket readyState "%s"',this.readyState)},r.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},r.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},r.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},r.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},r.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},r.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},r.prototype.write=r.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},r.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){n=n||{},n.compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},r.prototype.close=function(){function t(){r.onClose("forced close"),a("socket closing - telling transport to close"),r.transport.close()}function e(){r.removeListener("upgrade",e),r.removeListener("upgradeError",e),t()}function n(){r.once("upgrade",e),r.once("upgradeError",e)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var r=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():t()}):this.upgrading?n():t()}return this},r.prototype.onError=function(t){a("socket error %j",t),r.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},r.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',t);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),n.writeBuffer=[],n.prevBufferLen=0}},r.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~c(this.transports,t[n])&&e.push(t[n]);return e}}).call(e,function(){return this}())},function(t,e,n){(function(t){function r(e){var n,r=!1,a=!1,c=!1!==e.jsonp;if(t.location){var u="https:"===location.protocol,p=location.port;p||(p=u?443:80),r=e.hostname!==location.hostname||p!==e.port,a=e.secure!==u}if(e.xdomain=r,e.xscheme=a,n=new o(e),"open"in n&&!e.forceJSONP)return new i(e);if(!c)throw new Error("JSONP disabled");return new s(e)}var o=n(16),i=n(18),s=n(33),a=n(34);e.polling=r,e.websocket=a}).call(e,function(){return this}())},function(t,e,n){(function(e){var r=n(17);t.exports=function(t){var n=t.xdomain,o=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(s){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(s){}if(!n)try{return new(e[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(s){}}}).call(e,function(){return this}())},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(n){t.exports=!1}},function(t,e,n){(function(e){function r(){}function o(t){if(c.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,e.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=t.hostname!==e.location.hostname||r!==t.port,this.xs=t.secure!==n}}function i(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}function s(){for(var t in i.requests)i.requests.hasOwnProperty(t)&&i.requests[t].abort()}var a=n(16),c=n(19),u=n(8),p=n(31),h=n(3)("engine.io-client:polling-xhr");t.exports=o,t.exports.Request=i,p(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new i(t)},o.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=r},o.prototype.doPoll=function(){h("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},u(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new a(t),r=this;try{h("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders){n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&n.setRequestHeader(o,this.extraHeaders[o])}}catch(s){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(s){}try{n.setRequestHeader("Accept","*/*")}catch(s){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){r.onLoad()},n.onerror=function(){r.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var t=n.getResponseHeader("Content-Type");r.supportsBinary&&"application/octet-stream"===t&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?r.onLoad():setTimeout(function(){r.onError(n.status)},0))},h("xhr data %s",this.data),n.send(this.data)}catch(s){return void setTimeout(function(){r.onError(s)},0)}e.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},i.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},i.prototype.cleanup=function(t){if("undefined"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,t)try{this.xhr.abort()}catch(n){}e.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(n){}t="application/octet-stream"===e?this.xhr.response||this.xhr.responseText:this.xhr.responseText}catch(n){this.onError(n)}null!=t&&this.onData(t)},i.prototype.hasXDR=function(){return"undefined"!=typeof e.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},e.document&&(e.attachEvent?e.attachEvent("onunload",s):e.addEventListener&&e.addEventListener("beforeunload",s,!1))}).call(e,function(){return this}())},function(t,e,n){function r(t){var e=t&&t.forceBase64;p&&!e||(this.supportsBinary=!1),o.call(this,t)}var o=n(20),i=n(30),s=n(21),a=n(31),c=n(32),u=n(3)("engine.io-client:polling");t.exports=r;var p=function(){var t=n(16),e=new t({xdomain:!1});return null!=e.responseType}();a(r,o),r.prototype.name="polling",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(t){function e(){u("paused"),n.readyState="paused",t()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||e()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||e()}))}else e()},r.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},r.prototype.onData=function(t){var e=this;u("polling got data %s",t);var n=function(t,n,r){return"opening"===e.readyState&&e.onOpen(),"close"===t.type?(e.onClose(),!1):void e.onPacket(t)};s.decodePayload(t,this.socket.binaryType,n),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},r.prototype.doClose=function(){function t(){u("writing close packet"),e.write([{type:"close"}])}var e=this;"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},r.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";!1!==this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t);var r=this.hostname.indexOf(":")!==-1;return e+"://"+(r?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){function r(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}var o=n(21),i=n(8);t.exports=r,i(r.prototype),r.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},r.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},r.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},r.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},r.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},r.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e)},r.prototype.onPacket=function(t){this.emit("packet",t)},r.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){(function(t){function r(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}function o(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=v[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){t.data=o.result,e.encodePacket(t,n,!0,r)},o.readAsArrayBuffer(t.data)}function s(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(g)return i(t,n,r);var o=new Uint8Array(1);o[0]=v[t.type];var s=new k([o.buffer,t.data]);return r(s)}function a(t){try{t=d.decode(t,{strict:!1})}catch(e){return!1}return t}function c(t,e,n){for(var r=new Array(t.length),o=l(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}var u,p=n(22),h=n(23),f=n(24),l=n(25),d=n(26);t&&t.ArrayBuffer&&(u=n(28));var y="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),m="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),g=y||m;e.protocol=3;var v=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=p(v),w={type:"error",data:"parser error"},k=n(29);e.encodePacket=function(e,n,i,a){"function"==typeof n&&(a=n,n=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&c instanceof ArrayBuffer)return o(e,n,a);if(k&&c instanceof t.Blob)return s(e,n,a);if(c&&c.base64)return r(e,a);var u=v[e.type];return void 0!==e.data&&(u+=i?d.encode(String(e.data),{strict:!1}):String(e.data)),a(""+u)},e.encodeBase64Packet=function(n,r){var o="b"+e.packets[n.type];if(k&&n.data instanceof t.Blob){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(n.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(a){for(var c=new Uint8Array(n.data),u=new Array(c.length),p=0;p<c.length;p++)u[p]=c[p];s=String.fromCharCode.apply(null,u)}return o+=t.btoa(s),r(o)},e.decodePacket=function(t,n,r){if(void 0===t)return w;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&(t=a(t),t===!1))return w;var o=t.charAt(0);return Number(o)==o&&b[o]?t.length>1?{type:b[o],data:t.substring(1)}:{type:b[o]}:w}var i=new Uint8Array(t),o=i[0],s=f(t,1);return k&&"blob"===n&&(s=new k([s])),{type:b[o],data:s}},e.decodeBase64Packet=function(t,e){var n=b[t.charAt(0)];if(!u)return{type:n,data:{base64:!0,data:t.substr(1)}};var r=u.decode(t.substr(1));return"blob"===e&&k&&(r=new k([r])),{type:n,data:r}},e.encodePayload=function(t,n,r){function o(t){return t.length+":"+t}function i(t,r){e.encodePacket(t,!!s&&n,!1,function(t){r(null,o(t))})}"function"==typeof n&&(r=n,n=null);var s=h(t);return n&&s?k&&!g?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r):t.length?void c(t,i,function(t,e){return r(e.join(""))}):r("0:")},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);"function"==typeof n&&(r=n,n=null);var o;if(""===t)return r(w,0,1);for(var i,s,a="",c=0,u=t.length;c<u;c++){var p=t.charAt(c);if(":"===p){if(""===a||a!=(i=Number(a)))return r(w,0,1);if(s=t.substr(c+1,i),a!=s.length)return r(w,0,1);if(s.length){if(o=e.decodePacket(s,n,!1),w.type===o.type&&w.data===o.data)return r(w,0,1);var h=r(o,c+i,u);if(!1===h)return}c+=i,a=""}else a+=p}return""!==a?r(w,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})}return t.length?void c(t,r,function(t,e){var r=e.reduce(function(t,e){var n;return n="string"==typeof e?e.length:e.byteLength,t+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}e?o[i++]=0:o[i++]=1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)}):n(new ArrayBuffer(0))},e.encodePayloadAsBlob=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,k){var c=new k([e.buffer,a.buffer,t]);n(null,c)}})}c(t,r,function(t,e){return n(new k(e))})},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var o=t,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],c="",u=1;255!==s[u];u++){if(c.length>310)return r(w,0,1);c+=s[u]}o=f(o,2+c.length),c=parseInt(c);var p=f(o,0,c);if(a)try{p=String.fromCharCode.apply(null,new Uint8Array(p))}catch(h){var l=new Uint8Array(p);p="";for(var u=0;u<l.length;u++)p+=String.fromCharCode(l[u])}i.push(p),o=f(o,c)}var d=i.length;i.forEach(function(t,o){r(e.decodePacket(t,n,!0),o,d)})}}).call(e,function(){return this}())},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e,n){(function(e){function r(t){if(!t||"object"!=typeof t)return!1;if(o(t)){for(var n=0,i=t.length;n<i;n++)if(r(t[n]))return!0;return!1}if("function"==typeof e.Buffer&&e.Buffer.isBuffer&&e.Buffer.isBuffer(t)||"function"==typeof e.ArrayBuffer&&t instanceof ArrayBuffer||s&&t instanceof Blob||a&&t instanceof File)return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return r(t.toJSON(),!0);for(var c in t)if(Object.prototype.hasOwnProperty.call(t,c)&&r(t[c]))return!0;return!1}var o=n(10),i=Object.prototype.toString,s="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),a="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.exports=r}).call(e,function(){return this}())},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function n(t,e,n){function o(t,r){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=n):0!==o.count||i||e(null,r)}var i=!1;return n=n||r,o.count=t,0===t?e():o}function r(){}t.exports=n},function(t,e,n){var r;(function(t,o){!function(i){function s(t){for(var e,n,r=[],o=0,i=t.length;o<i;)e=t.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(n=t.charCodeAt(o++),56320==(64512&n)?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--)):r.push(e);return r}function a(t){for(var e,n=t.length,r=-1,o="";++r<n;)e=t[r],e>65535&&(e-=65536,o+=w(e>>>10&1023|55296),e=56320|1023&e),o+=w(e);return o}function c(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return w(t>>e&63|128)}function p(t,e){if(0==(4294967168&t))return w(t);var n="";return 0==(4294965248&t)?n=w(t>>6&31|192):0==(4294901760&t)?(c(t,e)||(t=65533),n=w(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=w(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=w(63&t|128)}function h(t,e){e=e||{};for(var n,r=!1!==e.strict,o=s(t),i=o.length,a=-1,c="";++a<i;)n=o[a],c+=p(n,r);return c}function f(){if(b>=v)throw Error("Invalid byte index");var t=255&g[b];if(b++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function l(t){var e,n,r,o,i;if(b>v)throw Error("Invalid byte index");if(b==v)return!1;if(e=255&g[b],b++,0==(128&e))return e;if(192==(224&e)){if(n=f(),i=(31&e)<<6|n,i>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&e)){if(n=f(),r=f(),i=(15&e)<<12|n<<6|r,i>=2048)return c(i,t)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(n=f(),r=f(),o=f(),i=(7&e)<<18|n<<12|r<<6|o,i>=65536&&i<=1114111))return i;throw Error("Invalid UTF-8 detected")}function d(t,e){e=e||{};var n=!1!==e.strict;g=s(t),v=g.length,b=0;for(var r,o=[];(r=l(n))!==!1;)o.push(r);return a(o)}var y="object"==typeof e&&e,m=("object"==typeof t&&t&&t.exports==y&&t,"object"==typeof o&&o);m.global!==m&&m.window!==m||(i=m);var g,v,b,w=String.fromCharCode,k={version:"2.1.2",encode:h,decode:d};r=function(){return k}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}(this)}).call(e,n(27)(t),function(){return this}())},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3===2?i=i.substring(0,i.length-1)+"=":o%3===1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,r,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var p=new ArrayBuffer(a),h=new Uint8Array(p);for(e=0;e<c;e+=4)r=n[t.charCodeAt(e)],o=n[t.charCodeAt(e+1)],i=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],h[u++]=r<<2|o>>4,h[u++]=(15&o)<<4|i>>2,h[u++]=(3&i)<<6|63&s;return p}}()},function(t,e){(function(e){function n(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}t[e]=r}}}function r(t,e){e=e||{};var r=new i;n(t);for(var o=0;o<t.length;o++)r.append(t[o]);return e.type?r.getBlob(e.type):r.getBlob()}function o(t,e){return n(t),new Blob(t,e||{})}var i=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,s=function(){try{var t=new Blob(["hi"]);return 2===t.size}catch(e){return!1}}(),a=s&&function(){try{var t=new Blob([new Uint8Array([1,2])]);return 2===t.size}catch(e){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;t.exports=function(){return s?a?e.Blob:o:c?r:void 0}()}).call(e,function(){return this}())},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e){"use strict";function n(t){var e="";do{e=s[t%a]+e,t=Math.floor(t/a)}while(t>0);return e}function r(t){var e=0;for(p=0;p<t.length;p++)e=e*a+c[t.charAt(p)];return e}function o(){var t=n(+new Date);return t!==i?(u=0,i=t):t+"."+n(u++)}for(var i,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64,c={},u=0,p=0;p<a;p++)c[s[p]]=p;o.encode=n,o.decode=r,t.exports=o},function(t,e,n){(function(e){function r(){}function o(t){i.call(this,t),this.query=this.query||{},a||(e.___eio||(e.___eio=[]),a=e.___eio),this.index=a.length;var n=this;a.push(function(t){n.onData(t)}),this.query.j=this.index,e.document&&e.addEventListener&&e.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=r)},!1)}var i=n(19),s=n(31);t.exports=o;var a,c=/\n/g,u=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e;var r="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);r&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},o.prototype.doWrite=function(t,e){function n(){r(),e()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(t){o.onError("jsonp polling iframe removal error",t)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(e)}catch(t){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),p=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=p,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),t=t.replace(u,"\\\n"),this.area.value=t.replace(c,"\\n");try{this.form.submit()}catch(h){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(e,function(){return this}())},function(t,e,n){(function(e){function r(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=h&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(l=o),i.call(this,t)}var o,i=n(20),s=n(21),a=n(30),c=n(31),u=n(32),p=n(3)("engine.io-client:websocket"),h=e.WebSocket||e.MozWebSocket;if("undefined"==typeof window)try{o=n(35)}catch(f){}var l=h;l||"undefined"!=typeof window||(l=o),t.exports=r,c(r,i),r.prototype.name="websocket",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?e?new l(t,e):new l(t):new l(t,e,n)}catch(r){return this.emit("error",r)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},r.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},r.prototype.write=function(t){function n(){r.emit("flush"),setTimeout(function(){r.writable=!0,r.emit("drain")},0)}var r=this;this.writable=!1;for(var o=t.length,i=0,a=o;i<a;i++)!function(t){s.encodePacket(t,r.supportsBinary,function(i){if(!r.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate){var a="string"==typeof i?e.Buffer.byteLength(i):i.length;a<r.perMessageDeflate.threshold&&(s.compress=!1)}}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(c){p("websocket closed before onclose event")}--o||n()})}(t[i])},r.prototype.onClose=function(){i.prototype.onClose.call(this)},r.prototype.doClose=function(){"undefined"!=typeof this.ws&&this.ws.close()},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=u()),this.supportsBinary||(t.b64=1),t=a.encode(t),t.length&&(t="?"+t);var r=this.hostname.indexOf(":")!==-1;return e+"://"+(r?"["+this.hostname+"]":this.hostname)+n+this.path+t},r.prototype.check=function(){return!(!l||"__initialize"in l&&this.name===r.prototype.name)}}).call(e,function(){return this}())},function(t,e){},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){"use strict";function r(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(7),s=n(8),a=n(38),c=n(39),u=n(40),p=n(3)("socket.io-client:socket"),h=n(30),f=n(23);t.exports=e=r;var l={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=s.prototype.emit;s(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[c(t,"open",u(this,"onopen")),c(t,"packet",u(this,"onpacket")),c(t,"close",u(this,"onclose"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},r.prototype.send=function(){var t=a(arguments);return t.unshift("message"),this.emit.apply(this,t),this},r.prototype.emit=function(t){if(l.hasOwnProperty(t))return d.apply(this,arguments),this;var e=a(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:f(e))?i.BINARY_EVENT:i.EVENT,data:e};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(p("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},r.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},r.prototype.onopen=function(){if(p("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"===o(this.query)?h.encode(this.query):this.query;p("sending connect packet with query %s",t),this.packet({type:i.CONNECT,query:t})}else this.packet({type:i.CONNECT})},r.prototype.onclose=function(t){p("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},r.prototype.onpacket=function(t){if(t.nsp===this.nsp)switch(t.type){case i.CONNECT:this.onconnect();break;case i.EVENT:this.onevent(t);break;case i.BINARY_EVENT:this.onevent(t);break;case i.ACK:this.onack(t);break;case i.BINARY_ACK:this.onack(t);break;case i.DISCONNECT:this.ondisconnect();break;case i.ERROR:this.emit("error",t.data)}},r.prototype.onevent=function(t){var e=t.data||[];p("emitting event %j",e),null!=t.id&&(p("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?d.apply(this,e):this.receiveBuffer.push(e)},r.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var r=a(arguments);p("sending ack %j",r),e.packet({type:f(r)?i.BINARY_ACK:i.ACK,id:t,data:r})}}},r.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(p("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):p("bad ack %s",t.id)},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},r.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)d.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){p("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},r.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(p("performing disconnect (%s)",this.nsp),this.packet({type:i.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},r.prototype.compress=function(t){return this.flags.compress=t,this},r.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){function n(t,e){var n=[];e=e||0;for(var r=e||0;r<t.length;r++)n[r-e]=t[r];return n}t.exports=n},function(t,e){"use strict";function n(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}t.exports=n},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}}])});!function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module '"+g+"'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c||a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){b.exports.RTCSessionDescription=window.RTCSessionDescription||window.mozRTCSessionDescription,b.exports.RTCPeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,b.exports.RTCIceCandidate=window.RTCIceCandidate||window.mozRTCIceCandidate},{}],2:[function(a,b,c){function d(a,b,c){if(!(this instanceof d))return new d(a,b,c);f.call(this),this.options=e.extend({serialization:"binary",reliable:!1},c),this.open=!1,this.type="data",this.peer=a,this.provider=b,this.id=this.options.connectionId||d._idPrefix+e.randomToken(),this.label=this.options.label||this.id,this.metadata=this.options.metadata,this.serialization=this.options.serialization,this.reliable=this.options.reliable,this._buffer=[],this._buffering=!1,this.bufferSize=0,this._chunkedData={},this.options._payload&&(this._peerBrowser=this.options._payload.browser),g.startConnection(this,this.options._payload||{originator:!0})}var e=a("./util"),f=a("eventemitter3"),g=a("./negotiator"),h=a("reliable");e.inherits(d,f),d._idPrefix="dc_",d.prototype.initialize=function(a){this._dc=this.dataChannel=a,this._configureDataChannel()},d.prototype._configureDataChannel=function(){var a=this;e.supports.sctp&&(this._dc.binaryType="arraybuffer"),this._dc.onopen=function(){e.log("Data channel connection success"),a.open=!0,a.emit("open")},!e.supports.sctp&&this.reliable&&(this._reliable=new h(this._dc,e.debug)),this._reliable?this._reliable.onmessage=function(b){a.emit("data",b)}:this._dc.onmessage=function(b){a._handleDataMessage(b)},this._dc.onclose=function(b){e.log("DataChannel closed for:",a.peer),a.close()}},d.prototype._handleDataMessage=function(a){var b=this,c=a.data,d=c.constructor;if("binary"===this.serialization||"binary-utf8"===this.serialization){if(d===Blob)return void e.blobToArrayBuffer(c,function(a){c=e.unpack(a),b.emit("data",c)});if(d===ArrayBuffer)c=e.unpack(c);else if(d===String){var f=e.binaryStringToArrayBuffer(c);c=e.unpack(f)}}else"json"===this.serialization&&(c=JSON.parse(c));if(c.__peerData){var g=c.__peerData,h=this._chunkedData[g]||{data:[],count:0,total:c.total};return h.data[c.n]=c.data,h.count+=1,h.total===h.count&&(delete this._chunkedData[g],c=new Blob(h.data),this._handleDataMessage({data:c})),void(this._chunkedData[g]=h)}this.emit("data",c)},d.prototype.close=function(){this.open&&(this.open=!1,g.cleanup(this),this.emit("close"))},d.prototype.send=function(a,b){if(!this.open)return void this.emit("error",new Error("Connection is not open. You should listen for the `open` event before sending messages."));if(this._reliable)return void this._reliable.send(a);var c=this;if("json"===this.serialization)this._bufferedSend(JSON.stringify(a));else if("binary"===this.serialization||"binary-utf8"===this.serialization){var d=e.pack(a),f=e.chunkedBrowsers[this._peerBrowser]||e.chunkedBrowsers[e.browser];if(f&&!b&&d.size>e.chunkedMTU)return void this._sendChunks(d);e.supports.sctp?e.supports.binaryBlob?this._bufferedSend(d):e.blobToArrayBuffer(d,function(a){c._bufferedSend(a)}):e.blobToBinaryString(d,function(a){c._bufferedSend(a)})}else this._bufferedSend(a)},d.prototype._bufferedSend=function(a){!this._buffering&&this._trySend(a)||(this._buffer.push(a),this.bufferSize=this._buffer.length)},d.prototype._trySend=function(a){try{this._dc.send(a)}catch(a){this._buffering=!0;var b=this;return setTimeout(function(){b._buffering=!1,b._tryBuffer()},100),!1}return!0},d.prototype._tryBuffer=function(){if(0!==this._buffer.length){var a=this._buffer[0];this._trySend(a)&&(this._buffer.shift(),this.bufferSize=this._buffer.length,this._tryBuffer())}},d.prototype._sendChunks=function(a){for(var b=e.chunk(a),c=0,d=b.length;c<d;c+=1){var a=b[c];this.send(a,!0)}},d.prototype.handleMessage=function(a){var b=a.payload;switch(a.type){case"ANSWER":this._peerBrowser=b.browser,g.handleSDP(a.type,this,b.sdp);break;case"CANDIDATE":g.handleCandidate(this,b.candidate);break;default:e.warn("Unrecognized message type:",a.type,"from peer:",this.peer)}},b.exports=d},{"./negotiator":5,"./util":8,eventemitter3:9,reliable:12}],3:[function(a,b,c){window.Socket=a("./socket"),window.MediaConnection=a("./mediaconnection"),window.DataConnection=a("./dataconnection"),window.Peer=a("./peer"),window.RTCPeerConnection=a("./adapter").RTCPeerConnection,window.RTCSessionDescription=a("./adapter").RTCSessionDescription,window.RTCIceCandidate=a("./adapter").RTCIceCandidate,window.Negotiator=a("./negotiator"),window.util=a("./util"),window.BinaryPack=a("js-binarypack")},{"./adapter":1,"./dataconnection":2,"./mediaconnection":4,"./negotiator":5,"./peer":6,"./socket":7,"./util":8,"js-binarypack":10}],4:[function(a,b,c){function d(a,b,c){if(!(this instanceof d))return new d(a,b,c);f.call(this),this.options=e.extend({},c),this.open=!1,this.type="media",this.peer=a,this.provider=b,this.metadata=this.options.metadata,this.localStream=this.options._stream,this.id=this.options.connectionId||d._idPrefix+e.randomToken(),this.localStream&&g.startConnection(this,{_stream:this.localStream,originator:!0})}var e=a("./util"),f=a("eventemitter3"),g=a("./negotiator");e.inherits(d,f),d._idPrefix="mc_",d.prototype.addStream=function(a){e.log("Receiving stream",a),this.remoteStream=a,this.emit("stream",a)},d.prototype.handleMessage=function(a){var b=a.payload;switch(a.type){case"ANSWER":g.handleSDP(a.type,this,b.sdp),this.open=!0;break;case"CANDIDATE":g.handleCandidate(this,b.candidate);break;default:e.warn("Unrecognized message type:",a.type,"from peer:",this.peer)}},d.prototype.answer=function(a){if(this.localStream)return void e.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");this.options._payload._stream=a,this.localStream=a,g.startConnection(this,this.options._payload);for(var b=this.provider._getMessages(this.id),c=0,d=b.length;c<d;c+=1)this.handleMessage(b[c]);this.open=!0},d.prototype.close=function(){this.open&&(this.open=!1,g.cleanup(this),this.emit("close"))},b.exports=d},{"./negotiator":5,"./util":8,eventemitter3:9}],5:[function(a,b,c){var d=a("./util"),e=a("./adapter").RTCPeerConnection,f=a("./adapter").RTCSessionDescription,g=a("./adapter").RTCIceCandidate,h={pcs:{data:{},media:{}},queue:[]};h._idPrefix="pc_",h.startConnection=function(a,b){var c=h._getPeerConnection(a,b);if("media"===a.type&&b._stream&&c.addStream(b._stream),a.pc=a.peerConnection=c,b.originator){if("data"===a.type){var e={};d.supports.sctp||(e={reliable:b.reliable});var f=c.createDataChannel(a.label,e);a.initialize(f)}d.supports.onnegotiationneeded||h._makeOffer(a)}else h.handleSDP("OFFER",a,b.sdp)},h._getPeerConnection=function(a,b){h.pcs[a.type]||d.error(a.type+" is not a valid connection type. Maybe you overrode the `type` property somewhere."),h.pcs[a.type][a.peer]||(h.pcs[a.type][a.peer]={});var c;h.pcs[a.type][a.peer];return b.pc&&(c=h.pcs[a.type][a.peer][b.pc]),c&&"stable"===c.signalingState||(c=h._startPeerConnection(a)),c},h._startPeerConnection=function(a){d.log("Creating RTCPeerConnection.");var b=h._idPrefix+d.randomToken(),c={};"data"!==a.type||d.supports.sctp?"media"===a.type&&(c={optional:[{DtlsSrtpKeyAgreement:!0}]}):c={optional:[{RtpDataChannels:!0}]};var f=new e(a.provider.options.config,c);return h.pcs[a.type][a.peer][b]=f,h._setupListeners(a,f,b),f},h._setupListeners=function(a,b,c){var e=a.peer,f=a.id,g=a.provider;d.log("Listening for ICE candidates."),b.onicecandidate=function(b){b.candidate&&(d.log("Received ICE candidates for:",a.peer),g.socket.send({type:"CANDIDATE",payload:{candidate:b.candidate,type:a.type,connectionId:a.id},dst:e}))},b.oniceconnectionstatechange=function(){switch(b.iceConnectionState){case"failed":d.log("iceConnectionState is disconnected, closing connections to "+e),a.emit("error",new Error("Negotiation of connection to "+e+" failed.")),a.close();break;case"disconnected":d.log("iceConnectionState is disconnected, closing connections to "+e),a.close();break;case"completed":b.onicecandidate=d.noop}},b.onicechange=b.oniceconnectionstatechange,d.log("Listening for `negotiationneeded`"),b.onnegotiationneeded=function(){d.log("`negotiationneeded` triggered"),"stable"==b.signalingState?h._makeOffer(a):d.log("onnegotiationneeded triggered when not stable. Is another connection being established?")},d.log("Listening for data channel"),b.ondatachannel=function(a){d.log("Received data channel");var b=a.channel;g.getConnection(e,f).initialize(b)},d.log("Listening for remote stream"),b.onaddstream=function(a){d.log("Received remote stream");var b=a.stream,c=g.getConnection(e,f);"media"===c.type&&c.addStream(b)}},h.cleanup=function(a){d.log("Cleaning up PeerConnection to "+a.peer);var b=a.pc;!b||"closed"===b.readyState&&"closed"===b.signalingState||(b.close(),a.pc=null)},h._makeOffer=function(a){var b=a.pc;b.createOffer(function(c){d.log("Created offer."),!d.supports.sctp&&"data"===a.type&&a.reliable&&(c.sdp=Reliable.higherBandwidthSDP(c.sdp)),b.setLocalDescription(c,function(){d.log("Set localDescription: offer","for:",a.peer),a.provider.socket.send({type:"OFFER",payload:{sdp:c,type:a.type,label:a.label,connectionId:a.id,reliable:a.reliable,serialization:a.serialization,metadata:a.metadata,browser:d.browser},dst:a.peer})},function(b){a.provider.emitError("webrtc",b),d.log("Failed to setLocalDescription, ",b)})},function(b){a.provider.emitError("webrtc",b),d.log("Failed to createOffer, ",b)},a.options.constraints)},h._makeAnswer=function(a){var b=a.pc;b.createAnswer(function(c){d.log("Created answer."),!d.supports.sctp&&"data"===a.type&&a.reliable&&(c.sdp=Reliable.higherBandwidthSDP(c.sdp)),b.setLocalDescription(c,function(){d.log("Set localDescription: answer","for:",a.peer),a.provider.socket.send({type:"ANSWER",payload:{sdp:c,type:a.type,connectionId:a.id,browser:d.browser},dst:a.peer})},function(b){a.provider.emitError("webrtc",b),d.log("Failed to setLocalDescription, ",b)})},function(b){a.provider.emitError("webrtc",b),d.log("Failed to create answer, ",b)})},h.handleSDP=function(a,b,c){c=new f(c);var e=b.pc;d.log("Setting remote description",c),e.setRemoteDescription(c,function(){d.log("Set remoteDescription:",a,"for:",b.peer),"OFFER"===a&&h._makeAnswer(b)},function(a){b.provider.emitError("webrtc",a),d.log("Failed to setRemoteDescription, ",a)})},h.handleCandidate=function(a,b){var c=b.candidate,e=b.sdpMLineIndex;a.pc.addIceCandidate(new g({sdpMLineIndex:e,candidate:c})),d.log("Added ICE candidate for:",a.peer)},b.exports=h},{"./adapter":1,"./util":8}],6:[function(a,b,c){function d(a,b){return this instanceof d?(f.call(this),a&&a.constructor==Object?(b=a,a=void 0):a&&(a=a.toString()),b=e.extend({debug:0,host:e.CLOUD_HOST,port:e.CLOUD_PORT,key:"peerjs",path:"/",token:e.randomToken(),config:e.defaultConfig},b),this.options=b,"/"===b.host&&(b.host=window.location.hostname),"/"!==b.path[0]&&(b.path="/"+b.path),"/"!==b.path[b.path.length-1]&&(b.path+="/"),void 0===b.secure&&b.host!==e.CLOUD_HOST&&(b.secure=e.isSecure()),b.logFunction&&e.setLogFunction(b.logFunction),e.setLogLevel(b.debug),e.supports.audioVideo||e.supports.data?e.validateId(a)?e.validateKey(b.key)?b.secure&&"0.peerjs.com"===b.host?void this._delayedAbort("ssl-unavailable","The cloud server currently does not support HTTPS. Please run your own PeerServer to use HTTPS."):(this.destroyed=!1,this.disconnected=!1,this.open=!1,this.connections={},this._lostMessages={},this._initializeServerConnection(),void(a?this._initialize(a):this._retrieveId())):void this._delayedAbort("invalid-key",'API KEY "'+b.key+'" is invalid'):void this._delayedAbort("invalid-id",'ID "'+a+'" is invalid'):void this._delayedAbort("browser-incompatible","The current browser does not support WebRTC")):new d(a,b)}var e=a("./util"),f=a("eventemitter3"),g=a("./socket"),h=a("./mediaconnection"),i=a("./dataconnection");e.inherits(d,f),d.prototype._initializeServerConnection=function(){var a=this;this.socket=new g(this.options.secure,this.options.host,this.options.port,this.options.path,this.options.key),this.socket.on("message",function(b){a._handleMessage(b)}),this.socket.on("error",function(b){a._abort("socket-error",b)}),this.socket.on("disconnected",function(){a.disconnected||(a.emitError("network","Lost connection to server."),a.disconnect())}),this.socket.on("close",function(){a.disconnected||a._abort("socket-closed","Underlying socket is already closed.")})},d.prototype._retrieveId=function(a){var b=this,c=new XMLHttpRequest,d=this.options.secure?"https://":"http://",f=d+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/id";f+="?ts="+(new Date).getTime()+Math.random(),c.open("get",f,!0),c.onerror=function(a){e.error("Error retrieving ID",a);var c="";"/"===b.options.path&&b.options.host!==e.CLOUD_HOST&&(c=" If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."),b._abort("server-error","Could not get an ID from the server."+c)},c.onreadystatechange=function(){if(4===c.readyState)return 200!==c.status?void c.onerror():void b._initialize(c.responseText)},c.send(null)},d.prototype._initialize=function(a){this.id=a,this.socket.start(this.id,this.options.token)},d.prototype._handleMessage=function(a){var b,c=a.type,d=a.payload,f=a.src;switch(c){case"OPEN":this.emit("open",this.id),this.open=!0;break;case"ERROR":this._abort("server-error",d.msg);break;case"ID-TAKEN":this._abort("unavailable-id","ID `"+this.id+"` is taken");break;case"INVALID-KEY":this._abort("invalid-key",'API KEY "'+this.options.key+'" is invalid');break;case"PING":this.socket.send({type:"PONG",payload:{msg:"pong"}});break;case"LEAVE":e.log("Received leave message from",f),this._cleanupPeer(f);break;case"EXPIRE":this.emitError("peer-unavailable","Could not connect to peer "+f);break;case"OFFER":var g=d.connectionId;if(b=this.getConnection(f,g))e.warn("Offer received for existing Connection ID:",g);else{if("media"===d.type)b=new h(f,this,{connectionId:g,_payload:d,metadata:d.metadata}),this._addConnection(f,b),this.emit("call",b);else{if("data"!==d.type)return void e.warn("Received malformed connection type:",d.type);b=new i(f,this,{connectionId:g,_payload:d,metadata:d.metadata,label:d.label,serialization:d.serialization,reliable:d.reliable}),this._addConnection(f,b),this.emit("connection",b)}for(var j=this._getMessages(g),k=0,l=j.length;k<l;k+=1)b.handleMessage(j[k])}break;default:if(!d)return void e.warn("You received a malformed message from "+f+" of type "+c);var m=d.connectionId;b=this.getConnection(f,m),b&&b.pc?b.handleMessage(a):m?this._storeMessage(m,a):e.warn("You received an unrecognized message:",a)}},d.prototype._storeMessage=function(a,b){this._lostMessages[a]||(this._lostMessages[a]=[]),this._lostMessages[a].push(b)},d.prototype._getMessages=function(a){var b=this._lostMessages[a];return b?(delete this._lostMessages[a],b):[]},d.prototype.connect=function(a,b){if(this.disconnected)return e.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."),void this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server.");var c=new i(a,this,b);return this._addConnection(a,c),c},d.prototype.call=function(a,b,c){if(this.disconnected)return e.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."),void this.emitError("disconnected","Cannot connect to new Peer after disconnecting from server.");if(!b)return void e.error("To call a peer, you must provide a stream from your browser's `getUserMedia`.");c=c||{},c._stream=b;var d=new h(a,this,c);return this._addConnection(a,d),d},d.prototype._addConnection=function(a,b){this.connections[a]||(this.connections[a]=[]),this.connections[a].push(b)},d.prototype.getConnection=function(a,b){var c=this.connections[a];if(!c)return null;for(var d=0,e=c.length;d<e;d++)if(c[d].id===b)return c[d];return null},d.prototype._delayedAbort=function(a,b){var c=this;e.setZeroTimeout(function(){c._abort(a,b)})},d.prototype._abort=function(a,b){e.error("Aborting!"),this._lastServerId?this.disconnect():this.destroy(),this.emitError(a,b)},d.prototype.emitError=function(a,b){e.error("Error:",b),"string"==typeof b&&(b=new Error(b)),b.type=a,this.emit("error",b)},d.prototype.destroy=function(){this.destroyed||(this._cleanup(),this.disconnect(),this.destroyed=!0)},d.prototype._cleanup=function(){if(this.connections)for(var a=Object.keys(this.connections),b=0,c=a.length;b<c;b++)this._cleanupPeer(a[b]);this.emit("close")},d.prototype._cleanupPeer=function(a){for(var b=this.connections[a],c=0,d=b.length;c<d;c+=1)b[c].close()},d.prototype.disconnect=function(){var a=this;e.setZeroTimeout(function(){a.disconnected||(a.disconnected=!0,a.open=!1,a.socket&&a.socket.close(),a.emit("disconnected",a.id),a._lastServerId=a.id,a.id=null)})},d.prototype.reconnect=function(){if(this.disconnected&&!this.destroyed)e.log("Attempting reconnection to server with ID "+this._lastServerId),this.disconnected=!1,this._initializeServerConnection(),this._initialize(this._lastServerId);else{if(this.destroyed)throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");if(this.disconnected||this.open)throw new Error("Peer "+this.id+" cannot reconnect because it is not disconnected from the server!");e.error("In a hurry? We're still trying to make the initial connection!")}},d.prototype.listAllPeers=function(a){a=a||function(){};var b=this,c=new XMLHttpRequest,d=this.options.secure?"https://":"http://",f=d+this.options.host+":"+this.options.port+this.options.path+this.options.key+"/peers";f+="?ts="+(new Date).getTime()+Math.random(),c.open("get",f,!0),c.onerror=function(c){b._abort("server-error","Could not get peers from the server."),a([])},c.onreadystatechange=function(){if(4===c.readyState){if(401===c.status){var d="";throw d=b.options.host!==e.CLOUD_HOST?"It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key.":"You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.",a([]),new Error("It doesn't look like you have permission to list peers IDs. "+d)}a(200!==c.status?[]:JSON.parse(c.responseText))}},c.send(null)},b.exports=d},{"./dataconnection":2,"./mediaconnection":4,"./socket":7,"./util":8,eventemitter3:9}],7:[function(a,b,c){function d(a,b,c,e,g){if(!(this instanceof d))return new d(a,b,c,e,g);f.call(this),this.disconnected=!1,this._queue=[];var h=a?"https://":"http://",i=a?"wss://":"ws://";this._httpUrl=h+b+":"+c+e+g,this._wsUrl=i+b+":"+c+e+"peerjs?key="+g}var e=a("./util"),f=a("eventemitter3");e.inherits(d,f),d.prototype.start=function(a,b){this.id=a,this._httpUrl+="/"+a+"/"+b,this._wsUrl+="&id="+a+"&token="+b,this._startXhrStream(),this._startWebSocket()},d.prototype._startWebSocket=function(a){var b=this;this._socket||(this._socket=new WebSocket(this._wsUrl),this._socket.onmessage=function(a){try{var c=JSON.parse(a.data)}catch(b){return void e.log("Invalid server message",a.data)}b.emit("message",c)},this._socket.onclose=function(a){e.log("Socket closed."),b.disconnected=!0,b.emit("disconnected")},this._socket.onopen=function(){b._timeout&&(clearTimeout(b._timeout),setTimeout(function(){b._http.abort(),b._http=null},5e3)),b._sendQueuedMessages(),e.log("Socket open")})},d.prototype._startXhrStream=function(a){try{var b=this;this._http=new XMLHttpRequest,this._http._index=1,this._http._streamIndex=a||0,this._http.open("post",this._httpUrl+"/id?i="+this._http._streamIndex,!0),this._http.onerror=function(){clearTimeout(b._timeout),b.emit("disconnected")},this._http.onreadystatechange=function(){2==this.readyState&&this.old?(this.old.abort(),delete this.old):this.readyState>2&&200===this.status&&this.responseText&&b._handleStream(this)},this._http.send(null),this._setHTTPTimeout()}catch(a){e.log("XMLHttpRequest not available; defaulting to WebSockets")}},d.prototype._handleStream=function(a){var b=a.responseText.split("\n");if(a._buffer)for(;a._buffer.length>0;){var c=a._buffer.shift(),d=b[c];try{d=JSON.parse(d)}catch(b){a._buffer.shift(c);break}this.emit("message",d)}var f=b[a._index];if(f)if(a._index+=1,a._index===b.length)a._buffer||(a._buffer=[]),a._buffer.push(a._index-1);else{try{f=JSON.parse(f)}catch(a){return void e.log("Invalid server message",f)}this.emit("message",f)}},d.prototype._setHTTPTimeout=function(){var a=this;this._timeout=setTimeout(function(){var b=a._http;a._wsOpen()?b.abort():(a._startXhrStream(b._streamIndex+1),a._http.old=b)},25e3)},d.prototype._wsOpen=function(){return this._socket&&1==this._socket.readyState},d.prototype._sendQueuedMessages=function(){for(var a=0,b=this._queue.length;a<b;a+=1)this.send(this._queue[a])},d.prototype.send=function(a){if(!this.disconnected){if(!this.id)return void this._queue.push(a);if(!a.type)return void this.emit("error","Invalid message");var b=JSON.stringify(a);if(this._wsOpen())this._socket.send(b);else{var c=new XMLHttpRequest,d=this._httpUrl+"/"+a.type.toLowerCase();c.open("post",d,!0),c.setRequestHeader("Content-Type","application/json"),c.send(b)}}},d.prototype.close=function(){!this.disconnected&&this._wsOpen()&&(this._socket.close(),this.disconnected=!0)},b.exports=d},{"./util":8,eventemitter3:9}],8:[function(a,b,c){var d={iceServers:[{url:"stun:stun.l.google.com:19302"}]},e=1,f=a("js-binarypack"),g=a("./adapter").RTCPeerConnection,h={noop:function(){},CLOUD_HOST:"0.peerjs.com",CLOUD_PORT:9e3,chunkedBrowsers:{Chrome:1},chunkedMTU:16300,logLevel:0,setLogLevel:function(a){var b=parseInt(a,10);isNaN(parseInt(a,10))?h.logLevel=a?3:0:h.logLevel=b,h.log=h.warn=h.error=h.noop,h.logLevel>0&&(h.error=h._printWith("ERROR")),h.logLevel>1&&(h.warn=h._printWith("WARNING")),h.logLevel>2&&(h.log=h._print)},setLogFunction:function(a){a.constructor!==Function?h.warn("The log function you passed in is not a function. Defaulting to regular logs."):h._print=a},_printWith:function(a){return function(){var b=Array.prototype.slice.call(arguments);b.unshift(a),h._print.apply(h,b)}},_print:function(){var a=!1,b=Array.prototype.slice.call(arguments);b.unshift("PeerJS: ");for(var c=0,d=b.length;c<d;c++)b[c]instanceof Error&&(b[c]="("+b[c].name+") "+b[c].message,a=!0);a?console.error.apply(console,b):console.log.apply(console,b)},defaultConfig:d,browser:function(){return window.mozRTCPeerConnection?"Firefox":window.webkitRTCPeerConnection?"Chrome":window.RTCPeerConnection?"Supported":"Unsupported"}(),supports:function(){if(void 0===g)return{};var a,b,c=!0,e=!0,f=!1,i=!1,j=!!window.webkitRTCPeerConnection;try{a=new g(d,{optional:[{RtpDataChannels:!0}]})}catch(a){c=!1,e=!1}if(c)try{b=a.createDataChannel("_PEERJSTEST")}catch(a){c=!1}if(c){try{b.binaryType="blob",f=!0}catch(a){}var k=new g(d,{});try{i=k.createDataChannel("_PEERJSRELIABLETEST",{}).reliable}catch(a){}k.close()}if(e&&(e=!!a.addStream),!j&&c){var l=new g(d,{optional:[{RtpDataChannels:!0}]});l.onnegotiationneeded=function(){j=!0,h&&h.supports&&(h.supports.onnegotiationneeded=!0)},l.createDataChannel("_PEERJSNEGOTIATIONTEST"),setTimeout(function(){l.close()},1e3)}return a&&a.close(),{audioVideo:e,data:c,binaryBlob:f,binary:i,reliable:i,sctp:i,onnegotiationneeded:j}}(),validateId:function(a){return!a||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(a)},validateKey:function(a){return!a||/^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(a)},debug:!1,inherits:function(a,b){a.super_=b,a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})},extend:function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a},pack:f.pack,unpack:f.unpack,log:function(){if(h.debug){var a=!1,b=Array.prototype.slice.call(arguments);b.unshift("PeerJS: ");for(var c=0,d=b.length;c<d;c++)b[c]instanceof Error&&(b[c]="("+b[c].name+") "+b[c].message,a=!0);a?console.error.apply(console,b):console.log.apply(console,b)}},setZeroTimeout:function(a){function b(b){d.push(b),a.postMessage(e,"*")}function c(b){b.source==a&&b.data==e&&(b.stopPropagation&&b.stopPropagation(),d.length&&d.shift()())}var d=[],e="zero-timeout-message";return a.addEventListener?a.addEventListener("message",c,!0):a.attachEvent&&a.attachEvent("onmessage",c),b}(window),chunk:function(a){for(var b=[],c=a.size,d=index=0,f=Math.ceil(c/h.chunkedMTU);d<c;){var g=Math.min(c,d+h.chunkedMTU),i=a.slice(d,g),j={__peerData:e,n:index,data:i,total:f};b.push(j),d=g,index+=1}return e+=1,b},blobToArrayBuffer:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsArrayBuffer(a)},blobToBinaryString:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsBinaryString(a)},binaryStringToArrayBuffer:function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++)b[c]=255&a.charCodeAt(c);return b.buffer},randomToken:function(){return Math.random().toString(36).substr(2)},isSecure:function(){return"https:"===location.protocol}};b.exports=h},{"./adapter":1,"js-binarypack":10}],9:[function(a,b,c){"use strict";function d(a,b,c){this.fn=a,this.context=b,this.once=c||!1}function e(){}e.prototype._events=void 0,e.prototype.listeners=function(a){if(!this._events||!this._events[a])return[];if(this._events[a].fn)return[this._events[a].fn];for(var b=0,c=this._events[a].length,d=new Array(c);b<c;b++)d[b]=this._events[a][b].fn;return d},e.prototype.emit=function(a,b,c,d,e,f){if(!this._events||!this._events[a])return!1;var g,h,i=this._events[a],j=arguments.length;if("function"==typeof i.fn){switch(i.once&&this.removeListener(a,i.fn,!0),j){case 1:return i.fn.call(i.context),!0;case 2:return i.fn.call(i.context,b),!0;case 3:return i.fn.call(i.context,b,c),!0;case 4:return i.fn.call(i.context,b,c,d),!0;case 5:return i.fn.call(i.context,b,c,d,e),!0;case 6:return i.fn.call(i.context,b,c,d,e,f),!0}for(h=1,g=new Array(j-1);h<j;h++)g[h-1]=arguments[h];i.fn.apply(i.context,g)}else{var k,l=i.length;for(h=0;h<l;h++)switch(i[h].once&&this.removeListener(a,i[h].fn,!0),j){case 1:i[h].fn.call(i[h].context);break;case 2:i[h].fn.call(i[h].context,b);break;case 3:i[h].fn.call(i[h].context,b,c);break;default:if(!g)for(k=1,g=new Array(j-1);k<j;k++)g[k-1]=arguments[k];i[h].fn.apply(i[h].context,g)}}return!0},e.prototype.on=function(a,b,c){var e=new d(b,c||this);return this._events||(this._events={}),this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],e]:this._events[a].push(e):this._events[a]=e,this},e.prototype.once=function(a,b,c){var e=new d(b,c||this,!0);return this._events||(this._events={}),this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],e]:this._events[a].push(e):this._events[a]=e,this},e.prototype.removeListener=function(a,b,c){if(!this._events||!this._events[a])return this;var d=this._events[a],e=[];if(b&&(d.fn&&(d.fn!==b||c&&!d.once)&&e.push(d),!d.fn))for(var f=0,g=d.length;f<g;f++)(d[f].fn!==b||c&&!d[f].once)&&e.push(d[f]);return e.length?this._events[a]=1===e.length?e[0]:e:delete this._events[a],this},e.prototype.removeAllListeners=function(a){return this._events?(a?delete this._events[a]:this._events={},this):this},e.prototype.off=e.prototype.removeListener,e.prototype.addListener=e.prototype.on,e.prototype.setMaxListeners=function(){return this},e.EventEmitter=e,e.EventEmitter2=e,e.EventEmitter3=e,b.exports=e},{}],10:[function(a,b,c){function d(a){this.index=0,this.dataBuffer=a,this.dataView=new Uint8Array(this.dataBuffer),this.length=this.dataBuffer.byteLength}function e(){this.bufferBuilder=new h}function f(a){var b=a.charCodeAt(0);return b<=2047?"00":b<=65535?"000":b<=2097151?"0000":b<=67108863?"00000":"000000"}function g(a){return a.length>600?new Blob([a]).size:a.replace(/[^\u0000-\u007F]/g,f).length}var h=a("./bufferbuilder").BufferBuilder,i=a("./bufferbuilder").binaryFeatures,j={unpack:function(a){return new d(a).unpack()},pack:function(a){var b=new e;return b.pack(a),b.getBuffer()}};b.exports=j,d.prototype.unpack=function(){var a=this.unpack_uint8();if(a<128){return a}if((224^a)<32){return(224^a)-32}var b;if((b=160^a)<=15)return this.unpack_raw(b);if((b=176^a)<=15)return this.unpack_string(b);if((b=144^a)<=15)return this.unpack_array(b);if((b=128^a)<=15)return this.unpack_map(b);switch(a){case 192:return null;case 193:return;case 194:return!1;case 195:return!0;case 202:return this.unpack_float();case 203:return this.unpack_double();case 204:return this.unpack_uint8();case 205:return this.unpack_uint16();case 206:return this.unpack_uint32();case 207:return this.unpack_uint64();case 208:return this.unpack_int8();case 209:return this.unpack_int16();case 210:return this.unpack_int32();case 211:return this.unpack_int64();case 212:case 213:case 214:case 215:return;case 216:return b=this.unpack_uint16(),this.unpack_string(b);case 217:return b=this.unpack_uint32(),this.unpack_string(b);case 218:return b=this.unpack_uint16(),this.unpack_raw(b);case 219:return b=this.unpack_uint32(),this.unpack_raw(b);case 220:return b=this.unpack_uint16(),this.unpack_array(b);case 221:return b=this.unpack_uint32(),this.unpack_array(b);case 222:return b=this.unpack_uint16(),this.unpack_map(b);case 223:return b=this.unpack_uint32(),this.unpack_map(b)}},d.prototype.unpack_uint8=function(){var a=255&this.dataView[this.index];return this.index++,a},d.prototype.unpack_uint16=function(){var a=this.read(2),b=256*(255&a[0])+(255&a[1]);return this.index+=2,b},d.prototype.unpack_uint32=function(){var a=this.read(4),b=256*(256*(256*a[0]+a[1])+a[2])+a[3];return this.index+=4,b},d.prototype.unpack_uint64=function(){var a=this.read(8),b=256*(256*(256*(256*(256*(256*(256*a[0]+a[1])+a[2])+a[3])+a[4])+a[5])+a[6])+a[7];return this.index+=8,b},d.prototype.unpack_int8=function(){var a=this.unpack_uint8();return a<128?a:a-256},d.prototype.unpack_int16=function(){var a=this.unpack_uint16();return a<32768?a:a-65536},d.prototype.unpack_int32=function(){var a=this.unpack_uint32();return a<Math.pow(2,31)?a:a-Math.pow(2,32)},d.prototype.unpack_int64=function(){var a=this.unpack_uint64();return a<Math.pow(2,63)?a:a-Math.pow(2,64)},d.prototype.unpack_raw=function(a){if(this.length<this.index+a)throw new Error("BinaryPackFailure: index is out of range "+this.index+" "+a+" "+this.length);var b=this.dataBuffer.slice(this.index,this.index+a);return this.index+=a,b},d.prototype.unpack_string=function(a){for(var b,c,d=this.read(a),e=0,f="";e<a;)b=d[e],b<128?(f+=String.fromCharCode(b),e++):(192^b)<32?(c=(192^b)<<6|63&d[e+1],f+=String.fromCharCode(c),e+=2):(c=(15&b)<<12|(63&d[e+1])<<6|63&d[e+2],f+=String.fromCharCode(c),e+=3);return this.index+=a,f},d.prototype.unpack_array=function(a){for(var b=new Array(a),c=0;c<a;c++)b[c]=this.unpack();return b},d.prototype.unpack_map=function(a){for(var b={},c=0;c<a;c++){var d=this.unpack(),e=this.unpack();b[d]=e}return b},d.prototype.unpack_float=function(){var a=this.unpack_uint32(),b=a>>31,c=(a>>23&255)-127,d=8388607&a|8388608;return(0==b?1:-1)*d*Math.pow(2,c-23)},d.prototype.unpack_double=function(){var a=this.unpack_uint32(),b=this.unpack_uint32(),c=a>>31,d=(a>>20&2047)-1023,e=1048575&a|1048576,f=e*Math.pow(2,d-20)+b*Math.pow(2,d-52);return(0==c?1:-1)*f},d.prototype.read=function(a){var b=this.index;if(b+a<=this.length)return this.dataView.subarray(b,b+a);throw new Error("BinaryPackFailure: read index out of range")},e.prototype.getBuffer=function(){return this.bufferBuilder.getBuffer()},e.prototype.pack=function(a){var b=typeof a;if("string"==b)this.pack_string(a);else if("number"==b)Math.floor(a)===a?this.pack_integer(a):this.pack_double(a);else if("boolean"==b)!0===a?this.bufferBuilder.append(195):!1===a&&this.bufferBuilder.append(194);else if("undefined"==b)this.bufferBuilder.append(192);else{if("object"!=b)throw new Error('Type "'+b+'" not yet supported');if(null===a)this.bufferBuilder.append(192);else{var c=a.constructor;if(c==Array)this.pack_array(a);else if(c==Blob||c==File)this.pack_bin(a);else if(c==ArrayBuffer)i.useArrayBufferView?this.pack_bin(new Uint8Array(a)):this.pack_bin(a);else if("BYTES_PER_ELEMENT"in a)i.useArrayBufferView?this.pack_bin(new Uint8Array(a.buffer)):this.pack_bin(a.buffer);else if(c==Object)this.pack_object(a);else if(c==Date)this.pack_string(a.toString());else{if("function"!=typeof a.toBinaryPack)throw new Error('Type "'+c.toString()+'" not yet supported');this.bufferBuilder.append(a.toBinaryPack())}}}this.bufferBuilder.flush()},e.prototype.pack_bin=function(a){var b=a.length||a.byteLength||a.size;if(b<=15)this.pack_uint8(160+b);else if(b<=65535)this.bufferBuilder.append(218),this.pack_uint16(b);else{if(!(b<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(219),this.pack_uint32(b)}this.bufferBuilder.append(a)},e.prototype.pack_string=function(a){var b=g(a);if(b<=15)this.pack_uint8(176+b);else if(b<=65535)this.bufferBuilder.append(216),this.pack_uint16(b);else{if(!(b<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(217),this.pack_uint32(b)}this.bufferBuilder.append(a)},e.prototype.pack_array=function(a){var b=a.length;if(b<=15)this.pack_uint8(144+b);else if(b<=65535)this.bufferBuilder.append(220),this.pack_uint16(b);else{if(!(b<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(221),this.pack_uint32(b)}for(var c=0;c<b;c++)this.pack(a[c])},e.prototype.pack_integer=function(a){if(-32<=a&&a<=127)this.bufferBuilder.append(255&a);else if(0<=a&&a<=255)this.bufferBuilder.append(204),this.pack_uint8(a);else if(-128<=a&&a<=127)this.bufferBuilder.append(208),this.pack_int8(a);else if(0<=a&&a<=65535)this.bufferBuilder.append(205),this.pack_uint16(a);else if(-32768<=a&&a<=32767)this.bufferBuilder.append(209),this.pack_int16(a);else if(0<=a&&a<=4294967295)this.bufferBuilder.append(206),this.pack_uint32(a);else if(-2147483648<=a&&a<=2147483647)this.bufferBuilder.append(210),this.pack_int32(a);else if(-0x8000000000000000<=a&&a<=0x8000000000000000)this.bufferBuilder.append(211),this.pack_int64(a);else{if(!(0<=a&&a<=0x10000000000000000))throw new Error("Invalid integer");this.bufferBuilder.append(207),this.pack_uint64(a)}},e.prototype.pack_double=function(a){var b=0;a<0&&(b=1,a=-a);var c=Math.floor(Math.log(a)/Math.LN2),d=a/Math.pow(2,c)-1,e=Math.floor(d*Math.pow(2,52)),f=Math.pow(2,32),g=b<<31|c+1023<<20|e/f&1048575,h=e%f;this.bufferBuilder.append(203),this.pack_int32(g),this.pack_int32(h)},e.prototype.pack_object=function(a){var b=Object.keys(a),c=b.length;if(c<=15)this.pack_uint8(128+c);else if(c<=65535)this.bufferBuilder.append(222),this.pack_uint16(c);else{if(!(c<=4294967295))throw new Error("Invalid length");this.bufferBuilder.append(223),this.pack_uint32(c)}for(var d in a)a.hasOwnProperty(d)&&(this.pack(d),this.pack(a[d]))},e.prototype.pack_uint8=function(a){this.bufferBuilder.append(a)},e.prototype.pack_uint16=function(a){this.bufferBuilder.append(a>>8),this.bufferBuilder.append(255&a)},e.prototype.pack_uint32=function(a){var b=4294967295&a;this.bufferBuilder.append((4278190080&b)>>>24),this.bufferBuilder.append((16711680&b)>>>16),this.bufferBuilder.append((65280&b)>>>8),this.bufferBuilder.append(255&b)},e.prototype.pack_uint64=function(a){var b=a/Math.pow(2,32),c=a%Math.pow(2,32);this.bufferBuilder.append((4278190080&b)>>>24),this.bufferBuilder.append((16711680&b)>>>16),this.bufferBuilder.append((65280&b)>>>8),this.bufferBuilder.append(255&b),this.bufferBuilder.append((4278190080&c)>>>24),this.bufferBuilder.append((16711680&c)>>>16),this.bufferBuilder.append((65280&c)>>>8),this.bufferBuilder.append(255&c)},e.prototype.pack_int8=function(a){this.bufferBuilder.append(255&a)},e.prototype.pack_int16=function(a){this.bufferBuilder.append((65280&a)>>8),this.bufferBuilder.append(255&a)},e.prototype.pack_int32=function(a){this.bufferBuilder.append(a>>>24&255),this.bufferBuilder.append((16711680&a)>>>16),this.bufferBuilder.append((65280&a)>>>8),this.bufferBuilder.append(255&a)},e.prototype.pack_int64=function(a){var b=Math.floor(a/Math.pow(2,32)),c=a%Math.pow(2,32);this.bufferBuilder.append((4278190080&b)>>>24),this.bufferBuilder.append((16711680&b)>>>16),this.bufferBuilder.append((65280&b)>>>8),this.bufferBuilder.append(255&b),this.bufferBuilder.append((4278190080&c)>>>24),this.bufferBuilder.append((16711680&c)>>>16),this.bufferBuilder.append((65280&c)>>>8),this.bufferBuilder.append(255&c)}},{"./bufferbuilder":11}],11:[function(a,b,c){function d(){this._pieces=[],this._parts=[]}var e={};e.useBlobBuilder=function(){try{return new Blob([]),!1}catch(a){return!0}}(),e.useArrayBufferView=!e.useBlobBuilder&&function(){try{return 0===new Blob([new Uint8Array([])]).size}catch(a){return!0}}(),b.exports.binaryFeatures=e;var f=b.exports.BlobBuilder;"undefined"!=typeof window&&(f=b.exports.BlobBuilder=window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder||window.BlobBuilder),d.prototype.append=function(a){"number"==typeof a?this._pieces.push(a):(this.flush(),this._parts.push(a))},d.prototype.flush=function(){if(this._pieces.length>0){var a=new Uint8Array(this._pieces);e.useArrayBufferView||(a=a.buffer),this._parts.push(a),this._pieces=[]}},d.prototype.getBuffer=function(){if(this.flush(),e.useBlobBuilder){for(var a=new f,b=0,c=this._parts.length;b<c;b++)a.append(this._parts[b]);return a.getBlob()}return new Blob(this._parts)},b.exports.BufferBuilder=d},{}],12:[function(a,b,c){function d(a,b){if(!(this instanceof d))return new d(a);this._dc=a,e.debug=b,this._outgoing={},this._incoming={},this._received={},this._window=1e3,this._mtu=500,this._interval=0,this._count=0,this._queue=[],this._setupDC()}var e=a("./util");d.prototype.send=function(a){var b=e.pack(a);if(b.size<this._mtu)return void this._handleSend(["no",b]);this._outgoing[this._count]={ack:0,chunks:this._chunk(b)},e.debug&&(this._outgoing[this._count].timer=new Date),this._sendWindowedChunks(this._count),this._count+=1},d.prototype._setupInterval=function(){var a=this;this._timeout=setInterval(function(){var b=a._queue.shift();if(b._multiple)for(var c=0,d=b.length;c<d;c+=1)a._intervalSend(b[c]);else a._intervalSend(b)},this._interval)},d.prototype._intervalSend=function(a){var b=this;a=e.pack(a),e.blobToBinaryString(a,function(a){b._dc.send(a)}),0===b._queue.length&&(clearTimeout(b._timeout),b._timeout=null)},d.prototype._processAcks=function(){for(var a in this._outgoing)this._outgoing.hasOwnProperty(a)&&this._sendWindowedChunks(a)},d.prototype._handleSend=function(a){for(var b=!0,c=0,d=this._queue.length;c<d;c+=1){var e=this._queue[c];e===a?b=!1:e._multiple&&-1!==e.indexOf(a)&&(b=!1)}b&&(this._queue.push(a),this._timeout||this._setupInterval())},d.prototype._setupDC=function(){var a=this;this._dc.onmessage=function(b){var c=b.data;if(c.constructor===String){var d=e.binaryStringToArrayBuffer(c);c=e.unpack(d),a._handleMessage(c)}}},d.prototype._handleMessage=function(a){var b,c=a[1],d=this._incoming[c],f=this._outgoing[c];switch(a[0]){case"no":var g=c;g&&this.onmessage(e.unpack(g));break;case"end":if(b=d,this._received[c]=a[2],!b)break;this._ack(c);break;case"ack":if(b=f){var h=a[2];b.ack=Math.max(h,b.ack),b.ack>=b.chunks.length?(e.log("Time: ",new Date-b.timer),delete this._outgoing[c]):this._processAcks()}break;case"chunk":if(!(b=d)){if(!0===this._received[c])break;b={ack:["ack",c,0],chunks:[]},this._incoming[c]=b}var i=a[2],j=a[3];b.chunks[i]=new Uint8Array(j),i===b.ack[2]&&this._calculateNextAck(c),this._ack(c);break;default:this._handleSend(a)}},d.prototype._chunk=function(a){for(var b=[],c=a.size,d=0;d<c;){var f=Math.min(c,d+this._mtu),g=a.slice(d,f),h={payload:g};b.push(h),d=f}return e.log("Created",b.length,"chunks."),b},d.prototype._ack=function(a){var b=this._incoming[a].ack;this._received[a]===b[2]&&(this._complete(a),this._received[a]=!0),this._handleSend(b)},d.prototype._calculateNextAck=function(a){for(var b=this._incoming[a],c=b.chunks,d=0,e=c.length;d<e;d+=1)if(void 0===c[d])return void(b.ack[2]=d);b.ack[2]=c.length},d.prototype._sendWindowedChunks=function(a){e.log("sendWindowedChunks for: ",a);for(var b=this._outgoing[a],c=b.chunks,d=[],f=Math.min(b.ack+this._window,c.length),g=b.ack;g<f;g+=1)c[g].sent&&g!==b.ack||(c[g].sent=!0,d.push(["chunk",a,g,c[g].payload]));b.ack+this._window>=c.length&&d.push(["end",a,c.length]),d._multiple=!0,this._handleSend(d)},d.prototype._complete=function(a){e.log("Completed called for",a);var b=this,c=this._incoming[a].chunks,d=new Blob(c);e.blobToArrayBuffer(d,function(a){b.onmessage(e.unpack(a))}),delete this._incoming[a]},d.higherBandwidthSDP=function(a){var b=navigator.appVersion.match(/Chrome\/(.*?) /);if(b&&(b=parseInt(b[1].split(".").shift()))<31){var c=a.split("b=AS:30");if(c.length>1)return c[0]+"b=AS:102400"+c[1]}return a},d.prototype.onmessage=function(a){},b.exports.Reliable=d},{"./util":13}],13:[function(a,b,c){var d=a("js-binarypack"),e={debug:!1,inherits:function(a,b){a.super_=b,a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})},extend:function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a},pack:d.pack,unpack:d.unpack,log:function(){if(e.debug){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];a.unshift("Reliable: "),console.log.apply(console,a)}},setZeroTimeout:function(a){function b(b){d.push(b),a.postMessage(e,"*")}function c(b){b.source==a&&b.data==e&&(b.stopPropagation&&b.stopPropagation(),d.length&&d.shift()())}var d=[],e="zero-timeout-message";return a.addEventListener?a.addEventListener("message",c,!0):a.attachEvent&&a.attachEvent("onmessage",c),b}(this),blobToArrayBuffer:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsArrayBuffer(a)},blobToBinaryString:function(a,b){var c=new FileReader;c.onload=function(a){b(a.target.result)},c.readAsBinaryString(a)},binaryStringToArrayBuffer:function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++)b[c]=255&a.charCodeAt(c);return b.buffer},randomToken:function(){return Math.random().toString(36).substr(2)}};b.exports=e},{"js-binarypack":10}]},{},[3]);"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define([],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory()}else{global.utils=factory()}})(this,function(){var logDisabled_=true;var deprecationWarnings_=true;var utils={disableLog:function(bool){if(typeof bool!=="boolean"){return new Error("Argument type: "+typeof bool+". Please use a boolean.")}logDisabled_=bool;return bool?"adapter.js logging disabled":"adapter.js logging enabled"},disableWarnings:function(bool){if(typeof bool!=="boolean"){return new Error("Argument type: "+typeof bool+". Please use a boolean.")}deprecationWarnings_=!bool;return"adapter.js deprecation warnings "+(bool?"disabled":"enabled")},log:function(){if(typeof window==="object"){if(logDisabled_){return}if(typeof console!=="undefined"&&typeof console.log==="function"){console.log.apply(console,arguments)}}},deprecated:function(oldMethod,newMethod){if(!deprecationWarnings_){return}console.warn(oldMethod+" is deprecated, please use "+newMethod+" instead.")},extractVersion:function(uastring,expr,pos){var match=uastring.match(expr);return match&&match.length>=pos&&parseInt(match[pos],10)},detectBrowser:function(window){var navigator=window&&window.navigator;var result={};result.browser=null;result.version=null;if(typeof window==="undefined"||!window.navigator){result.browser="Not a browser.";return result}if(navigator.mozGetUserMedia){result.browser="firefox";result.version=this.extractVersion(navigator.userAgent,/Firefox\/(\d+)\./,1)}else if(navigator.webkitGetUserMedia){if(window.webkitRTCPeerConnection){result.browser="chrome";result.version=this.extractVersion(navigator.userAgent,/Chrom(e|ium)\/(\d+)\./,2)}else{if(navigator.userAgent.match(/Version\/(\d+).(\d+)/)){result.browser="safari";result.version=this.extractVersion(navigator.userAgent,/AppleWebKit\/(\d+)\./,1)}else{result.browser="Unsupported webkit-based browser "+"with GUM support but no WebRTC support.";return result}}}else if(navigator.mediaDevices&&navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)){result.browser="edge";result.version=this.extractVersion(navigator.userAgent,/Edge\/(\d+).(\d+)$/,2)}else if(navigator.mediaDevices&&navigator.userAgent.match(/AppleWebKit\/(\d+)\./)){result.browser="safari";result.version=this.extractVersion(navigator.userAgent,/AppleWebKit\/(\d+)\./,1)}else{result.browser="Not a supported browser.";return result}return result},shimCreateObjectURL:function(window){var URL=window&&window.URL;if(!(typeof window==="object"&&window.HTMLMediaElement&&"srcObject"in window.HTMLMediaElement.prototype)){return undefined}var nativeCreateObjectURL=URL.createObjectURL.bind(URL);var nativeRevokeObjectURL=URL.revokeObjectURL.bind(URL);var streams=new Map,newId=0;URL.createObjectURL=function(stream){if("getTracks"in stream){var url="polyblob:"+ ++newId;streams.set(url,stream);utils.deprecated("URL.createObjectURL(stream)","elem.srcObject = stream");return url}return nativeCreateObjectURL(stream)};URL.revokeObjectURL=function(url){nativeRevokeObjectURL(url);streams.delete(url)};var dsc=Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,"src");Object.defineProperty(window.HTMLMediaElement.prototype,"src",{get:function(){return dsc.get.apply(this)},set:function(url){this.srcObject=streams.get(url)||null;return dsc.set.apply(this,[url])}});var nativeSetAttribute=window.HTMLMediaElement.prototype.setAttribute;window.HTMLMediaElement.prototype.setAttribute=function(){if(arguments.length===2&&(""+arguments[0]).toLowerCase()==="src"){this.srcObject=streams.get(arguments[1])||null}return nativeSetAttribute.apply(this,arguments)}}};return{log:utils.log,deprecated:utils.deprecated,disableLog:utils.disableLog,disableWarnings:utils.disableWarnings,extractVersion:utils.extractVersion,shimCreateObjectURL:utils.shimCreateObjectURL,detectBrowser:utils.detectBrowser.bind(utils)}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define([],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory()}else{global.SDPUtils=factory()}})(this,function(){var SDPUtils={};SDPUtils.generateIdentifier=function(){return Math.random().toString(36).substr(2,10)};SDPUtils.localCName=SDPUtils.generateIdentifier();SDPUtils.splitLines=function(blob){return blob.trim().split("\n").map(function(line){return line.trim()})};SDPUtils.splitSections=function(blob){var parts=blob.split("\nm=");return parts.map(function(part,index){return(index>0?"m="+part:part).trim()+"\r\n"})};SDPUtils.matchPrefix=function(blob,prefix){return SDPUtils.splitLines(blob).filter(function(line){return line.indexOf(prefix)===0})};SDPUtils.parseCandidate=function(line){var parts;if(line.indexOf("a=candidate:")===0){parts=line.substring(12).split(" ")}else{parts=line.substring(10).split(" ")}var candidate={foundation:parts[0],component:parseInt(parts[1],10),protocol:parts[2].toLowerCase(),priority:parseInt(parts[3],10),ip:parts[4],port:parseInt(parts[5],10),type:parts[7]};for(var i=8;i<parts.length;i+=2){switch(parts[i]){case"raddr":candidate.relatedAddress=parts[i+1];break;case"rport":candidate.relatedPort=parseInt(parts[i+1],10);break;case"tcptype":candidate.tcpType=parts[i+1];break;default:candidate[parts[i]]=parts[i+1];break}}return candidate};SDPUtils.writeCandidate=function(candidate){var sdp=[];sdp.push(candidate.foundation);sdp.push(candidate.component);sdp.push(candidate.protocol.toUpperCase());sdp.push(candidate.priority);sdp.push(candidate.ip);sdp.push(candidate.port);var type=candidate.type;sdp.push("typ");sdp.push(type);if(type!=="host"&&candidate.relatedAddress&&candidate.relatedPort){sdp.push("raddr");sdp.push(candidate.relatedAddress);sdp.push("rport");sdp.push(candidate.relatedPort)}if(candidate.tcpType&&candidate.protocol.toLowerCase()==="tcp"){sdp.push("tcptype");sdp.push(candidate.tcpType)}if(candidate.ufrag){sdp.push("ufrag");sdp.push(candidate.ufrag)}return"candidate:"+sdp.join(" ")};SDPUtils.parseIceOptions=function(line){return line.substr(14).split(" ")};SDPUtils.parseRtpMap=function(line){var parts=line.substr(9).split(" ");var parsed={payloadType:parseInt(parts.shift(),10)};parts=parts[0].split("/");parsed.name=parts[0];parsed.clockRate=parseInt(parts[1],10);parsed.numChannels=parts.length===3?parseInt(parts[2],10):1;return parsed};SDPUtils.writeRtpMap=function(codec){var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType}return"a=rtpmap:"+pt+" "+codec.name+"/"+codec.clockRate+(codec.numChannels!==1?"/"+codec.numChannels:"")+"\r\n"};SDPUtils.parseExtmap=function(line){var parts=line.substr(9).split(" ");return{id:parseInt(parts[0],10),direction:parts[0].indexOf("/")>0?parts[0].split("/")[1]:"sendrecv",uri:parts[1]}};SDPUtils.writeExtmap=function(headerExtension){return"a=extmap:"+(headerExtension.id||headerExtension.preferredId)+(headerExtension.direction&&headerExtension.direction!=="sendrecv"?"/"+headerExtension.direction:"")+" "+headerExtension.uri+"\r\n"};SDPUtils.parseFmtp=function(line){var parsed={};var kv;var parts=line.substr(line.indexOf(" ")+1).split(";");for(var j=0;j<parts.length;j++){kv=parts[j].trim().split("=");parsed[kv[0].trim()]=kv[1]}return parsed};SDPUtils.writeFmtp=function(codec){var line="";var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType}if(codec.parameters&&Object.keys(codec.parameters).length){var params=[];Object.keys(codec.parameters).forEach(function(param){params.push(param+"="+codec.parameters[param])});line+="a=fmtp:"+pt+" "+params.join(";")+"\r\n"}return line};SDPUtils.parseRtcpFb=function(line){var parts=line.substr(line.indexOf(" ")+1).split(" ");return{type:parts.shift(),parameter:parts.join(" ")}};SDPUtils.writeRtcpFb=function(codec){var lines="";var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType}if(codec.rtcpFeedback&&codec.rtcpFeedback.length){codec.rtcpFeedback.forEach(function(fb){lines+="a=rtcp-fb:"+pt+" "+fb.type+(fb.parameter&&fb.parameter.length?" "+fb.parameter:"")+"\r\n"})}return lines};SDPUtils.parseSsrcMedia=function(line){var sp=line.indexOf(" ");var parts={ssrc:parseInt(line.substr(7,sp-7),10)};var colon=line.indexOf(":",sp);if(colon>-1){parts.attribute=line.substr(sp+1,colon-sp-1);parts.value=line.substr(colon+1)}else{parts.attribute=line.substr(sp+1)}return parts};SDPUtils.getMid=function(mediaSection){var mid=SDPUtils.matchPrefix(mediaSection,"a=mid:")[0];if(mid){return mid.substr(6)}};SDPUtils.parseFingerprint=function(line){var parts=line.substr(14).split(" ");return{algorithm:parts[0].toLowerCase(),value:parts[1]}};SDPUtils.getDtlsParameters=function(mediaSection,sessionpart){var lines=SDPUtils.matchPrefix(mediaSection+sessionpart,"a=fingerprint:");return{role:"auto",fingerprints:lines.map(SDPUtils.parseFingerprint)}};SDPUtils.writeDtlsParameters=function(params,setupType){var sdp="a=setup:"+setupType+"\r\n";params.fingerprints.forEach(function(fp){sdp+="a=fingerprint:"+fp.algorithm+" "+fp.value+"\r\n"});return sdp};SDPUtils.getIceParameters=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);lines=lines.concat(SDPUtils.splitLines(sessionpart));var iceParameters={usernameFragment:lines.filter(function(line){return line.indexOf("a=ice-ufrag:")===0})[0].substr(12),password:lines.filter(function(line){return line.indexOf("a=ice-pwd:")===0})[0].substr(10)};return iceParameters};SDPUtils.writeIceParameters=function(params){return"a=ice-ufrag:"+params.usernameFragment+"\r\n"+"a=ice-pwd:"+params.password+"\r\n"};SDPUtils.parseRtpParameters=function(mediaSection){var description={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]};var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(" ");for(var i=3;i<mline.length;i++){var pt=mline[i];var rtpmapline=SDPUtils.matchPrefix(mediaSection,"a=rtpmap:"+pt+" ")[0];if(rtpmapline){var codec=SDPUtils.parseRtpMap(rtpmapline);var fmtps=SDPUtils.matchPrefix(mediaSection,"a=fmtp:"+pt+" ");codec.parameters=fmtps.length?SDPUtils.parseFmtp(fmtps[0]):{};codec.rtcpFeedback=SDPUtils.matchPrefix(mediaSection,"a=rtcp-fb:"+pt+" ").map(SDPUtils.parseRtcpFb);description.codecs.push(codec);switch(codec.name.toUpperCase()){case"RED":case"ULPFEC":description.fecMechanisms.push(codec.name.toUpperCase());break;default:break}}}SDPUtils.matchPrefix(mediaSection,"a=extmap:").forEach(function(line){description.headerExtensions.push(SDPUtils.parseExtmap(line))});return description};SDPUtils.writeRtpDescription=function(kind,caps){var sdp="";sdp+="m="+kind+" ";sdp+=caps.codecs.length>0?"9":"0";sdp+=" UDP/TLS/RTP/SAVPF ";sdp+=caps.codecs.map(function(codec){if(codec.preferredPayloadType!==undefined){return codec.preferredPayloadType}return codec.payloadType}).join(" ")+"\r\n";sdp+="c=IN IP4 0.0.0.0\r\n";sdp+="a=rtcp:9 IN IP4 0.0.0.0\r\n";caps.codecs.forEach(function(codec){sdp+=SDPUtils.writeRtpMap(codec);sdp+=SDPUtils.writeFmtp(codec);sdp+=SDPUtils.writeRtcpFb(codec)});var maxptime=0;caps.codecs.forEach(function(codec){if(codec.maxptime>maxptime){maxptime=codec.maxptime}});if(maxptime>0){sdp+="a=maxptime:"+maxptime+"\r\n"}sdp+="a=rtcp-mux\r\n";caps.headerExtensions.forEach(function(extension){sdp+=SDPUtils.writeExtmap(extension)});return sdp};SDPUtils.parseRtpEncodingParameters=function(mediaSection){var encodingParameters=[];var description=SDPUtils.parseRtpParameters(mediaSection);var hasRed=description.fecMechanisms.indexOf("RED")!==-1;var hasUlpfec=description.fecMechanisms.indexOf("ULPFEC")!==-1;var ssrcs=SDPUtils.matchPrefix(mediaSection,"a=ssrc:").map(function(line){return SDPUtils.parseSsrcMedia(line)}).filter(function(parts){return parts.attribute==="cname"});var primarySsrc=ssrcs.length>0&&ssrcs[0].ssrc;var secondarySsrc;var flows=SDPUtils.matchPrefix(mediaSection,"a=ssrc-group:FID").map(function(line){var parts=line.split(" ");parts.shift();return parts.map(function(part){return parseInt(part,10)})});if(flows.length>0&&flows[0].length>1&&flows[0][0]===primarySsrc){secondarySsrc=flows[0][1]}description.codecs.forEach(function(codec){if(codec.name.toUpperCase()==="RTX"&&codec.parameters.apt){var encParam={ssrc:primarySsrc,codecPayloadType:parseInt(codec.parameters.apt,10),rtx:{ssrc:secondarySsrc}};encodingParameters.push(encParam);if(hasRed){encParam=JSON.parse(JSON.stringify(encParam));encParam.fec={ssrc:secondarySsrc,mechanism:hasUlpfec?"red+ulpfec":"red"};encodingParameters.push(encParam)}}});if(encodingParameters.length===0&&primarySsrc){encodingParameters.push({ssrc:primarySsrc})}var bandwidth=SDPUtils.matchPrefix(mediaSection,"b=");if(bandwidth.length){if(bandwidth[0].indexOf("b=TIAS:")===0){bandwidth=parseInt(bandwidth[0].substr(7),10)}else if(bandwidth[0].indexOf("b=AS:")===0){bandwidth=parseInt(bandwidth[0].substr(5),10)*1e3*.95-50*40*8}else{bandwidth=undefined}encodingParameters.forEach(function(params){params.maxBitrate=bandwidth})}return encodingParameters};SDPUtils.parseRtcpParameters=function(mediaSection){var rtcpParameters={};var cname;var remoteSsrc=SDPUtils.matchPrefix(mediaSection,"a=ssrc:").map(function(line){return SDPUtils.parseSsrcMedia(line)}).filter(function(obj){return obj.attribute==="cname"})[0];if(remoteSsrc){rtcpParameters.cname=remoteSsrc.value;rtcpParameters.ssrc=remoteSsrc.ssrc}var rsize=SDPUtils.matchPrefix(mediaSection,"a=rtcp-rsize");rtcpParameters.reducedSize=rsize.length>0;rtcpParameters.compound=rsize.length===0;var mux=SDPUtils.matchPrefix(mediaSection,"a=rtcp-mux");rtcpParameters.mux=mux.length>0;return rtcpParameters};SDPUtils.parseMsid=function(mediaSection){var parts;var spec=SDPUtils.matchPrefix(mediaSection,"a=msid:");if(spec.length===1){parts=spec[0].substr(7).split(" ");return{stream:parts[0],track:parts[1]}}var planB=SDPUtils.matchPrefix(mediaSection,"a=ssrc:").map(function(line){return SDPUtils.parseSsrcMedia(line)}).filter(function(parts){return parts.attribute==="msid"});if(planB.length>0){parts=planB[0].value.split(" ");return{stream:parts[0],track:parts[1]}}};SDPUtils.generateSessionId=function(){return Math.random().toString().substr(2,21)};SDPUtils.writeSessionBoilerplate=function(sessId){var sessionId;if(sessId){sessionId=sessId}else{sessionId=SDPUtils.generateSessionId()}return"v=0\r\n"+"o=thisisadapterortc "+sessionId+" 2 IN IP4 127.0.0.1\r\n"+"s=-\r\n"+"t=0 0\r\n"};SDPUtils.writeMediaSection=function(transceiver,caps,type,stream){var sdp=SDPUtils.writeRtpDescription(transceiver.kind,caps);sdp+=SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters());sdp+=SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(),type==="offer"?"actpass":"active");sdp+="a=mid:"+transceiver.mid+"\r\n";if(transceiver.direction){sdp+="a="+transceiver.direction+"\r\n"}else if(transceiver.rtpSender&&transceiver.rtpReceiver){sdp+="a=sendrecv\r\n"}else if(transceiver.rtpSender){sdp+="a=sendonly\r\n"}else if(transceiver.rtpReceiver){sdp+="a=recvonly\r\n"}else{sdp+="a=inactive\r\n"}if(transceiver.rtpSender){var msid="msid:"+stream.id+" "+transceiver.rtpSender.track.id+"\r\n";sdp+="a="+msid;sdp+="a=ssrc:"+transceiver.sendEncodingParameters[0].ssrc+" "+msid;if(transceiver.sendEncodingParameters[0].rtx){sdp+="a=ssrc:"+transceiver.sendEncodingParameters[0].rtx.ssrc+" "+msid;sdp+="a=ssrc-group:FID "+transceiver.sendEncodingParameters[0].ssrc+" "+transceiver.sendEncodingParameters[0].rtx.ssrc+"\r\n"}}sdp+="a=ssrc:"+transceiver.sendEncodingParameters[0].ssrc+" cname:"+SDPUtils.localCName+"\r\n";if(transceiver.rtpSender&&transceiver.sendEncodingParameters[0].rtx){sdp+="a=ssrc:"+transceiver.sendEncodingParameters[0].rtx.ssrc+" cname:"+SDPUtils.localCName+"\r\n"}return sdp};SDPUtils.getDirection=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);for(var i=0;i<lines.length;i++){switch(lines[i]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return lines[i].substr(2);default:}}if(sessionpart){return SDPUtils.getDirection(sessionpart)}return"sendrecv"};SDPUtils.getKind=function(mediaSection){var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(" ");return mline[0].substr(2)};SDPUtils.isRejected=function(mediaSection){return mediaSection.split(" ",2)[1]==="0"};return SDPUtils});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./sdputils"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./sdputils"))}else{global.adapter=factory(global.SDPUtils)}})(this,function(SDPUtils){function sortTracks(tracks){var audioTracks=tracks.filter(function(track){return track.kind==="audio"});var videoTracks=tracks.filter(function(track){return track.kind==="video"});tracks=[];while(audioTracks.length||videoTracks.length){if(audioTracks.length){tracks.push(audioTracks.shift())}if(videoTracks.length){tracks.push(videoTracks.shift())}}return tracks}function filterIceServers(iceServers,edgeVersion){var hasTurn=false;iceServers=JSON.parse(JSON.stringify(iceServers));return iceServers.filter(function(server){if(server&&(server.urls||server.url)){var urls=server.urls||server.url;if(server.url&&!server.urls){console.warn("RTCIceServer.url is deprecated! Use urls instead.")}var isString=typeof urls==="string";if(isString){urls=[urls]}urls=urls.filter(function(url){var validTurn=url.indexOf("turn:")===0&&url.indexOf("transport=udp")!==-1&&url.indexOf("turn:[")===-1&&!hasTurn;if(validTurn){hasTurn=true;return true}return url.indexOf("stun:")===0&&edgeVersion>=14393});delete server.url;server.urls=isString?urls[0]:urls;return!!urls.length}return false})}function getCommonCapabilities(localCapabilities,remoteCapabilities){var commonCapabilities={codecs:[],headerExtensions:[],fecMechanisms:[]};var findCodecByPayloadType=function(pt,codecs){pt=parseInt(pt,10);for(var i=0;i<codecs.length;i++){if(codecs[i].payloadType===pt||codecs[i].preferredPayloadType===pt){return codecs[i]}}};var rtxCapabilityMatches=function(lRtx,rRtx,lCodecs,rCodecs){var lCodec=findCodecByPayloadType(lRtx.parameters.apt,lCodecs);var rCodec=findCodecByPayloadType(rRtx.parameters.apt,rCodecs);return lCodec&&rCodec&&lCodec.name.toLowerCase()===rCodec.name.toLowerCase()};localCapabilities.codecs.forEach(function(lCodec){for(var i=0;i<remoteCapabilities.codecs.length;i++){var rCodec=remoteCapabilities.codecs[i];if(lCodec.name.toLowerCase()===rCodec.name.toLowerCase()&&lCodec.clockRate===rCodec.clockRate){if(lCodec.name.toLowerCase()==="rtx"&&lCodec.parameters&&rCodec.parameters.apt){if(!rtxCapabilityMatches(lCodec,rCodec,localCapabilities.codecs,remoteCapabilities.codecs)){continue}}rCodec=JSON.parse(JSON.stringify(rCodec));rCodec.numChannels=Math.min(lCodec.numChannels,rCodec.numChannels);commonCapabilities.codecs.push(rCodec);rCodec.rtcpFeedback=rCodec.rtcpFeedback.filter(function(fb){for(var j=0;j<lCodec.rtcpFeedback.length;j++){if(lCodec.rtcpFeedback[j].type===fb.type&&lCodec.rtcpFeedback[j].parameter===fb.parameter){return true}}return false});break}}});localCapabilities.headerExtensions.forEach(function(lHeaderExtension){for(var i=0;i<remoteCapabilities.headerExtensions.length;i++){var rHeaderExtension=remoteCapabilities.headerExtensions[i];if(lHeaderExtension.uri===rHeaderExtension.uri){commonCapabilities.headerExtensions.push(rHeaderExtension);break}}});return commonCapabilities}function isActionAllowedInSignalingState(action,type,signalingState){return{offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[type][action].indexOf(signalingState)!==-1}return function(window,edgeVersion){var RTCPeerConnection=function(config){var self=this;var _eventTarget=document.createDocumentFragment();["addEventListener","removeEventListener","dispatchEvent"].forEach(function(method){self[method]=_eventTarget[method].bind(_eventTarget)});this.needNegotiation=false;this.onicecandidate=null;this.onaddstream=null;this.ontrack=null;this.onremovestream=null;this.onsignalingstatechange=null;this.oniceconnectionstatechange=null;this.onicegatheringstatechange=null;this.onnegotiationneeded=null;this.ondatachannel=null;this.canTrickleIceCandidates=null;this.localStreams=[];this.remoteStreams=[];this.getLocalStreams=function(){return self.localStreams};this.getRemoteStreams=function(){return self.remoteStreams};this.localDescription=new window.RTCSessionDescription({type:"",sdp:""});this.remoteDescription=new window.RTCSessionDescription({type:"",sdp:""});this.signalingState="stable";this.iceConnectionState="new";this.iceGatheringState="new";this.iceOptions={gatherPolicy:"all",iceServers:[]};if(config&&config.iceTransportPolicy){switch(config.iceTransportPolicy){case"all":case"relay":this.iceOptions.gatherPolicy=config.iceTransportPolicy;break;default:break}}this.usingBundle=config&&config.bundlePolicy==="max-bundle";if(config&&config.iceServers){this.iceOptions.iceServers=filterIceServers(config.iceServers,edgeVersion)}this._config=config||{};this.transceivers=[];this._localIceCandidatesBuffer=[];this._sdpSessionId=SDPUtils.generateSessionId()};RTCPeerConnection.prototype._emitGatheringStateChange=function(){var event=new Event("icegatheringstatechange");this.dispatchEvent(event);if(this.onicegatheringstatechange!==null){this.onicegatheringstatechange(event)}};RTCPeerConnection.prototype._emitBufferedCandidates=function(){var self=this;var sections=SDPUtils.splitSections(self.localDescription.sdp);this._localIceCandidatesBuffer.forEach(function(event){var end=!event.candidate||Object.keys(event.candidate).length===0;if(end){for(var j=1;j<sections.length;j++){if(sections[j].indexOf("\r\na=end-of-candidates\r\n")===-1){sections[j]+="a=end-of-candidates\r\n"}}}else{sections[event.candidate.sdpMLineIndex+1]+="a="+event.candidate.candidate+"\r\n"}self.localDescription.sdp=sections.join("");self.dispatchEvent(event);if(self.onicecandidate!==null){self.onicecandidate(event)}if(!event.candidate&&self.iceGatheringState!=="complete"){var complete=self.transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==="completed"});if(complete&&self.iceGatheringStateChange!=="complete"){self.iceGatheringState="complete";self._emitGatheringStateChange()}}});this._localIceCandidatesBuffer=[]};RTCPeerConnection.prototype.getConfiguration=function(){return this._config};RTCPeerConnection.prototype._createTransceiver=function(kind){var hasBundleTransport=this.transceivers.length>0;var transceiver={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:kind,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,wantReceive:true};if(this.usingBundle&&hasBundleTransport){transceiver.iceTransport=this.transceivers[0].iceTransport;transceiver.dtlsTransport=this.transceivers[0].dtlsTransport}else{var transports=this._createIceAndDtlsTransports();transceiver.iceTransport=transports.iceTransport;transceiver.dtlsTransport=transports.dtlsTransport}this.transceivers.push(transceiver);return transceiver};RTCPeerConnection.prototype.addTrack=function(track,stream){var transceiver;for(var i=0;i<this.transceivers.length;i++){if(!this.transceivers[i].track&&this.transceivers[i].kind===track.kind){transceiver=this.transceivers[i]}}if(!transceiver){transceiver=this._createTransceiver(track.kind)}transceiver.track=track;transceiver.stream=stream;transceiver.rtpSender=new window.RTCRtpSender(track,transceiver.dtlsTransport);this._maybeFireNegotiationNeeded();return transceiver.rtpSender};RTCPeerConnection.prototype.addStream=function(stream){var self=this;if(edgeVersion>=15025){this.localStreams.push(stream);stream.getTracks().forEach(function(track){self.addTrack(track,stream)})}else{var clonedStream=stream.clone();stream.getTracks().forEach(function(track,idx){var clonedTrack=clonedStream.getTracks()[idx];track.addEventListener("enabled",function(event){clonedTrack.enabled=event.enabled})});clonedStream.getTracks().forEach(function(track){self.addTrack(track,clonedStream)});this.localStreams.push(clonedStream)}this._maybeFireNegotiationNeeded()};RTCPeerConnection.prototype.removeStream=function(stream){var idx=this.localStreams.indexOf(stream);if(idx>-1){this.localStreams.splice(idx,1);this._maybeFireNegotiationNeeded()}};RTCPeerConnection.prototype.getSenders=function(){return this.transceivers.filter(function(transceiver){return!!transceiver.rtpSender}).map(function(transceiver){return transceiver.rtpSender})};RTCPeerConnection.prototype.getReceivers=function(){return this.transceivers.filter(function(transceiver){return!!transceiver.rtpReceiver}).map(function(transceiver){return transceiver.rtpReceiver})};RTCPeerConnection.prototype._createIceGatherer=function(mid,sdpMLineIndex){var self=this;var iceGatherer=new window.RTCIceGatherer(self.iceOptions);iceGatherer.onlocalcandidate=function(evt){var event=new Event("icecandidate");event.candidate={sdpMid:mid,sdpMLineIndex:sdpMLineIndex};var cand=evt.candidate;var end=!cand||Object.keys(cand).length===0;if(end){if(iceGatherer.state===undefined){iceGatherer.state="completed"}}else{cand.component=1;event.candidate.candidate=SDPUtils.writeCandidate(cand)}var sections=SDPUtils.splitSections(self.localDescription.sdp);if(!end){sections[event.candidate.sdpMLineIndex+1]+="a="+event.candidate.candidate+"\r\n"}else{sections[event.candidate.sdpMLineIndex+1]+="a=end-of-candidates\r\n"}self.localDescription.sdp=sections.join("");var transceivers=self._pendingOffer?self._pendingOffer:self.transceivers;var complete=transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==="completed"});switch(self.iceGatheringState){case"new":if(!end){self._localIceCandidatesBuffer.push(event)}if(end&&complete){self._localIceCandidatesBuffer.push(new Event("icecandidate"))}break;case"gathering":self._emitBufferedCandidates();if(!end){self.dispatchEvent(event);if(self.onicecandidate!==null){self.onicecandidate(event)}}if(complete){self.dispatchEvent(new Event("icecandidate"));if(self.onicecandidate!==null){self.onicecandidate(new Event("icecandidate"))}self.iceGatheringState="complete";self._emitGatheringStateChange()}break;case"complete":break;default:break}};return iceGatherer};RTCPeerConnection.prototype._createIceAndDtlsTransports=function(){var self=this;var iceTransport=new window.RTCIceTransport(null);iceTransport.onicestatechange=function(){self._updateConnectionState()};var dtlsTransport=new window.RTCDtlsTransport(iceTransport);dtlsTransport.ondtlsstatechange=function(){self._updateConnectionState()};dtlsTransport.onerror=function(){Object.defineProperty(dtlsTransport,"state",{value:"failed",writable:true});self._updateConnectionState()};return{iceTransport:iceTransport,dtlsTransport:dtlsTransport}};RTCPeerConnection.prototype._disposeIceAndDtlsTransports=function(sdpMLineIndex){var iceGatherer=this.transceivers[sdpMLineIndex].iceGatherer;if(iceGatherer){delete iceGatherer.onlocalcandidate;delete this.transceivers[sdpMLineIndex].iceGatherer}var iceTransport=this.transceivers[sdpMLineIndex].iceTransport;if(iceTransport){delete iceTransport.onicestatechange;delete this.transceivers[sdpMLineIndex].iceTransport}var dtlsTransport=this.transceivers[sdpMLineIndex].dtlsTransport;if(dtlsTransport){delete dtlsTransport.ondtlssttatechange;delete dtlsTransport.onerror;delete this.transceivers[sdpMLineIndex].dtlsTransport}};RTCPeerConnection.prototype._transceive=function(transceiver,send,recv){var params=getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);if(send&&transceiver.rtpSender){params.encodings=transceiver.sendEncodingParameters;params.rtcp={cname:SDPUtils.localCName,compound:transceiver.rtcpParameters.compound};if(transceiver.recvEncodingParameters.length){params.rtcp.ssrc=transceiver.recvEncodingParameters[0].ssrc}transceiver.rtpSender.send(params)}if(recv&&transceiver.rtpReceiver){if(transceiver.kind==="video"&&transceiver.recvEncodingParameters&&edgeVersion<15019){transceiver.recvEncodingParameters.forEach(function(p){delete p.rtx})}params.encodings=transceiver.recvEncodingParameters;params.rtcp={cname:transceiver.rtcpParameters.cname,compound:transceiver.rtcpParameters.compound};if(transceiver.sendEncodingParameters.length){params.rtcp.ssrc=transceiver.sendEncodingParameters[0].ssrc}transceiver.rtpReceiver.receive(params)}};RTCPeerConnection.prototype.setLocalDescription=function(description){var self=this;if(!isActionAllowedInSignalingState("setLocalDescription",description.type,this.signalingState)){var e=new Error("Can not set local "+description.type+" in state "+this.signalingState);e.name="InvalidStateError";if(arguments.length>2&&typeof arguments[2]==="function"){window.setTimeout(arguments[2],0,e)}return Promise.reject(e)}var sections;var sessionpart;if(description.type==="offer"){if(this._pendingOffer){sections=SDPUtils.splitSections(description.sdp);sessionpart=sections.shift();sections.forEach(function(mediaSection,sdpMLineIndex){var caps=SDPUtils.parseRtpParameters(mediaSection);self._pendingOffer[sdpMLineIndex].localCapabilities=caps});this.transceivers=this._pendingOffer;delete this._pendingOffer}}else if(description.type==="answer"){sections=SDPUtils.splitSections(self.remoteDescription.sdp);sessionpart=sections.shift();var isIceLite=SDPUtils.matchPrefix(sessionpart,"a=ice-lite").length>0;sections.forEach(function(mediaSection,sdpMLineIndex){var transceiver=self.transceivers[sdpMLineIndex];var iceGatherer=transceiver.iceGatherer;var iceTransport=transceiver.iceTransport;var dtlsTransport=transceiver.dtlsTransport;var localCapabilities=transceiver.localCapabilities;var remoteCapabilities=transceiver.remoteCapabilities;var rejected=SDPUtils.isRejected(mediaSection);if(!rejected&&!transceiver.isDatachannel){var remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);var remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);if(isIceLite){remoteDtlsParameters.role="server"}if(!self.usingBundle||sdpMLineIndex===0){iceTransport.start(iceGatherer,remoteIceParameters,isIceLite?"controlling":"controlled");dtlsTransport.start(remoteDtlsParameters)}var params=getCommonCapabilities(localCapabilities,remoteCapabilities);self._transceive(transceiver,params.codecs.length>0,false)}})}this.localDescription={type:description.type,sdp:description.sdp};switch(description.type){case"offer":this._updateSignalingState("have-local-offer");break;case"answer":this._updateSignalingState("stable");break;default:throw new TypeError('unsupported type "'+description.type+'"')}var hasCallback=arguments.length>1&&typeof arguments[1]==="function";if(hasCallback){var cb=arguments[1];window.setTimeout(function(){cb();if(self.iceGatheringState==="new"){self.iceGatheringState="gathering";self._emitGatheringStateChange()}self._emitBufferedCandidates()},0)}var p=Promise.resolve();p.then(function(){if(!hasCallback){if(self.iceGatheringState==="new"){self.iceGatheringState="gathering";self._emitGatheringStateChange()}window.setTimeout(self._emitBufferedCandidates.bind(self),500)}});return p};RTCPeerConnection.prototype.setRemoteDescription=function(description){var self=this;if(!isActionAllowedInSignalingState("setRemoteDescription",description.type,this.signalingState)){var e=new Error("Can not set remote "+description.type+" in state "+this.signalingState);e.name="InvalidStateError";if(arguments.length>2&&typeof arguments[2]==="function"){window.setTimeout(arguments[2],0,e)}return Promise.reject(e)}var streams={};var receiverList=[];var sections=SDPUtils.splitSections(description.sdp);var sessionpart=sections.shift();var isIceLite=SDPUtils.matchPrefix(sessionpart,"a=ice-lite").length>0;var usingBundle=SDPUtils.matchPrefix(sessionpart,"a=group:BUNDLE ").length>0;this.usingBundle=usingBundle;var iceOptions=SDPUtils.matchPrefix(sessionpart,"a=ice-options:")[0];if(iceOptions){this.canTrickleIceCandidates=iceOptions.substr(14).split(" ").indexOf("trickle")>=0}else{this.canTrickleIceCandidates=false}sections.forEach(function(mediaSection,sdpMLineIndex){var lines=SDPUtils.splitLines(mediaSection);var kind=SDPUtils.getKind(mediaSection);var rejected=SDPUtils.isRejected(mediaSection);var protocol=lines[0].substr(2).split(" ")[2];var direction=SDPUtils.getDirection(mediaSection,sessionpart);var remoteMsid=SDPUtils.parseMsid(mediaSection);var mid=SDPUtils.getMid(mediaSection)||SDPUtils.generateIdentifier();if(kind==="application"&&protocol==="DTLS/SCTP"){self.transceivers[sdpMLineIndex]={mid:mid,isDatachannel:true};return}var transceiver;var iceGatherer;var iceTransport;var dtlsTransport;var rtpReceiver;var sendEncodingParameters;var recvEncodingParameters;var localCapabilities;var track;var remoteCapabilities=SDPUtils.parseRtpParameters(mediaSection);var remoteIceParameters;var remoteDtlsParameters;if(!rejected){remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);remoteDtlsParameters.role="client"}recvEncodingParameters=SDPUtils.parseRtpEncodingParameters(mediaSection);var rtcpParameters=SDPUtils.parseRtcpParameters(mediaSection);var isComplete=SDPUtils.matchPrefix(mediaSection,"a=end-of-candidates",sessionpart).length>0;var cands=SDPUtils.matchPrefix(mediaSection,"a=candidate:").map(function(cand){return SDPUtils.parseCandidate(cand)}).filter(function(cand){return cand.component==="1"||cand.component===1});if((description.type==="offer"||description.type==="answer")&&!rejected&&usingBundle&&sdpMLineIndex>0&&self.transceivers[sdpMLineIndex]){self._disposeIceAndDtlsTransports(sdpMLineIndex);self.transceivers[sdpMLineIndex].iceGatherer=self.transceivers[0].iceGatherer;self.transceivers[sdpMLineIndex].iceTransport=self.transceivers[0].iceTransport;self.transceivers[sdpMLineIndex].dtlsTransport=self.transceivers[0].dtlsTransport;if(self.transceivers[sdpMLineIndex].rtpSender){self.transceivers[sdpMLineIndex].rtpSender.setTransport(self.transceivers[0].dtlsTransport)}if(self.transceivers[sdpMLineIndex].rtpReceiver){self.transceivers[sdpMLineIndex].rtpReceiver.setTransport(self.transceivers[0].dtlsTransport)}}if(description.type==="offer"&&!rejected){transceiver=self.transceivers[sdpMLineIndex]||self._createTransceiver(kind);transceiver.mid=mid;if(!transceiver.iceGatherer){transceiver.iceGatherer=usingBundle&&sdpMLineIndex>0?self.transceivers[0].iceGatherer:self._createIceGatherer(mid,sdpMLineIndex)}if(isComplete&&(!usingBundle||sdpMLineIndex===0)){transceiver.iceTransport.setRemoteCandidates(cands)}localCapabilities=window.RTCRtpReceiver.getCapabilities(kind);if(edgeVersion<15019){localCapabilities.codecs=localCapabilities.codecs.filter(function(codec){return codec.name!=="rtx"})}sendEncodingParameters=[{ssrc:(2*sdpMLineIndex+2)*1001}];if(direction==="sendrecv"||direction==="sendonly"){rtpReceiver=new window.RTCRtpReceiver(transceiver.dtlsTransport,kind);track=rtpReceiver.track;if(remoteMsid){if(!streams[remoteMsid.stream]){streams[remoteMsid.stream]=new window.MediaStream;Object.defineProperty(streams[remoteMsid.stream],"id",{get:function(){return remoteMsid.stream}})}Object.defineProperty(track,"id",{get:function(){return remoteMsid.track}});streams[remoteMsid.stream].addTrack(track);receiverList.push([track,rtpReceiver,streams[remoteMsid.stream]])}else{if(!streams.default){streams.default=new window.MediaStream}streams.default.addTrack(track);receiverList.push([track,rtpReceiver,streams.default])}}transceiver.localCapabilities=localCapabilities;transceiver.remoteCapabilities=remoteCapabilities;transceiver.rtpReceiver=rtpReceiver;transceiver.rtcpParameters=rtcpParameters;transceiver.sendEncodingParameters=sendEncodingParameters;transceiver.recvEncodingParameters=recvEncodingParameters;self._transceive(self.transceivers[sdpMLineIndex],false,direction==="sendrecv"||direction==="sendonly")}else if(description.type==="answer"&&!rejected){transceiver=self.transceivers[sdpMLineIndex];iceGatherer=transceiver.iceGatherer;iceTransport=transceiver.iceTransport;dtlsTransport=transceiver.dtlsTransport;rtpReceiver=transceiver.rtpReceiver;sendEncodingParameters=transceiver.sendEncodingParameters;localCapabilities=transceiver.localCapabilities;self.transceivers[sdpMLineIndex].recvEncodingParameters=recvEncodingParameters;self.transceivers[sdpMLineIndex].remoteCapabilities=remoteCapabilities;self.transceivers[sdpMLineIndex].rtcpParameters=rtcpParameters;if((isIceLite||isComplete)&&cands.length){iceTransport.setRemoteCandidates(cands)}if(!usingBundle||sdpMLineIndex===0){iceTransport.start(iceGatherer,remoteIceParameters,"controlling");dtlsTransport.start(remoteDtlsParameters)}self._transceive(transceiver,direction==="sendrecv"||direction==="recvonly",direction==="sendrecv"||direction==="sendonly");if(rtpReceiver&&(direction==="sendrecv"||direction==="sendonly")){track=rtpReceiver.track;if(remoteMsid){if(!streams[remoteMsid.stream]){streams[remoteMsid.stream]=new window.MediaStream}streams[remoteMsid.stream].addTrack(track);receiverList.push([track,rtpReceiver,streams[remoteMsid.stream]])}else{if(!streams.default){streams.default=new window.MediaStream}streams.default.addTrack(track);receiverList.push([track,rtpReceiver,streams.default])}}else{delete transceiver.rtpReceiver}}});this.remoteDescription={type:description.type,sdp:description.sdp};switch(description.type){case"offer":this._updateSignalingState("have-remote-offer");break;case"answer":this._updateSignalingState("stable");break;default:throw new TypeError('unsupported type "'+description.type+'"')}Object.keys(streams).forEach(function(sid){var stream=streams[sid];if(stream.getTracks().length){self.remoteStreams.push(stream);var event=new Event("addstream");event.stream=stream;self.dispatchEvent(event);if(self.onaddstream!==null){window.setTimeout(function(){self.onaddstream(event)},0)}receiverList.forEach(function(item){var track=item[0];var receiver=item[1];if(stream.id!==item[2].id){return}var trackEvent=new Event("track");trackEvent.track=track;trackEvent.receiver=receiver;trackEvent.streams=[stream];self.dispatchEvent(trackEvent);if(self.ontrack!==null){window.setTimeout(function(){self.ontrack(trackEvent)},0)}})}});window.setTimeout(function(){if(!(self&&self.transceivers)){return}self.transceivers.forEach(function(transceiver){if(transceiver.iceTransport&&transceiver.iceTransport.state==="new"&&transceiver.iceTransport.getRemoteCandidates().length>0){console.warn("Timeout for addRemoteCandidate. Consider sending "+"an end-of-candidates notification");transceiver.iceTransport.addRemoteCandidate({})}})},4e3);if(arguments.length>1&&typeof arguments[1]==="function"){window.setTimeout(arguments[1],0)}return Promise.resolve()};RTCPeerConnection.prototype.close=function(){this.transceivers.forEach(function(transceiver){if(transceiver.iceTransport){transceiver.iceTransport.stop()}if(transceiver.dtlsTransport){transceiver.dtlsTransport.stop()}if(transceiver.rtpSender){transceiver.rtpSender.stop()}if(transceiver.rtpReceiver){transceiver.rtpReceiver.stop()}});this._updateSignalingState("closed")};RTCPeerConnection.prototype._updateSignalingState=function(newState){this.signalingState=newState;var event=new Event("signalingstatechange");this.dispatchEvent(event);if(this.onsignalingstatechange!==null){this.onsignalingstatechange(event)}};RTCPeerConnection.prototype._maybeFireNegotiationNeeded=function(){var self=this;if(this.signalingState!=="stable"||this.needNegotiation===true){return}this.needNegotiation=true;window.setTimeout(function(){if(self.needNegotiation===false){return}self.needNegotiation=false;var event=new Event("negotiationneeded");self.dispatchEvent(event);if(self.onnegotiationneeded!==null){self.onnegotiationneeded(event)}},0)};RTCPeerConnection.prototype._updateConnectionState=function(){var self=this;var newState;var states={new:0,closed:0,connecting:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};this.transceivers.forEach(function(transceiver){states[transceiver.iceTransport.state]++;states[transceiver.dtlsTransport.state]++});states.connected+=states.completed;newState="new";if(states.failed>0){newState="failed"}else if(states.connecting>0||states.checking>0){newState="connecting"}else if(states.disconnected>0){newState="disconnected"}else if(states.new>0){newState="new"}else if(states.connected>0||states.completed>0){newState="connected"}if(newState!==self.iceConnectionState){self.iceConnectionState=newState;var event=new Event("iceconnectionstatechange");this.dispatchEvent(event);if(this.oniceconnectionstatechange!==null){this.oniceconnectionstatechange(event)}}};RTCPeerConnection.prototype.createOffer=function(){var self=this;if(this._pendingOffer){throw new Error("createOffer called while there is a pending offer.")}var offerOptions;if(arguments.length===1&&typeof arguments[0]!=="function"){offerOptions=arguments[0]}else if(arguments.length===3){offerOptions=arguments[2]}var numAudioTracks=this.transceivers.filter(function(t){return t.kind==="audio"}).length;var numVideoTracks=this.transceivers.filter(function(t){return t.kind==="video"}).length;if(offerOptions){if(offerOptions.mandatory||offerOptions.optional){throw new TypeError("Legacy mandatory/optional constraints not supported.")}if(offerOptions.offerToReceiveAudio!==undefined){if(offerOptions.offerToReceiveAudio===true){numAudioTracks=1}else if(offerOptions.offerToReceiveAudio===false){numAudioTracks=0}else{numAudioTracks=offerOptions.offerToReceiveAudio}}if(offerOptions.offerToReceiveVideo!==undefined){if(offerOptions.offerToReceiveVideo===true){numVideoTracks=1}else if(offerOptions.offerToReceiveVideo===false){numVideoTracks=0}else{numVideoTracks=offerOptions.offerToReceiveVideo}}}this.transceivers.forEach(function(transceiver){if(transceiver.kind==="audio"){numAudioTracks--;if(numAudioTracks<0){transceiver.wantReceive=false}}else if(transceiver.kind==="video"){numVideoTracks--;if(numVideoTracks<0){transceiver.wantReceive=false}}});while(numAudioTracks>0||numVideoTracks>0){if(numAudioTracks>0){this._createTransceiver("audio");numAudioTracks--}if(numVideoTracks>0){this._createTransceiver("video");numVideoTracks--}}var transceivers=sortTracks(this.transceivers);var sdp=SDPUtils.writeSessionBoilerplate(this._sdpSessionId);transceivers.forEach(function(transceiver,sdpMLineIndex){var track=transceiver.track;var kind=transceiver.kind;var mid=SDPUtils.generateIdentifier();transceiver.mid=mid;if(!transceiver.iceGatherer){transceiver.iceGatherer=self.usingBundle&&sdpMLineIndex>0?transceivers[0].iceGatherer:self._createIceGatherer(mid,sdpMLineIndex)}var localCapabilities=window.RTCRtpSender.getCapabilities(kind);if(edgeVersion<15019){localCapabilities.codecs=localCapabilities.codecs.filter(function(codec){return codec.name!=="rtx"})}localCapabilities.codecs.forEach(function(codec){if(codec.name==="H264"&&codec.parameters["level-asymmetry-allowed"]===undefined){codec.parameters["level-asymmetry-allowed"]="1"}});var sendEncodingParameters=[{ssrc:(2*sdpMLineIndex+1)*1001}];if(track){if(edgeVersion>=15019&&kind==="video"){sendEncodingParameters[0].rtx={ssrc:(2*sdpMLineIndex+1)*1001+1}}}if(transceiver.wantReceive){transceiver.rtpReceiver=new window.RTCRtpReceiver(transceiver.dtlsTransport,kind)}transceiver.localCapabilities=localCapabilities;transceiver.sendEncodingParameters=sendEncodingParameters});if(this._config.bundlePolicy!=="max-compat"){sdp+="a=group:BUNDLE "+transceivers.map(function(t){return t.mid}).join(" ")+"\r\n"}sdp+="a=ice-options:trickle\r\n";transceivers.forEach(function(transceiver,sdpMLineIndex){sdp+=SDPUtils.writeMediaSection(transceiver,transceiver.localCapabilities,"offer",transceiver.stream);sdp+="a=rtcp-rsize\r\n"});this._pendingOffer=transceivers;var desc=new window.RTCSessionDescription({type:"offer",sdp:sdp});if(arguments.length&&typeof arguments[0]==="function"){window.setTimeout(arguments[0],0,desc)}return Promise.resolve(desc)};RTCPeerConnection.prototype.createAnswer=function(){var sdp=SDPUtils.writeSessionBoilerplate(this._sdpSessionId);if(this.usingBundle){sdp+="a=group:BUNDLE "+this.transceivers.map(function(t){return t.mid}).join(" ")+"\r\n"}this.transceivers.forEach(function(transceiver,sdpMLineIndex){if(transceiver.isDatachannel){sdp+="m=application 0 DTLS/SCTP 5000\r\n"+"c=IN IP4 0.0.0.0\r\n"+"a=mid:"+transceiver.mid+"\r\n";return}if(transceiver.stream){var localTrack;if(transceiver.kind==="audio"){localTrack=transceiver.stream.getAudioTracks()[0]}else if(transceiver.kind==="video"){localTrack=transceiver.stream.getVideoTracks()[0]}if(localTrack){if(edgeVersion>=15019&&transceiver.kind==="video"){transceiver.sendEncodingParameters[0].rtx={ssrc:(2*sdpMLineIndex+2)*1001+1}}}}var commonCapabilities=getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);var hasRtx=commonCapabilities.codecs.filter(function(c){return c.name.toLowerCase()==="rtx"}).length;if(!hasRtx&&transceiver.sendEncodingParameters[0].rtx){delete transceiver.sendEncodingParameters[0].rtx}sdp+=SDPUtils.writeMediaSection(transceiver,commonCapabilities,"answer",transceiver.stream);if(transceiver.rtcpParameters&&transceiver.rtcpParameters.reducedSize){sdp+="a=rtcp-rsize\r\n"}});var desc=new window.RTCSessionDescription({type:"answer",sdp:sdp});if(arguments.length&&typeof arguments[0]==="function"){window.setTimeout(arguments[0],0,desc)}return Promise.resolve(desc)};RTCPeerConnection.prototype.addIceCandidate=function(candidate){if(!candidate){for(var j=0;j<this.transceivers.length;j++){this.transceivers[j].iceTransport.addRemoteCandidate({});if(this.usingBundle){return Promise.resolve()}}}else{var mLineIndex=candidate.sdpMLineIndex;if(candidate.sdpMid){for(var i=0;i<this.transceivers.length;i++){if(this.transceivers[i].mid===candidate.sdpMid){mLineIndex=i;break}}}var transceiver=this.transceivers[mLineIndex];if(transceiver){var cand=Object.keys(candidate.candidate).length>0?SDPUtils.parseCandidate(candidate.candidate):{};if(cand.protocol==="tcp"&&(cand.port===0||cand.port===9)){return Promise.resolve()}if(cand.component&&!(cand.component==="1"||cand.component===1)){return Promise.resolve()}transceiver.iceTransport.addRemoteCandidate(cand);var sections=SDPUtils.splitSections(this.remoteDescription.sdp);sections[mLineIndex+1]+=(cand.type?candidate.candidate.trim():"a=end-of-candidates")+"\r\n";this.remoteDescription.sdp=sections.join("")}}if(arguments.length>1&&typeof arguments[1]==="function"){window.setTimeout(arguments[1],0)}return Promise.resolve()};RTCPeerConnection.prototype.getStats=function(){var promises=[];this.transceivers.forEach(function(transceiver){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach(function(method){if(transceiver[method]){promises.push(transceiver[method].getStats())}})});var cb=arguments.length>1&&typeof arguments[1]==="function"&&arguments[1];var fixStatsType=function(stat){return{inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[stat.type]||stat.type};return new Promise(function(resolve){var results=new Map;Promise.all(promises).then(function(res){res.forEach(function(result){Object.keys(result).forEach(function(id){result[id].type=fixStatsType(result[id]);results.set(id,result[id])})});if(cb){window.setTimeout(cb,0,results)}resolve(results)})})};return RTCPeerConnection}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./utils"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./utils"))}else{global.getusermedia=factory(global.utils)}})(this,function(Utils){var utils=Utils;var logging=utils.log;return function(window){var browserDetails=utils.detectBrowser(window);var navigator=window&&window.navigator;var constraintsToChrome_=function(c){if(typeof c!=="object"||c.mandatory||c.optional){return c}var cc={};Object.keys(c).forEach(function(key){if(key==="require"||key==="advanced"||key==="mediaSource"){return}var r=typeof c[key]==="object"?c[key]:{ideal:c[key]};if(r.exact!==undefined&&typeof r.exact==="number"){r.min=r.max=r.exact}var oldname_=function(prefix,name){if(prefix){return prefix+name.charAt(0).toUpperCase()+name.slice(1)}return name==="deviceId"?"sourceId":name};if(r.ideal!==undefined){cc.optional=cc.optional||[];var oc={};if(typeof r.ideal==="number"){oc[oldname_("min",key)]=r.ideal;cc.optional.push(oc);oc={};oc[oldname_("max",key)]=r.ideal;cc.optional.push(oc)}else{oc[oldname_("",key)]=r.ideal;cc.optional.push(oc)}}if(r.exact!==undefined&&typeof r.exact!=="number"){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_("",key)]=r.exact}else{["min","max"].forEach(function(mix){if(r[mix]!==undefined){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_(mix,key)]=r[mix]}})}});if(c.advanced){cc.optional=(cc.optional||[]).concat(c.advanced)}return cc};var shimConstraints_=function(constraints,func){constraints=JSON.parse(JSON.stringify(constraints));if(constraints&&typeof constraints.audio==="object"){var remap=function(obj,a,b){if(a in obj&&!(b in obj)){obj[b]=obj[a];delete obj[a]}};constraints=JSON.parse(JSON.stringify(constraints));remap(constraints.audio,"autoGainControl","googAutoGainControl");remap(constraints.audio,"noiseSuppression","googNoiseSuppression");constraints.audio=constraintsToChrome_(constraints.audio)}if(constraints&&typeof constraints.video==="object"){var face=constraints.video.facingMode;face=face&&(typeof face==="object"?face:{ideal:face});var getSupportedFacingModeLies=browserDetails.version<61;if(face&&(face.exact==="user"||face.exact==="environment"||face.ideal==="user"||face.ideal==="environment")&&!(navigator.mediaDevices.getSupportedConstraints&&navigator.mediaDevices.getSupportedConstraints().facingMode&&!getSupportedFacingModeLies)){delete constraints.video.facingMode;var matches;if(face.exact==="environment"||face.ideal==="environment"){matches=["back","rear"]}else if(face.exact==="user"||face.ideal==="user"){matches=["front"]}if(matches){return navigator.mediaDevices.enumerateDevices().then(function(devices){devices=devices.filter(function(d){return d.kind==="videoinput"});var dev=devices.find(function(d){return matches.some(function(match){return d.label.toLowerCase().indexOf(match)!==-1})});if(!dev&&devices.length&&matches.indexOf("back")!==-1){dev=devices[devices.length-1]}if(dev){constraints.video.deviceId=face.exact?{exact:dev.deviceId}:{ideal:dev.deviceId}}constraints.video=constraintsToChrome_(constraints.video);logging("chrome: "+JSON.stringify(constraints));return func(constraints)})}}constraints.video=constraintsToChrome_(constraints.video)}logging("chrome: "+JSON.stringify(constraints));return func(constraints)};var shimError_=function(e){return{name:{PermissionDeniedError:"NotAllowedError",InvalidStateError:"NotReadableError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotReadableError",MediaDeviceKillSwitchOn:"NotReadableError"}[e.name]||e.name,message:e.message,constraint:e.constraintName,toString:function(){return this.name+(this.message&&": ")+this.message}}};var getUserMedia_=function(constraints,onSuccess,onError){shimConstraints_(constraints,function(c){navigator.webkitGetUserMedia(c,onSuccess,function(e){onError(shimError_(e))})})};navigator.getUserMedia=getUserMedia_;var getUserMediaPromise_=function(constraints){return new Promise(function(resolve,reject){navigator.getUserMedia(constraints,resolve,reject)})};if(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:getUserMediaPromise_,enumerateDevices:function(){return new Promise(function(resolve){var kinds={audio:"audioinput",video:"videoinput"};return window.MediaStreamTrack.getSources(function(devices){resolve(devices.map(function(device){return{label:device.label,kind:kinds[device.kind],deviceId:device.id,groupId:""}}))})})},getSupportedConstraints:function(){return{deviceId:true,echoCancellation:true,facingMode:true,frameRate:true,height:true,width:true}}}}if(!navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia=function(constraints){return getUserMediaPromise_(constraints)}}else{var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(cs){return shimConstraints_(cs,function(c){return origGetUserMedia(c).then(function(stream){if(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(function(track){track.stop()});throw new DOMException("","NotFoundError")}return stream},function(e){return Promise.reject(shimError_(e))})})}}if(typeof navigator.mediaDevices.addEventListener==="undefined"){navigator.mediaDevices.addEventListener=function(){logging("Dummy mediaDevices.addEventListener called.")}}if(typeof navigator.mediaDevices.removeEventListener==="undefined"){navigator.mediaDevices.removeEventListener=function(){logging("Dummy mediaDevices.removeEventListener called.")}}}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define([],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory()}else{global.getusermedia_edge=factory()}})(this,function(){return function(window){var navigator=window&&window.navigator;var shimError_=function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString:function(){return this.name}}};var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){return origGetUserMedia(c).catch(function(e){return Promise.reject(shimError_(e))})}}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./utils"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./utils"))}else{global.getusermedia_firefox=factory(global.utils)}})(this,function(Utils){var utils=Utils;var logging=utils.log;return function(window){var browserDetails=utils.detectBrowser(window);var navigator=window&&window.navigator;var MediaStreamTrack=window&&window.MediaStreamTrack;var shimError_=function(e){return{name:{InternalError:"NotReadableError",NotSupportedError:"TypeError",PermissionDeniedError:"NotAllowedError",SecurityError:"NotAllowedError"}[e.name]||e.name,message:{"The operation is insecure.":"The request is not allowed by the "+"user agent or the platform in the current context."}[e.message]||e.message,constraint:e.constraint,toString:function(){return this.name+(this.message&&": ")+this.message}}};var getUserMedia_=function(constraints,onSuccess,onError){var constraintsToFF37_=function(c){if(typeof c!=="object"||c.require){return c}var require=[];Object.keys(c).forEach(function(key){if(key==="require"||key==="advanced"||key==="mediaSource"){return}var r=c[key]=typeof c[key]==="object"?c[key]:{ideal:c[key]};if(r.min!==undefined||r.max!==undefined||r.exact!==undefined){require.push(key)}if(r.exact!==undefined){if(typeof r.exact==="number"){r.min=r.max=r.exact}else{c[key]=r.exact}delete r.exact}if(r.ideal!==undefined){c.advanced=c.advanced||[];var oc={};if(typeof r.ideal==="number"){oc[key]={min:r.ideal,max:r.ideal}}else{oc[key]=r.ideal}c.advanced.push(oc);delete r.ideal;if(!Object.keys(r).length){delete c[key]}}});if(require.length){c.require=require}return c};constraints=JSON.parse(JSON.stringify(constraints));if(browserDetails.version<38){logging("spec: "+JSON.stringify(constraints));if(constraints.audio){constraints.audio=constraintsToFF37_(constraints.audio)}if(constraints.video){constraints.video=constraintsToFF37_(constraints.video)}logging("ff37: "+JSON.stringify(constraints))}return navigator.mozGetUserMedia(constraints,onSuccess,function(e){onError(shimError_(e))})};var getUserMediaPromise_=function(constraints){return new Promise(function(resolve,reject){getUserMedia_(constraints,resolve,reject)})};if(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:getUserMediaPromise_,addEventListener:function(){},removeEventListener:function(){}}}navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new Promise(function(resolve){var infos=[{kind:"audioinput",deviceId:"default",label:"",groupId:""},{kind:"videoinput",deviceId:"default",label:"",groupId:""}];resolve(infos)})};if(browserDetails.version<41){var orgEnumerateDevices=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return orgEnumerateDevices().then(undefined,function(e){if(e.name==="NotFoundError"){return[]}throw e})}}if(browserDetails.version<49){var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){return origGetUserMedia(c).then(function(stream){if(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(function(track){track.stop()});throw new DOMException("The object can not be found here.","NotFoundError")}return stream},function(e){return Promise.reject(shimError_(e))})}}if(!(browserDetails.version>55&&"autoGainControl"in navigator.mediaDevices.getSupportedConstraints())){var remap=function(obj,a,b){if(a in obj&&!(b in obj)){obj[b]=obj[a];delete obj[a]}};var nativeGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){if(typeof c==="object"&&typeof c.audio==="object"){c=JSON.parse(JSON.stringify(c));remap(c.audio,"autoGainControl","mozAutoGainControl");remap(c.audio,"noiseSuppression","mozNoiseSuppression")}return nativeGetUserMedia(c)};if(MediaStreamTrack&&MediaStreamTrack.prototype.getSettings){var nativeGetSettings=MediaStreamTrack.prototype.getSettings;MediaStreamTrack.prototype.getSettings=function(){var obj=nativeGetSettings.apply(this,arguments);remap(obj,"mozAutoGainControl","autoGainControl");remap(obj,"mozNoiseSuppression","noiseSuppression");return obj}}if(MediaStreamTrack&&MediaStreamTrack.prototype.applyConstraints){var nativeApplyConstraints=MediaStreamTrack.prototype.applyConstraints;MediaStreamTrack.prototype.applyConstraints=function(c){if(this.kind==="audio"&&typeof c==="object"){c=JSON.parse(JSON.stringify(c));remap(c,"autoGainControl","mozAutoGainControl");remap(c,"noiseSuppression","mozNoiseSuppression")}return nativeApplyConstraints.apply(this,[c])}}}navigator.getUserMedia=function(constraints,onSuccess,onError){if(browserDetails.version<44){return getUserMedia_(constraints,onSuccess,onError)}console.warn("navigator.getUserMedia has been replaced by "+"navigator.mediaDevices.getUserMedia");navigator.mediaDevices.getUserMedia(constraints).then(onSuccess,onError)}}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./../utils","./../getusermedia"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./../utils"),require("./../getusermedia"))}else{global.chrome_shim=factory(global.utils,global.getusermedia)}})(this,function(Utils,getUserMedia){var utils=Utils;var logging=utils.log;var chromeShim={shimMediaStream:function(window){window.MediaStream=window.MediaStream||window.webkitMediaStream},shimOnTrack:function(window){if(typeof window==="object"&&window.RTCPeerConnection&&!("ontrack"in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(f){var self=this;if(this._ontrack){this.removeEventListener("track",this._ontrack);this.removeEventListener("addstream",this._ontrackpoly)}this.addEventListener("track",this._ontrack=f);this.addEventListener("addstream",this._ontrackpoly=function(e){e.stream.addEventListener("addtrack",function(te){var receiver;if(window.RTCPeerConnection.prototype.getReceivers){receiver=self.getReceivers().find(function(r){return r.track.id===te.track.id})}else{receiver={track:te.track}}var event=new Event("track");event.track=te.track;event.receiver=receiver;event.streams=[e.stream];self.dispatchEvent(event)});e.stream.getTracks().forEach(function(track){var receiver;if(window.RTCPeerConnection.prototype.getReceivers){receiver=self.getReceivers().find(function(r){return r.track.id===track.id})}else{receiver={track:track}}var event=new Event("track");event.track=track;event.receiver=receiver;event.streams=[e.stream];this.dispatchEvent(event)}.bind(this))}.bind(this))}})}},shimGetSendersWithDtmf:function(window){if(typeof window==="object"&&window.RTCPeerConnection&&!("getSenders"in window.RTCPeerConnection.prototype)&&"createDTMFSender"in window.RTCPeerConnection.prototype){window.RTCPeerConnection.prototype.getSenders=function(){return this._senders||[]};var origAddStream=window.RTCPeerConnection.prototype.addStream;var origRemoveStream=window.RTCPeerConnection.prototype.removeStream;if(!window.RTCPeerConnection.prototype.addTrack){window.RTCPeerConnection.prototype.addTrack=function(track,stream){var pc=this;if(pc.signalingState==="closed"){throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError")}var streams=[].slice.call(arguments,1);if(streams.length!==1||!streams[0].getTracks().find(function(t){return t===track})){throw new DOMException("The adapter.js addTrack polyfill only supports a single "+" stream which is associated with the specified track.","NotSupportedError")}pc._senders=pc._senders||[];var alreadyExists=pc._senders.find(function(t){return t.track===track});if(alreadyExists){throw new DOMException("Track already exists.","InvalidAccessError")}pc._streams=pc._streams||{};var oldStream=pc._streams[stream.id];if(oldStream){oldStream.addTrack(track);pc.removeStream(oldStream);pc.addStream(oldStream)}else{var newStream=new window.MediaStream([track]);pc._streams[stream.id]=newStream;pc.addStream(newStream)}var sender={track:track,get dtmf(){if(this._dtmf===undefined){if(track.kind==="audio"){this._dtmf=pc.createDTMFSender(track)}else{this._dtmf=null}}return this._dtmf}};pc._senders.push(sender);return sender}}window.RTCPeerConnection.prototype.addStream=function(stream){var pc=this;pc._senders=pc._senders||[];origAddStream.apply(pc,[stream]);stream.getTracks().forEach(function(track){pc._senders.push({track:track,get dtmf(){if(this._dtmf===undefined){if(track.kind==="audio"){this._dtmf=pc.createDTMFSender(track)}else{this._dtmf=null}}return this._dtmf}})})};window.RTCPeerConnection.prototype.removeStream=function(stream){var pc=this;pc._senders=pc._senders||[];origRemoveStream.apply(pc,[stream]);stream.getTracks().forEach(function(track){var sender=pc._senders.find(function(s){return s.track===track});if(sender){pc._senders.splice(pc._senders.indexOf(sender),1)}})}}else if(typeof window==="object"&&window.RTCPeerConnection&&"getSenders"in window.RTCPeerConnection.prototype&&"createDTMFSender"in window.RTCPeerConnection.prototype&&window.RTCRtpSender&&!("dtmf"in window.RTCRtpSender.prototype)){var origGetSenders=window.RTCPeerConnection.prototype.getSenders;window.RTCPeerConnection.prototype.getSenders=function(){var pc=this;var senders=origGetSenders.apply(pc,[]);senders.forEach(function(sender){sender._pc=pc});return senders};Object.defineProperty(window.RTCRtpSender.prototype,"dtmf",{get:function(){if(this._dtmf===undefined){if(this.track.kind==="audio"){this._dtmf=this._pc.createDTMFSender(this.track)}else{this._dtmf=null}}return this._dtmf}})}},shimSourceObject:function(window){var URL=window&&window.URL;if(typeof window==="object"){if(window.HTMLMediaElement&&!("srcObject"in window.HTMLMediaElement.prototype)){Object.defineProperty(window.HTMLMediaElement.prototype,"srcObject",{get:function(){return this._srcObject},set:function(stream){var self=this;this._srcObject=stream;if(this.src){URL.revokeObjectURL(this.src)}if(!stream){this.src="";return undefined}this.src=URL.createObjectURL(stream);stream.addEventListener("addtrack",function(){if(self.src){URL.revokeObjectURL(self.src)}self.src=URL.createObjectURL(stream)});stream.addEventListener("removetrack",function(){if(self.src){URL.revokeObjectURL(self.src)}self.src=URL.createObjectURL(stream)})}})}}},shimPeerConnection:function(window){var browserDetails=utils.detectBrowser(window);if(!window.RTCPeerConnection){window.RTCPeerConnection=function(pcConfig,pcConstraints){logging("PeerConnection");if(pcConfig&&pcConfig.iceTransportPolicy){pcConfig.iceTransports=pcConfig.iceTransportPolicy}return new window.webkitRTCPeerConnection(pcConfig,pcConstraints)};window.RTCPeerConnection.prototype=window.webkitRTCPeerConnection.prototype;if(window.webkitRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,"generateCertificate",{get:function(){return window.webkitRTCPeerConnection.generateCertificate}})}}else{var OrigPeerConnection=window.RTCPeerConnection;window.RTCPeerConnection=function(pcConfig,pcConstraints){if(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(!server.hasOwnProperty("urls")&&server.hasOwnProperty("url")){console.warn("RTCIceServer.url is deprecated! Use urls instead.");server=JSON.parse(JSON.stringify(server));server.urls=server.url;newIceServers.push(server)}else{newIceServers.push(pcConfig.iceServers[i])}}pcConfig.iceServers=newIceServers}return new OrigPeerConnection(pcConfig,pcConstraints)};window.RTCPeerConnection.prototype=OrigPeerConnection.prototype;Object.defineProperty(window.RTCPeerConnection,"generateCertificate",{get:function(){return OrigPeerConnection.generateCertificate}})}var origGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function(selector,successCallback,errorCallback){var self=this;var args=arguments;if(arguments.length>0&&typeof selector==="function"){return origGetStats.apply(this,arguments)}if(origGetStats.length===0&&(arguments.length===0||typeof arguments[0]!=="function")){return origGetStats.apply(this,[])}var fixChromeStats_=function(response){var standardReport={};var reports=response.result();reports.forEach(function(report){var standardStats={id:report.id,timestamp:report.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[report.type]||report.type};report.names().forEach(function(name){standardStats[name]=report.stat(name)});standardReport[standardStats.id]=standardStats});return standardReport};var makeMapStats=function(stats){return new Map(Object.keys(stats).map(function(key){return[key,stats[key]]}))};if(arguments.length>=2){var successCallbackWrapper_=function(response){args[1](makeMapStats(fixChromeStats_(response)))};return origGetStats.apply(this,[successCallbackWrapper_,arguments[0]])}return new Promise(function(resolve,reject){origGetStats.apply(self,[function(response){resolve(makeMapStats(fixChromeStats_(response)))},reject])}).then(successCallback,errorCallback)};if(browserDetails.version<51){["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){var args=arguments;var self=this;var promise=new Promise(function(resolve,reject){nativeMethod.apply(self,[args[0],resolve,reject])});if(args.length<2){return promise}return promise.then(function(){args[1].apply(null,[])},function(err){if(args.length>=3){args[2].apply(null,[err])}})}})}if(browserDetails.version<52){["createOffer","createAnswer"].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){var self=this;if(arguments.length<1||arguments.length===1&&typeof arguments[0]==="object"){var opts=arguments.length===1?arguments[0]:undefined;return new Promise(function(resolve,reject){nativeMethod.apply(self,[resolve,reject,opts])})}return nativeMethod.apply(this,arguments)}})}["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){arguments[0]=new(method==="addIceCandidate"?window.RTCIceCandidate:window.RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments)}});var nativeAddIceCandidate=window.RTCPeerConnection.prototype.addIceCandidate;window.RTCPeerConnection.prototype.addIceCandidate=function(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null)}return Promise.resolve()}return nativeAddIceCandidate.apply(this,arguments)}}};return{shimMediaStream:chromeShim.shimMediaStream,shimOnTrack:chromeShim.shimOnTrack,shimGetSendersWithDtmf:chromeShim.shimGetSendersWithDtmf,shimSourceObject:chromeShim.shimSourceObject,shimPeerConnection:chromeShim.shimPeerConnection,shimGetUserMedia:getUserMedia}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./../utils","./../getusermedia_firefox"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./../utils"),require("./../getusermedia_firefox"))}else{global.firefox_shim=factory(global.utils,global.getusermedia_firefox)}})(this,function(Utils,getUserMedia){var utils=Utils;var firefoxShim={shimOnTrack:function(window){if(typeof window==="object"&&window.RTCPeerConnection&&!("ontrack"in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(f){if(this._ontrack){this.removeEventListener("track",this._ontrack);this.removeEventListener("addstream",this._ontrackpoly)}this.addEventListener("track",this._ontrack=f);this.addEventListener("addstream",this._ontrackpoly=function(e){e.stream.getTracks().forEach(function(track){var event=new Event("track");event.track=track;event.receiver={track:track};event.streams=[e.stream];this.dispatchEvent(event)}.bind(this))}.bind(this))}})}},shimSourceObject:function(window){if(typeof window==="object"){if(window.HTMLMediaElement&&!("srcObject"in window.HTMLMediaElement.prototype)){Object.defineProperty(window.HTMLMediaElement.prototype,"srcObject",{get:function(){return this.mozSrcObject},set:function(stream){this.mozSrcObject=stream}})}}},shimPeerConnection:function(window){var browserDetails=utils.detectBrowser(window);if(typeof window!=="object"||!(window.RTCPeerConnection||window.mozRTCPeerConnection)){return}if(!window.RTCPeerConnection){window.RTCPeerConnection=function(pcConfig,pcConstraints){if(browserDetails.version<38){if(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(server.hasOwnProperty("urls")){for(var j=0;j<server.urls.length;j++){var newServer={url:server.urls[j]};if(server.urls[j].indexOf("turn")===0){newServer.username=server.username;newServer.credential=server.credential}newIceServers.push(newServer)}}else{newIceServers.push(pcConfig.iceServers[i])}}pcConfig.iceServers=newIceServers}}return new window.mozRTCPeerConnection(pcConfig,pcConstraints)};window.RTCPeerConnection.prototype=window.mozRTCPeerConnection.prototype;if(window.mozRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,"generateCertificate",{get:function(){return window.mozRTCPeerConnection.generateCertificate}})}window.RTCSessionDescription=window.mozRTCSessionDescription;window.RTCIceCandidate=window.mozRTCIceCandidate}["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){arguments[0]=new(method==="addIceCandidate"?window.RTCIceCandidate:window.RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments)}});var nativeAddIceCandidate=window.RTCPeerConnection.prototype.addIceCandidate;window.RTCPeerConnection.prototype.addIceCandidate=function(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null)}return Promise.resolve()}return nativeAddIceCandidate.apply(this,arguments)};var makeMapStats=function(stats){var map=new Map;Object.keys(stats).forEach(function(key){map.set(key,stats[key]);map[key]=stats[key]});return map};var modernStatsTypes={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"};var nativeGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function(selector,onSucc,onErr){return nativeGetStats.apply(this,[selector||null]).then(function(stats){if(browserDetails.version<48){stats=makeMapStats(stats)}if(browserDetails.version<53&&!onSucc){try{stats.forEach(function(stat){stat.type=modernStatsTypes[stat.type]||stat.type})}catch(e){if(e.name!=="TypeError"){throw e}stats.forEach(function(stat,i){stats.set(i,Object.assign({},stat,{type:modernStatsTypes[stat.type]||stat.type}))})}}return stats}).then(onSucc,onErr)}}};return{shimOnTrack:firefoxShim.shimOnTrack,shimSourceObject:firefoxShim.shimSourceObject,shimPeerConnection:firefoxShim.shimPeerConnection,shimGetUserMedia:getUserMedia}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./../utils","./../getusermedia_edge","./../rtcpeerconnection_shim"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./../utils"),require("./../getusermedia_edge"),require("./../rtcpeerconnection_shim"))}else{global.edge_shim=factory(global.utils,global.getusermedia_edge,global.rtcpeerconnection_shim)}})(this,function(Utils,getUserMedia,rtcpeerconnection_shim){var utils=Utils;var shimRTCPeerConnection=rtcpeerconnection_shim;return{shimGetUserMedia:getUserMedia,shimPeerConnection:function(window){var browserDetails=utils.detectBrowser(window);if(window.RTCIceGatherer){if(!window.RTCIceCandidate){window.RTCIceCandidate=function(args){return args}}if(!window.RTCSessionDescription){window.RTCSessionDescription=function(args){return args}}if(browserDetails.version<15025){var origMSTEnabled=Object.getOwnPropertyDescriptor(window.MediaStreamTrack.prototype,"enabled");Object.defineProperty(window.MediaStreamTrack.prototype,"enabled",{set:function(value){origMSTEnabled.set.call(this,value);var ev=new Event("enabled");ev.enabled=value;this.dispatchEvent(ev)}})}}window.RTCPeerConnection=shimRTCPeerConnection(window,browserDetails.version)},shimReplaceTrack:function(window){if(window.RTCRtpSender&&!("replaceTrack"in window.RTCRtpSender.prototype)){window.RTCRtpSender.prototype.replaceTrack=window.RTCRtpSender.prototype.setTrack}}}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./../utils"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./../utils"))}else{global.safari_shim=factory(global.utils)}})(this,function(Utils){var utils=Utils;var safariShim={shimLocalStreamsAPI:function(window){if(typeof window!=="object"||!window.RTCPeerConnection){return}if(!("getLocalStreams"in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.getLocalStreams=function(){if(!this._localStreams){this._localStreams=[]}return this._localStreams}}if(!("getStreamById"in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.getStreamById=function(id){var result=null;if(this._localStreams){this._localStreams.forEach(function(stream){if(stream.id===id){result=stream}})}if(this._remoteStreams){this._remoteStreams.forEach(function(stream){if(stream.id===id){result=stream}})}return result}}if(!("addStream"in window.RTCPeerConnection.prototype)){var _addTrack=window.RTCPeerConnection.prototype.addTrack;window.RTCPeerConnection.prototype.addStream=function(stream){if(!this._localStreams){this._localStreams=[]}if(this._localStreams.indexOf(stream)===-1){this._localStreams.push(stream)}var self=this;stream.getTracks().forEach(function(track){_addTrack.call(self,track,stream)})};window.RTCPeerConnection.prototype.addTrack=function(track,stream){if(stream){if(!this._localStreams){this._localStreams=[stream]}else if(this._localStreams.indexOf(stream)===-1){this._localStreams.push(stream)}}_addTrack.call(this,track,stream)}}if(!("removeStream"in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.removeStream=function(stream){if(!this._localStreams){this._localStreams=[]}var index=this._localStreams.indexOf(stream);if(index===-1){return}this._localStreams.splice(index,1);var self=this;var tracks=stream.getTracks();this.getSenders().forEach(function(sender){if(tracks.indexOf(sender.track)!==-1){self.removeTrack(sender)}})}}},shimRemoteStreamsAPI:function(window){if(typeof window!=="object"||!window.RTCPeerConnection){return}if(!("getRemoteStreams"in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}}if(!("onaddstream"in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,"onaddstream",{get:function(){return this._onaddstream},set:function(f){if(this._onaddstream){this.removeEventListener("addstream",this._onaddstream);this.removeEventListener("track",this._onaddstreampoly)}this.addEventListener("addstream",this._onaddstream=f);this.addEventListener("track",this._onaddstreampoly=function(e){var stream=e.streams[0];if(!this._remoteStreams){this._remoteStreams=[]}if(this._remoteStreams.indexOf(stream)>=0){return}this._remoteStreams.push(stream);var event=new Event("addstream");event.stream=e.streams[0];this.dispatchEvent(event)}.bind(this))}})}},shimCallbacksAPI:function(window){if(typeof window!=="object"||!window.RTCPeerConnection){return}var prototype=window.RTCPeerConnection.prototype;var createOffer=prototype.createOffer;var createAnswer=prototype.createAnswer;var setLocalDescription=prototype.setLocalDescription;var setRemoteDescription=prototype.setRemoteDescription;var addIceCandidate=prototype.addIceCandidate;prototype.createOffer=function(successCallback,failureCallback){var options=arguments.length>=2?arguments[2]:arguments[0];var promise=createOffer.apply(this,[options]);if(!failureCallback){return promise}promise.then(successCallback,failureCallback);return Promise.resolve()};prototype.createAnswer=function(successCallback,failureCallback){var options=arguments.length>=2?arguments[2]:arguments[0];var promise=createAnswer.apply(this,[options]);if(!failureCallback){return promise}promise.then(successCallback,failureCallback);return Promise.resolve()};var withCallback=function(description,successCallback,failureCallback){var promise=setLocalDescription.apply(this,[description]);if(!failureCallback){return promise}promise.then(successCallback,failureCallback);return Promise.resolve()};prototype.setLocalDescription=withCallback;withCallback=function(description,successCallback,failureCallback){var promise=setRemoteDescription.apply(this,[description]);if(!failureCallback){return promise}promise.then(successCallback,failureCallback);return Promise.resolve()};prototype.setRemoteDescription=withCallback;withCallback=function(candidate,successCallback,failureCallback){var promise=addIceCandidate.apply(this,[candidate]);if(!failureCallback){return promise}promise.then(successCallback,failureCallback);return Promise.resolve()};prototype.addIceCandidate=withCallback},shimGetUserMedia:function(window){var navigator=window&&window.navigator;if(!navigator.getUserMedia){if(navigator.webkitGetUserMedia){navigator.getUserMedia=navigator.webkitGetUserMedia.bind(navigator)}else if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.getUserMedia=function(constraints,cb,errcb){navigator.mediaDevices.getUserMedia(constraints).then(cb,errcb)}.bind(navigator)}}},shimRTCIceServerUrls:function(window){var OrigPeerConnection=window.RTCPeerConnection;window.RTCPeerConnection=function(pcConfig,pcConstraints){if(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(!server.hasOwnProperty("urls")&&server.hasOwnProperty("url")){utils.deprecated("RTCIceServer.url","RTCIceServer.urls");server=JSON.parse(JSON.stringify(server));server.urls=server.url;delete server.url;newIceServers.push(server)}else{newIceServers.push(pcConfig.iceServers[i])}}pcConfig.iceServers=newIceServers}return new OrigPeerConnection(pcConfig,pcConstraints)};window.RTCPeerConnection.prototype=OrigPeerConnection.prototype;Object.defineProperty(window.RTCPeerConnection,"generateCertificate",{get:function(){return OrigPeerConnection.generateCertificate}})}};return{shimCallbacksAPI:safariShim.shimCallbacksAPI,shimLocalStreamsAPI:safariShim.shimLocalStreamsAPI,shimRemoteStreamsAPI:safariShim.shimRemoteStreamsAPI,shimGetUserMedia:safariShim.shimGetUserMedia,shimRTCIceServerUrls:safariShim.shimRTCIceServerUrls}});"use strict";(function(global,factory){if(typeof define==="function"&&define.amd){define(["./utils","./shims/chrome_shim","./shims/edge_shim","./shims/firefox_shim","./shims/safari_shim"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./utils"),require("./shims/chrome_shim"),require("./shims/edge_shim"),require("./shims/firefox_shim"),require("./shims/safari_shim"))}else{global.adapter=factory(global.utils,global.chrome_shim,global.edge_shim,global.firefox_shim,global.safari_shim)}})(this,function(Utils,chrome_shim,edge_shim,firefox_shim,safari_shim){var utils=Utils;var logging=utils.log;var browserDetails=utils.detectBrowser(window);var adapter={browserDetails:browserDetails,extractVersion:utils.extractVersion,disableLog:utils.disableLog,disableWarnings:utils.disableWarnings};var chromeShim=chrome_shim||null;var edgeShim=edge_shim||null;var firefoxShim=firefox_shim||null;var safariShim=safari_shim||null;switch(browserDetails.browser){case"chrome":if(!chromeShim||!chromeShim.shimPeerConnection){logging("Chrome shim is not included in this adapter release.");return adapter}logging("adapter.js shimming chrome.");adapter.browserShim=chromeShim;chromeShim.shimGetUserMedia(window);chromeShim.shimMediaStream(window);utils.shimCreateObjectURL(window);chromeShim.shimSourceObject(window);chromeShim.shimPeerConnection(window);chromeShim.shimOnTrack(window);chromeShim.shimGetSendersWithDtmf(window);break;case"firefox":if(!firefoxShim||!firefoxShim.shimPeerConnection){logging("Firefox shim is not included in this adapter release.");return adapter}logging("adapter.js shimming firefox.");adapter.browserShim=firefoxShim;firefoxShim.shimGetUserMedia(window);utils.shimCreateObjectURL(window);firefoxShim.shimSourceObject(window);firefoxShim.shimPeerConnection(window);firefoxShim.shimOnTrack(window);break;case"edge":if(!edgeShim||!edgeShim.shimPeerConnection){logging("MS edge shim is not included in this adapter release.");return adapter}logging("adapter.js shimming edge.");adapter.browserShim=edgeShim;edgeShim.shimGetUserMedia(window);utils.shimCreateObjectURL(window);edgeShim.shimPeerConnection(window);edgeShim.shimReplaceTrack(window);break;case"safari":if(!safariShim){logging("Safari shim is not included in this adapter release.");return adapter}logging("adapter.js shimming safari.");adapter.browserShim=safariShim;utils.shimCreateObjectURL(window);safariShim.shimRTCIceServerUrls(window);safariShim.shimCallbacksAPI(window);safariShim.shimLocalStreamsAPI(window);safariShim.shimRemoteStreamsAPI(window);safariShim.shimGetUserMedia(window);break;default:logging("Unsupported browser!");break}return adapter});(function(global,factory){if(typeof define==="function"&&define.amd){define([],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory()}else{global.FSRTC=factory()}})(this,function(){function findLine(sdpLines,prefix,substr){return findLineInRange(sdpLines,0,-1,prefix,substr)}function findLineInRange(sdpLines,startLine,endLine,prefix,substr){var realEndLine=endLine!=-1?endLine:sdpLines.length;for(var i=startLine;i<realEndLine;++i){if(sdpLines[i].indexOf(prefix)===0){if(!substr||sdpLines[i].toLowerCase().indexOf(substr.toLowerCase())!==-1){return i}}}return null}function getCodecPayloadType(sdpLine){var pattern=new RegExp("a=rtpmap:(\\d+) \\w+\\/\\d+");var result=sdpLine.match(pattern);return result&&result.length==2?result[1]:null}function setDefaultCodec(mLine,payload){var elements=mLine.split(" ");var newLine=[];var index=0;for(var i=0;i<elements.length;i++){if(index===3){newLine[index++]=payload}if(elements[i]!==payload)newLine[index++]=elements[i]}return newLine.join(" ")}function FSRTC(options){this.options=Object.assign({useVideo:null,useStereo:false,userData:null,localVideo:null,screenShare:false,useCamera:"any",iceServers:false,videoParams:{},audioParams:{},callbacks:{onICEComplete:function(){},onICE:function(){},onOfferSDP:function(){}}},options);this.audioEnabled=true;this.videoEnabled=true;this.mediaData={SDP:null,profile:{},candidateList:[]};this.constraints={offerToReceiveAudio:this.options.useSpeak==="none"?false:true,offerToReceiveVideo:this.options.useVideo?true:false};if(self.options.useVideo){self.options.useVideo.style.display="none"}setCompat();checkCompat()}FSRTC.validRes=[];FSRTC.prototype.useVideo=function(obj,local){var self=this;if(obj){self.options.useVideo=obj;self.options.localVideo=local;self.constraints.offerToReceiveVideo=true}else{self.options.useVideo=null;self.options.localVideo=null;self.constraints.offerToReceiveVideo=false}if(self.options.useVideo){self.options.useVideo.style.display="none"}};FSRTC.prototype.useStereo=function(on){var self=this;self.options.useStereo=on};FSRTC.prototype.stereoHack=function(sdp){var self=this;if(!self.options.useStereo){return sdp}var sdpLines=sdp.split("\r\n");var opusIndex=findLine(sdpLines,"a=rtpmap","opus/48000"),opusPayload;if(!opusIndex){return sdp}else{opusPayload=getCodecPayloadType(sdpLines[opusIndex])}var fmtpLineIndex=findLine(sdpLines,"a=fmtp:"+opusPayload.toString());if(fmtpLineIndex===null){sdpLines[opusIndex]=sdpLines[opusIndex]+"\r\na=fmtp:"+opusPayload.toString()+" stereo=1; sprop-stereo=1"}else{sdpLines[fmtpLineIndex]=sdpLines[fmtpLineIndex].concat("; stereo=1; sprop-stereo=1")}sdp=sdpLines.join("\r\n");return sdp};function setCompat(){}function checkCompat(){return true}function onStreamError(self,e){console.log("There has been a problem retrieving the streams - did you allow access? Check Device Resolution",e);doCallback(self,"onError",e)}function onStreamSuccess(self,stream){console.log("Stream Success");doCallback(self,"onStream",stream)}function onICE(self,candidate){self.mediaData.candidate=candidate;self.mediaData.candidateList.push(self.mediaData.candidate);doCallback(self,"onICE")}function doCallback(self,func,arg){if(func in self.options.callbacks){self.options.callbacks[func](self,arg)}}function onICEComplete(self,candidate){console.log("ICE Complete");doCallback(self,"onICEComplete")}function onChannelError(self,e){console.error("Channel Error",e);doCallback(self,"onError",e)}function onICESDP(self,sdp){self.mediaData.SDP=self.stereoHack(sdp.sdp);console.log("ICE SDP");doCallback(self,"onICESDP")}function onAnswerSDP(self,sdp){self.answer.SDP=self.stereoHack(sdp.sdp);console.log("ICE ANSWER SDP");doCallback(self,"onAnswerSDP",self.answer.SDP)}function onMessage(self,msg){console.log("Message");doCallback(self,"onICESDP",msg)}FSRTCattachMediaStream=function(element,stream){if(typeof element.srcObject!=="undefined"){element.srcObject=stream}else if(typeof element.src!=="undefined"){element.src=URL.createObjectURL(stream)}else{console.error("Error attaching stream to element.")}};function onRemoteStream(self,stream){if(self.options.useVideo){self.options.useVideo.style.display="block";var iOS=["iPad","iPhone","iPod"].indexOf(navigator.platform)>=0;if(iOS){self.options.useVideo.setAttribute("playsinline",true);self.options.useVideo.setAttribute("controls",true)}}var element=self.options.useAudio;console.log("REMOTE STREAM",stream,element);FSRTCattachMediaStream(element,stream);self.remoteStream=stream}function onOfferSDP(self,sdp){self.mediaData.SDP=self.stereoHack(sdp.sdp);console.log("Offer SDP");doCallback(self,"onOfferSDP")}FSRTC.prototype.answer=function(sdp,onSuccess,onError){this.peer.addAnswerSDP({type:"answer",sdp:sdp},onSuccess,onError)};FSRTC.prototype.stopPeer=function(){if(self.peer){console.log("stopping peer");self.peer.stop()}};FSRTC.prototype.stop=function(){var self=this;if(self.options.useVideo){self.options.useVideo.style.display="none";self.options.useVideo["src"]=""}if(self.localStream){if(typeof self.localStream.stop=="function"){self.localStream.stop()}else{if(self.localStream.active){var tracks=self.localStream.getTracks();console.log(tracks);tracks.forEach(function(track,index){console.log(track);track.stop()})}}self.localStream=null}if(self.options.localVideo){self.options.localVideo.style.display="none";self.options.localVideo["src"]=""}if(self.options.localVideoStream){if(typeof self.options.localVideoStream.stop=="function"){self.options.localVideoStream.stop()}else{if(self.options.localVideoStream.active){var tracks=self.options.localVideoStream.getTracks();console.log(tracks);tracks.forEach(function(track,index){console.log(track);track.stop()})}}}if(self.peer){console.log("stopping peer");self.peer.stop()}};FSRTC.prototype.getMute=function(){var self=this;return self.audioEnabled};FSRTC.prototype.setMute=function(what){var self=this;var audioTracks=self.localStream.getAudioTracks();for(var i=0,len=audioTracks.length;i<len;i++){switch(what){case"on":audioTracks[i].enabled=true;break;case"off":audioTracks[i].enabled=false;break;case"toggle":audioTracks[i].enabled=!audioTracks[i].enabled;default:break}self.audioEnabled=audioTracks[i].enabled}return!self.audioEnabled};FSRTC.prototype.getVideoMute=function(){var self=this;return self.videoEnabled};FSRTC.prototype.setVideoMute=function(what){var self=this;var videoTracks=self.localStream.getVideoTracks();for(var i=0,len=videoTracks.length;i<len;i++){switch(what){case"on":videoTracks[i].enabled=true;break;case"off":videoTracks[i].enabled=false;break;case"toggle":videoTracks[i].enabled=!videoTracks[i].enabled;default:break}self.videoEnabled=videoTracks[i].enabled}return!self.videoEnabled};FSRTC.prototype.createAnswer=function(params){var self=this;self.type="answer";self.remoteSDP=params.sdp;console.debug("inbound sdp: ",params.sdp);function onSuccess(stream){self.localStream=stream;self.peer=FSRTCPeerConnection({type:self.type,attachStream:self.localStream,onICE:function(candidate){return onICE(self,candidate)},onICEComplete:function(){return onICEComplete(self)},onRemoteStream:function(stream){return onRemoteStream(self,stream)},onICESDP:function(sdp){return onICESDP(self,sdp)},onChannelError:function(e){return onChannelError(self,e)},constraints:self.constraints,iceServers:self.options.iceServers,offerSDP:{type:"offer",sdp:self.remoteSDP}});onStreamSuccess(self,stream)}function onError(e){onStreamError(self,e)}var mediaParams=getMediaParams(self);console.log("Audio constraints",mediaParams.audio);console.log("Video constraints",mediaParams.video);if(self.options.useVideo&&self.options.localVideo){getUserMedia({constraints:{audio:false,video:{}},localVideo:self.options.localVideo,onsuccess:function(e){self.options.localVideoStream=e;console.log("local video ready")},onerror:function(e){console.error("local video error!")}})}getUserMedia({constraints:{audio:mediaParams.audio,video:mediaParams.video},video:mediaParams.useVideo,onsuccess:onSuccess,onerror:onError})};function getMediaParams(obj){var audio;if(obj.options.useMic&&obj.options.useMic==="none"){console.log("Microphone Disabled");audio=false}else if(obj.options.videoParams&&obj.options.screenShare){console.error("SCREEN SHARE",obj.options.videoParams);audio=false}else{audio={};if(obj.options.audioParams){audio=obj.options.audioParams}if(obj.options.useMic!=="any"){audio.deviceId={exact:obj.options.useMic}}}if(obj.options.useVideo&&obj.options.localVideo){getUserMedia({constraints:{audio:false,video:obj.options.videoParams},localVideo:obj.options.localVideo,onsuccess:function(e){self.options.localVideoStream=e;console.log("local video ready")},onerror:function(e){console.error("local video error!")}})}var video={};var bestFrameRate=obj.options.videoParams.vertoBestFrameRate;var minFrameRate=obj.options.videoParams.minFrameRate||15;delete obj.options.videoParams.vertoBestFrameRate;if(obj.options.screenShare){if(!obj.options.useCamera&&!!navigator.mozGetUserMedia){var dowin=window.confirm("Do you want to share an application window?  If not you can share an entire screen.");video={width:{min:obj.options.videoParams.minWidth,max:obj.options.videoParams.maxWidth},height:{min:obj.options.videoParams.minHeight,max:obj.options.videoParams.maxHeight},mediaSource:dowin?"window":"screen"}}else{var opt=[];if(obj.options.useCamera){opt.push({sourceId:obj.options.useCamera})}if(bestFrameRate){opt.push({minFrameRate:bestFrameRate});opt.push({maxFrameRate:bestFrameRate})}video={mandatory:obj.options.videoParams,optional:opt}}}else{video={width:{min:obj.options.videoParams.minWidth,max:obj.options.videoParams.maxWidth},height:{min:obj.options.videoParams.minHeight,max:obj.options.videoParams.maxHeight}};var useVideo=obj.options.useVideo;if(useVideo&&obj.options.useCamera&&obj.options.useCamera!=="none"){if(obj.options.useCamera!=="any"){video.deviceId=obj.options.useCamera}if(bestFrameRate){video.frameRate={ideal:bestFrameRate,min:minFrameRate,max:30}}}else{console.log("Camera Disabled");video=false;useVideo=false}}return{audio:audio,video:video,useVideo:useVideo}}FSRTC.prototype.call=function(profile){checkCompat();var self=this;var screen=false;self.type="offer";if(self.options.videoParams&&self.options.screenShare){screen=true}function onSuccess(stream){self.localStream=stream;if(screen){self.constraints.offerToReceiveVideo=false;self.constraints.offerToReceiveAudio=false;self.constraints.offerToSendAudio=false}self.peer=FSRTCPeerConnection({type:self.type,attachStream:self.localStream,onICE:function(candidate){return onICE(self,candidate)},onICEComplete:function(){return onICEComplete(self)},onRemoteStream:screen?function(stream){}:function(stream){return onRemoteStream(self,stream)},onOfferSDP:function(sdp){return onOfferSDP(self,sdp)},onICESDP:function(sdp){return onICESDP(self,sdp)},onChannelError:function(e){return onChannelError(self,e)},constraints:self.constraints,iceServers:self.options.iceServers});onStreamSuccess(self,stream)}function onError(e){onStreamError(self,e)}var mediaParams=getMediaParams(self);console.log("Audio constraints",mediaParams.audio);console.log("Video constraints",mediaParams.video);if(mediaParams.audio||mediaParams.video){getUserMedia({constraints:{audio:mediaParams.audio,video:mediaParams.video},video:mediaParams.useVideo,onsuccess:onSuccess,onerror:onError})}else{onSuccess(null)}};function FSRTCPeerConnection(options){var gathering=false,done=false;var config={};var default_ice={urls:["stun:stun.l.google.com:19302"]};if(options.iceServers){if(typeof options.iceServers==="boolean"){config.iceServers=[default_ice]}else{config.iceServers=options.iceServers}}var peer=new window.RTCPeerConnection(config);openOffererChannel();var x=0;function ice_handler(){done=true;gathering=null;if(options.onICEComplete){options.onICEComplete()}if(options.type=="offer"){options.onICESDP(peer.localDescription)}else{if(!x&&options.onICESDP){options.onICESDP(peer.localDescription)}}}peer.onicecandidate=function(event){if(done){return}if(!gathering){gathering=setTimeout(ice_handler,1e3)}if(event){if(event.candidate){options.onICE(event.candidate)}}else{done=true;if(gathering){clearTimeout(gathering);gathering=null}ice_handler()}};if(options.attachStream)peer.addStream(options.attachStream);if(options.attachStreams&&options.attachStream.length){var streams=options.attachStreams;for(var i=0;i<streams.length;i++){peer.addStream(streams[i])}}peer.onaddstream=function(event){var remoteMediaStream=event.stream;remoteMediaStream.oninactive=function(){if(options.onRemoteStreamEnded)options.onRemoteStreamEnded(remoteMediaStream)};if(options.onRemoteStream)options.onRemoteStream(remoteMediaStream)};function createOffer(){if(!options.onOfferSDP)return;peer.createOffer(function(sessionDescription){sessionDescription.sdp=serializeSdp(sessionDescription.sdp);peer.setLocalDescription(sessionDescription);options.onOfferSDP(sessionDescription)},onSdpError,options.constraints)}function createAnswer(){if(options.type!="answer")return;peer.setRemoteDescription(new window.RTCSessionDescription(options.offerSDP),onSdpSuccess,onSdpError);peer.createAnswer(function(sessionDescription){sessionDescription.sdp=serializeSdp(sessionDescription.sdp);peer.setLocalDescription(sessionDescription);if(options.onAnswerSDP){options.onAnswerSDP(sessionDescription)}},onSdpError)}if(options.onChannelMessage||!options.onChannelMessage){createOffer();createAnswer()}function setBandwidth(sdp){sdp=sdp.replace(/b=AS([^\r\n]+\r\n)/g,"");sdp=sdp.replace(/a=mid:data\r\n/g,"a=mid:data\r\nb=AS:1638400\r\n");return sdp}function getInteropSDP(sdp){var chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),extractedChars="";function getChars(){extractedChars+=chars[parseInt(Math.random()*40)]||"";if(extractedChars.length<40)getChars();return extractedChars}if(options.onAnswerSDP)sdp=sdp.replace(/(a=crypto:0 AES_CM_128_HMAC_SHA1_32)(.*?)(\r\n)/g,"");var inline=getChars()+"\r\n"+(extractedChars="");sdp=sdp.indexOf("a=crypto")==-1?sdp.replace(/c=IN/g,"a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:"+inline+"c=IN"):sdp;return sdp}function serializeSdp(sdp){return sdp}var channel;function openOffererChannel(){if(!options.onChannelMessage)return;_openOffererChannel();return}function _openOffererChannel(){channel=peer.createDataChannel(options.channel||"RTCDataChannel",{reliable:false});setChannelEvents()}function setChannelEvents(){channel.onmessage=function(event){if(options.onChannelMessage)options.onChannelMessage(event)};channel.onopen=function(){if(options.onChannelOpened)options.onChannelOpened(channel)};channel.onclose=function(event){if(options.onChannelClosed)options.onChannelClosed(event);console.warn("WebRTC DataChannel closed",event)};channel.onerror=function(event){if(options.onChannelError)options.onChannelError(event);console.error("WebRTC DataChannel error",event)}}function openAnswererChannel(){peer.ondatachannel=function(event){channel=event.channel;channel.binaryType="blob";setChannelEvents()};return}function useless(){log("Error in fake:true")}function onSdpSuccess(){}function onSdpError(e){if(options.onChannelError){options.onChannelError(e)}console.error("sdp error:",e)}return{addAnswerSDP:function(sdp,cbSuccess,cbError){peer.setRemoteDescription(new window.RTCSessionDescription(sdp),cbSuccess?cbSuccess:onSdpSuccess,cbError?cbError:onSdpError)},addICE:function(candidate){peer.addIceCandidate(new window.RTCIceCandidate({sdpMLineIndex:candidate.sdpMLineIndex,candidate:candidate.candidate}))},peer:peer,channel:channel,sendData:function(message){if(channel){channel.send(message)}},stop:function(){peer.close();if(options.attachStream){if(typeof options.attachStream.stop=="function"){options.attachStream.stop()}else{options.attachStream.active=false}}}}}var video_constraints={};function getUserMedia(options){var n=navigator,media;n.getMedia=n.getUserMedia;n.getMedia(options.constraints||{audio:true,video:video_constraints},streaming,options.onerror||function(e){console.error(e)});function streaming(stream){if(options.localVideo){options.localVideo["src"]=window.URL.createObjectURL(stream);options.localVideo.style.display="block"}if(options.onsuccess){options.onsuccess(stream)}media=stream}return media}FSRTC.resSupported=function(w,h){for(var i in FSRTC.validRes){if(FSRTC.validRes[i][0]==w&&FSRTC.validRes[i][1]==h){return true}}return false};FSRTC.bestResSupported=function(){var w=0,h=0;for(var i in FSRTC.validRes){if(FSRTC.validRes[i][0]>=w&&FSRTC.validRes[i][1]>=h){w=FSRTC.validRes[i][0];h=FSRTC.validRes[i][1]}}return[w,h]};var resList=[[160,120],[320,180],[320,240],[640,360],[640,480],[1280,720],[1920,1080]];var resI=0;var ttl=0;var checkRes=function(cam,func){if(resI>=resList.length){var res={validRes:FSRTC.validRes,bestResSupported:FSRTC.bestResSupported()};localStorage.setItem("res_"+cam,JSON.stringify(res));if(func)return func(res);return}var video={};if(cam){video.deviceId={exact:cam}}w=resList[resI][0];h=resList[resI][1];resI++;video={width:{exact:w},height:{exact:h}};getUserMedia({constraints:{audio:ttl++==0,video:video},onsuccess:function(e){e.getTracks().forEach(function(track){track.stop()});console.info(w+"x"+h+" supported.");FSRTC.validRes.push([w,h]);checkRes(cam,func)},onerror:function(e){console.warn(w+"x"+h+" not supported.");checkRes(cam,func)}})};FSRTC.getValidRes=function(cam,func){var used=[];var cached=localStorage.getItem("res_"+cam);if(cached){var cache=JSON.parse(cached);if(cache){FSRTC.validRes=cache.validRes;console.log("CACHED RES FOR CAM "+cam,cache)}else{console.error("INVALID CACHE")}return func?func(cache):null}FSRTC.validRes=[];resI=0;checkRes(cam,func)};FSRTC.checkPerms=function(runtime,check_audio,check_video){getUserMedia({constraints:{audio:check_audio,video:check_video},onsuccess:function(e){e.getTracks().forEach(function(track){track.stop()});console.info("media perm init complete");if(runtime){setTimeout(runtime,100,true)}},onerror:function(e){if(check_video&&check_audio){console.error("error, retesting with audio params only");return FSRTC.checkPerms(runtime,check_audio,false)}console.error("media perm init error");if(runtime){runtime(false)}}})};return FSRTC});(function(global,factory){if(typeof define==="function"&&define.amd){define(["jquery"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("jquery"))}else{global.JsonRpcClient=factory(global.jQuery)}})(this,function($){JsonRpcClient=function(options){var self=this;this.options=$.extend({ajaxUrl:null,socketUrl:null,onmessage:null,login:null,passwd:null,sessid:null,loginParams:null,userVariables:null,getSocket:function(onmessage_cb){return self._getSocket(onmessage_cb)}},options);self.ws_cnt=0;this.wsOnMessage=function(event){self._wsOnMessage(event)}};JsonRpcClient.prototype._ws_socket=null;JsonRpcClient.prototype._ws_callbacks={};JsonRpcClient.prototype._current_id=1;JsonRpcClient.prototype.speedTest=function(bytes,cb){var socket=this.options.getSocket(this.wsOnMessage);if(socket!==null){this.speedCB=cb;this.speedBytes=bytes;socket.send("#SPU "+bytes);var loops=bytes/1024;var rem=bytes%1024;var i;var data=new Array(1024).join(".");for(i=0;i<loops;i++){socket.send("#SPB "+data)}if(rem){socket.send("#SPB "+data)}socket.send("#SPE")}};JsonRpcClient.prototype.call=function(method,params,success_cb,error_cb){if(!params){params={}}if(this.options.sessid){params.sessid=this.options.sessid}var request={jsonrpc:"2.0",method:method,params:params,id:this._current_id++};if(!success_cb){success_cb=function(e){console.log("Success: ",e)}}if(!error_cb){error_cb=function(e){console.log("Error: ",e)}}var socket=this.options.getSocket(this.wsOnMessage);if(socket!==null){this._wsCall(socket,request,success_cb,error_cb);return}if(this.options.ajaxUrl===null){throw"JsonRpcClient.call used with no websocket and no http endpoint."}$.ajax({type:"POST",url:this.options.ajaxUrl,data:JSON.stringify(request),dataType:"json",cache:false,success:function(data){if("error"in data)error_cb(data.error,this);success_cb(data.result,this)},error:function(jqXHR,textStatus,errorThrown){try{var response=JSON.parse(jqXHR.responseText);if("console"in window)console.log(response);error_cb(response.error,this)}catch(err){error_cb({error:jqXHR.responseText},this)}}})};JsonRpcClient.prototype.notify=function(method,params){if(this.options.sessid){params.sessid=this.options.sessid}var request={jsonrpc:"2.0",method:method,params:params};var socket=this.options.getSocket(this.wsOnMessage);if(socket!==null){this._wsCall(socket,request);return}if(this.options.ajaxUrl===null){throw"JsonRpcClient.notify used with no websocket and no http endpoint."}$.ajax({type:"POST",url:this.options.ajaxUrl,data:JSON.stringify(request),dataType:"json",cache:false})};JsonRpcClient.prototype.batch=function(callback,all_done_cb,error_cb){var batch=new JsonRpcClient._batchObject(this,all_done_cb,error_cb);callback(batch);batch._execute()};JsonRpcClient.prototype.socketReady=function(){if(this._ws_socket===null||this._ws_socket.readyState>1){return false}return true};JsonRpcClient.prototype.closeSocket=function(){var self=this;if(self.socketReady()){self._ws_socket.onclose=function(w){console.log("Closing Socket")};self._ws_socket.close()}};JsonRpcClient.prototype.loginData=function(params){var self=this;self.options.login=params.login;self.options.passwd=params.passwd;self.options.loginParams=params.loginParams;self.options.userVariables=params.userVariables};JsonRpcClient.prototype.connectSocket=function(onmessage_cb){var self=this;if(self.to){clearTimeout(self.to)}if(!self.socketReady()){self.authing=false;if(self._ws_socket){delete self._ws_socket}self._ws_socket=new WebSocket(self.options.socketUrl);if(self._ws_socket){self._ws_socket.onmessage=onmessage_cb;self._ws_socket.onclose=function(w){if(!self.ws_sleep){self.ws_sleep=1e3}if(self.options.onWSClose){self.options.onWSClose(self)}console.error("Websocket Lost "+self.ws_cnt+" sleep: "+self.ws_sleep+"msec");self.to=setTimeout(function(){console.log("Attempting Reconnection....");self.connectSocket(onmessage_cb)},self.ws_sleep);self.ws_cnt++;if(self.ws_sleep<3e3&&self.ws_cnt%10===0){self.ws_sleep+=1e3}};self._ws_socket.onopen=function(){if(self.to){clearTimeout(self.to)}self.ws_sleep=1e3;self.ws_cnt=0;if(self.options.onWSConnect){self.options.onWSConnect(self)}var req;while(req=JsonRpcClient.q.pop()){self._ws_socket.send(req)}}}}return self._ws_socket?true:false};JsonRpcClient.prototype.stopRetrying=function(){if(self.to)clearTimeout(self.to)};JsonRpcClient.prototype._getSocket=function(onmessage_cb){if(this.options.socketUrl===null||!("WebSocket"in window))return null;this.connectSocket(onmessage_cb);return this._ws_socket};JsonRpcClient.q=[];JsonRpcClient.prototype._wsCall=function(socket,request,success_cb,error_cb){var request_json=JSON.stringify(request);if(socket.readyState<1){self=this;JsonRpcClient.q.push(request_json)}else{socket.send(request_json)}if("id"in request&&typeof success_cb!=="undefined"){this._ws_callbacks[request.id]={request:request_json,request_obj:request,success_cb:success_cb,error_cb:error_cb}}};JsonRpcClient.prototype._wsOnMessage=function(event){var response;if(event.data[0]=="#"&&event.data[1]=="S"&&event.data[2]=="P"){if(event.data[3]=="U"){this.up_dur=parseInt(event.data.substring(4))}else if(this.speedCB&&event.data[3]=="D"){this.down_dur=parseInt(event.data.substring(4));var up_kps=(this.speedBytes*8/(this.up_dur/1e3)/1024).toFixed(0);var down_kps=(this.speedBytes*8/(this.down_dur/1e3)/1024).toFixed(0);console.info("Speed Test: Up: "+up_kps+" Down: "+down_kps);this.speedCB(event,{upDur:this.up_dur,downDur:this.down_dur,upKPS:up_kps,downKPS:down_kps});this.speedCB=null}return}try{response=JSON.parse(event.data);if(typeof response==="object"&&"jsonrpc"in response&&response.jsonrpc==="2.0"){if("result"in response&&this._ws_callbacks[response.id]){var success_cb=this._ws_callbacks[response.id].success_cb;delete this._ws_callbacks[response.id];success_cb(response.result,this);return}else if("error"in response&&this._ws_callbacks[response.id]){var error_cb=this._ws_callbacks[response.id].error_cb;var orig_req=this._ws_callbacks[response.id].request;if(!self.authing&&response.error.code==-32e3&&self.options.login&&self.options.passwd){self.authing=true;this.call("login",{login:self.options.login,passwd:self.options.passwd,loginParams:self.options.loginParams,userVariables:self.options.userVariables},this._ws_callbacks[response.id].request_obj.method=="login"?function(e){self.authing=false;console.log("logged in");delete self._ws_callbacks[response.id];if(self.options.onWSLogin){self.options.onWSLogin(true,self)}}:function(e){self.authing=false;console.log("logged in, resending request id: "+response.id);var socket=self.options.getSocket(self.wsOnMessage);if(socket!==null){socket.send(orig_req)}if(self.options.onWSLogin){self.options.onWSLogin(true,self)}},function(e){console.log("error logging in, request id:",response.id);delete self._ws_callbacks[response.id];error_cb(response.error,this);if(self.options.onWSLogin){self.options.onWSLogin(false,self)}});return}delete this._ws_callbacks[response.id];error_cb(response.error,this);return}}}catch(err){console.log("ERROR: "+err);return}if(typeof this.options.onmessage==="function"){event.eventData=response;if(!event.eventData){event.eventData={}}var reply=this.options.onmessage(event);if(reply&&typeof reply==="object"&&event.eventData.id){var msg={jsonrpc:"2.0",id:event.eventData.id,result:reply};var socket=self.options.getSocket(self.wsOnMessage);if(socket!==null){socket.send(JSON.stringify(msg))}}}};JsonRpcClient._batchObject=function(jsonrpcclient,all_done_cb,error_cb){this._requests=[];this.jsonrpcclient=jsonrpcclient;this.all_done_cb=all_done_cb;this.error_cb=typeof error_cb==="function"?error_cb:function(){}};JsonRpcClient._batchObject.prototype.call=function(method,params,success_cb,error_cb){if(!params){params={}}if(this.options.sessid){params.sessid=this.options.sessid}if(!success_cb){success_cb=function(e){console.log("Success: ",e)}}if(!error_cb){error_cb=function(e){console.log("Error: ",e)}}this._requests.push({request:{jsonrpc:"2.0",method:method,params:params,id:this.jsonrpcclient._current_id++},success_cb:success_cb,error_cb:error_cb})};JsonRpcClient._batchObject.prototype.notify=function(method,params){if(this.options.sessid){params.sessid=this.options.sessid}this._requests.push({request:{jsonrpc:"2.0",method:method,params:params}})};JsonRpcClient._batchObject.prototype._execute=function(){var self=this;if(this._requests.length===0)return;var batch_request=[];var handlers={};var i=0;var call;var success_cb;var error_cb;var socket=self.jsonrpcclient.options.getSocket(self.jsonrpcclient.wsOnMessage);if(socket!==null){for(i=0;i<this._requests.length;i++){call=this._requests[i];success_cb="success_cb"in call?call.success_cb:undefined;error_cb="error_cb"in call?call.error_cb:undefined;self.jsonrpcclient._wsCall(socket,call.request,success_cb,error_cb)}if(typeof all_done_cb==="function")all_done_cb(result);return}for(i=0;i<this._requests.length;i++){call=this._requests[i];batch_request.push(call.request);if("id"in call.request){handlers[call.request.id]={success_cb:call.success_cb,error_cb:call.error_cb}}}success_cb=function(data){self._batchCb(data,handlers,self.all_done_cb)};if(self.jsonrpcclient.options.ajaxUrl===null){throw"JsonRpcClient.batch used with no websocket and no http endpoint."}$.ajax({url:self.jsonrpcclient.options.ajaxUrl,data:JSON.stringify(batch_request),dataType:"json",cache:false,type:"POST",error:function(jqXHR,textStatus,errorThrown){self.error_cb(jqXHR,textStatus,errorThrown)},success:success_cb})};JsonRpcClient._batchObject.prototype._batchCb=function(result,handlers,all_done_cb){for(var i=0;i<result.length;i++){var response=result[i];if("error"in response){if(response.id===null||!(response.id in handlers)){if("console"in window)console.log(response)}else{handlers[response.id].error_cb(response.error,this)}}else{if(!(response.id in handlers)&&"console"in window){console.log(response)}else{handlers[response.id].success_cb(response.result,this)}}}if(typeof all_done_cb==="function")all_done_cb(result)};return JsonRpcClient});(function(global,factory){if(typeof define==="function"&&define.amd){define(["jquery","./FSRTC","./JsonRpcClient","./adapter"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("jquery"),require("./FSRTC"),require("./JsonRpcClient"),require("./adapter"))}else{global.Verto=factory(global.jQuery,global.FSRTC,global.JsonRpcClient);if(!global.adapter)console.error("Shims adapter is not found!")}})(this,function($,FSRTC,JsonRpcClient){var generateGUID=typeof window.crypto!=="undefined"&&typeof window.crypto.getRandomValues!=="undefined"?function(){var buf=new Uint16Array(8);window.crypto.getRandomValues(buf);var S4=function(num){var ret=num.toString(16);while(ret.length<4){ret="0"+ret}return ret};return S4(buf[0])+S4(buf[1])+"-"+S4(buf[2])+"-"+S4(buf[3])+"-"+S4(buf[4])+"-"+S4(buf[5])+S4(buf[6])+S4(buf[7])}:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=="x"?r:r&3|8;return v.toString(16)})};function Verto(options,callbacks){var verto=this;Verto.saved.push(verto);verto.options=$.extend({login:null,passwd:null,socketUrl:null,tag:null,localTag:null,videoParams:{},audioParams:{},loginParams:{},deviceParams:{onResCheck:null},userVariables:{},iceServers:false,ringSleep:6e3,sessid:null,keepalive:0},options);if(verto.options.deviceParams.useCamera){FSRTC.getValidRes(verto.options.deviceParams.useCamera,verto.options.deviceParams.onResCheck)}if(!verto.options.deviceParams.useMic){verto.options.deviceParams.useMic="any"}if(!verto.options.deviceParams.useSpeak){verto.options.deviceParams.useSpeak="any"}if(verto.options.sessid){verto.sessid=verto.options.sessid}else{verto.sessid=generateGUID()}verto.dialogs={};verto.callbacks=callbacks||{};verto.eventSUBS={};verto.keepalive=null;verto.rpcClient=new JsonRpcClient({login:verto.options.login,passwd:verto.options.passwd,socketUrl:verto.options.socketUrl,loginParams:verto.options.loginParams,userVariables:verto.options.userVariables,sessid:verto.sessid,onmessage:function(e){return verto.handleMessage(e.eventData)},onWSConnect:function(o){o.call("login",{})},onWSLogin:function(success){if(verto.options.keepalive&&!verto.keepalive){verto.keepalive=setInterval(function(){verto.rpcClient.call("echo")},verto.options.keepalive)}if(verto.callbacks.onWSLogin){verto.callbacks.onWSLogin(verto,success)}},onWSClose:function(success){if(verto.keepalive){clearInterval(verto.keepalive);verto.keepalive=null}if(verto.callbacks.onWSClose){verto.callbacks.onWSClose(verto,success)}verto.purge()}});var tag=verto.options.tag;if(typeof tag==="function"){tag=tag()}if(verto.options.ringFile&&verto.options.tag){verto.ringer=$("#"+tag)}verto.rpcClient.call("login",{})}Verto.prototype.deviceParams=function(obj){var verto=this;for(var i in obj){verto.options.deviceParams[i]=obj[i]}if(obj.useCamera){FSRTC.getValidRes(verto.options.deviceParams.useCamera,obj?obj.onResCheck:undefined)}};Verto.prototype.videoParams=function(obj){var verto=this;for(var i in obj){verto.options.videoParams[i]=obj[i]}};Verto.prototype.iceServers=function(obj){var verto=this;verto.options.iceServers=obj};Verto.prototype.loginData=function(params){var verto=this;verto.options.login=params.login;verto.options.passwd=params.passwd;verto.rpcClient.loginData(params)};Verto.prototype.logout=function(msg){var verto=this;verto.rpcClient.closeSocket();if(verto.callbacks.onWSClose){verto.callbacks.onWSClose(verto,false)}verto.purge()};Verto.prototype.login=function(msg){var verto=this;verto.logout();verto.rpcClient.call("login",{})};Verto.prototype.message=function(msg){var verto=this;var err=0;if(!msg.to){console.error("Missing To");err++}if(!msg.body){console.error("Missing Body");err++}if(err){return false}verto.sendMethod("verto.info",{msg:msg});return true};Verto.prototype.processReply=function(method,success,e){var verto=this;var i;switch(method){case"verto.subscribe":for(i in e.unauthorizedChannels){drop_bad(verto,e.unauthorizedChannels[i])}for(i in e.subscribedChannels){mark_ready(verto,e.subscribedChannels[i])}break;case"verto.unsubscribe":break}};Verto.prototype.sendMethod=function(method,params){var verto=this;verto.rpcClient.call(method,params,function(e){verto.processReply(method,true,e)},function(e){verto.processReply(method,false,e)})};function do_sub(verto,channel,obj){}function drop_bad(verto,channel){console.error("drop unauthorized channel: "+channel);delete verto.eventSUBS[channel]}function mark_ready(verto,channel){for(var j in verto.eventSUBS[channel]){verto.eventSUBS[channel][j].ready=true;console.log("subscribed to channel: "+channel);if(verto.eventSUBS[channel][j].readyHandler){verto.eventSUBS[channel][j].readyHandler(verto,channel)}}}var SERNO=1;function do_subscribe(verto,channel,subChannels,sparams){var params=sparams||{};var local=params.local;var obj={eventChannel:channel,userData:params.userData,handler:params.handler,ready:false,readyHandler:params.readyHandler,serno:SERNO++};var isnew=false;if(!verto.eventSUBS[channel]){verto.eventSUBS[channel]=[];subChannels.push(channel);isnew=true}verto.eventSUBS[channel].push(obj);if(local){obj.ready=true;obj.local=true}if(!isnew&&verto.eventSUBS[channel][0].ready){obj.ready=true;if(obj.readyHandler){obj.readyHandler(verto,channel)}}return{serno:obj.serno,eventChannel:channel}}Verto.prototype.subscribe=function(channel,sparams){var verto=this;var r=[];var subChannels=[];var params=sparams||{};if(typeof channel==="string"){r.push(do_subscribe(verto,channel,subChannels,params))}else{for(var i in channel){r.push(do_subscribe(verto,channel,subChannels,params))}}if(subChannels.length){verto.sendMethod("verto.subscribe",{eventChannel:subChannels.length==1?subChannels[0]:subChannels,subParams:params.subParams})}return r};Verto.prototype.unsubscribe=function(handle){var verto=this;var i;if(!handle){for(i in verto.eventSUBS){if(verto.eventSUBS[i]){verto.unsubscribe(verto.eventSUBS[i])}}}else{var unsubChannels={};var sendChannels=[];var channel;if(typeof handle=="string"){delete verto.eventSUBS[handle];unsubChannels[handle]++}else{for(i in handle){if(typeof handle[i]=="string"){channel=handle[i];delete verto.eventSUBS[channel];unsubChannels[channel]++}else{var repl=[];channel=handle[i].eventChannel;for(var j in verto.eventSUBS[channel]){if(verto.eventSUBS[channel][j].serno==handle[i].serno){}else{repl.push(verto.eventSUBS[channel][j])}}verto.eventSUBS[channel]=repl;if(verto.eventSUBS[channel].length===0){delete verto.eventSUBS[channel];unsubChannels[channel]++}}}}for(var u in unsubChannels){console.log("Sending Unsubscribe for: ",u);sendChannels.push(u)}if(sendChannels.length){verto.sendMethod("verto.unsubscribe",{eventChannel:sendChannels.length==1?sendChannels[0]:sendChannels})}}};Verto.prototype.broadcast=function(channel,params){var verto=this;var msg={eventChannel:channel,data:{}};for(var i in params){msg.data[i]=params[i]}verto.sendMethod("verto.broadcast",msg)};Verto.prototype.purge=function(callID){var verto=this;var x=0;var i;for(i in verto.dialogs){if(!x){console.log("purging dialogs")}x++;verto.dialogs[i].setState(Verto.enum.state.purge)}for(i in verto.eventSUBS){if(verto.eventSUBS[i]){console.log("purging subscription: "+i);delete verto.eventSUBS[i]}}};Verto.prototype.hangup=function(callID){var verto=this;if(callID){var dialog=verto.dialogs[callID];if(dialog){dialog.hangup()}}else{for(var i in verto.dialogs){verto.dialogs[i].hangup()}}};Verto.prototype.newCall=function(args,callbacks){var verto=this;if(!verto.rpcClient.socketReady()){console.error("Not Connected...");return}if(args["useCamera"]){verto.options.deviceParams["useCamera"]=args["useCamera"]}var dialog=new Verto.dialog(Verto.enum.direction.outbound,this,args);dialog.invite();if(callbacks){dialog.callbacks=callbacks}return dialog};Verto.prototype.handleMessage=function(data){var verto=this;if(!(data&&data.method)){console.error("Invalid Data",data);return}if(data.params.callID){var dialog=verto.dialogs[data.params.callID];if(data.method==="verto.attach"&&dialog){delete dialog.verto.dialogs[dialog.callID];dialog.rtc.stop();dialog=null}if(dialog){switch(data.method){case"verto.bye":dialog.hangup(data.params);break;case"verto.answer":dialog.handleAnswer(data.params);break;case"verto.media":dialog.handleMedia(data.params);break;case"verto.display":dialog.handleDisplay(data.params);break;case"verto.info":dialog.handleInfo(data.params);break;default:console.debug("INVALID METHOD OR NON-EXISTANT CALL REFERENCE IGNORED",dialog,data.method);break}}else{switch(data.method){case"verto.attach":data.params.attach=true;if(data.params.sdp&&data.params.sdp.indexOf("m=video")>0){data.params.useVideo=true}if(data.params.sdp&&data.params.sdp.indexOf("stereo=1")>0){data.params.useStereo=true}dialog=new Verto.dialog(Verto.enum.direction.inbound,verto,data.params);dialog.setState(Verto.enum.state.recovering);break;case"verto.invite":if(data.params.sdp&&data.params.sdp.indexOf("m=video")>0){data.params.wantVideo=true}if(data.params.sdp&&data.params.sdp.indexOf("stereo=1")>0){data.params.useStereo=true}dialog=new Verto.dialog(Verto.enum.direction.inbound,verto,data.params);break;default:console.debug("INVALID METHOD OR NON-EXISTANT CALL REFERENCE IGNORED");break}}return{method:data.method}}else{switch(data.method){case"verto.punt":verto.purge();verto.logout();break;case"verto.event":var list=null;var key=null;if(data.params){key=data.params.eventChannel}if(key){list=verto.eventSUBS[key];if(!list){list=verto.eventSUBS[key.split(".")[0]]}}if(!list&&key&&key===verto.sessid){if(verto.callbacks.onMessage){verto.callbacks.onMessage(verto,null,Verto.enum.message.pvtEvent,data.params)}}else if(!list&&key&&verto.dialogs[key]){verto.dialogs[key].sendMessage(Verto.enum.message.pvtEvent,data.params)}else if(!list){if(!key){key="UNDEFINED"}console.error("UNSUBBED or invalid EVENT "+key+" IGNORED")}else{for(var i in list){var sub=list[i];if(!sub||!sub.ready){console.error("invalid EVENT for "+key+" IGNORED")}else if(sub.handler){sub.handler(verto,data.params,sub.userData)}else if(verto.callbacks.onEvent){verto.callbacks.onEvent(verto,data.params,sub.userData)}else{console.log("EVENT:",data.params)}}}break;case"verto.info":if(verto.callbacks.onMessage){verto.callbacks.onMessage(verto,null,Verto.enum.message.info,data.params.msg)}console.debug("MESSAGE from: "+data.params.msg.from,data.params.msg.body);break;case"verto.clientReady":if(verto.callbacks.onMessage){verto.callbacks.onMessage(verto,null,Verto.enum.message.clientReady,data.params)}console.debug("CLIENT READY",data.params);break;default:console.error("INVALID METHOD OR NON-EXISTANT CALL REFERENCE IGNORED",data.method);break}}};var del_array=function(array,name){var r=[];var len=array.length;for(var i=0;i<len;i++){if(array[i]!=name){r.push(array[i])}}return r};var hashArray=function(){var vha=this;var hash={};var array=[];vha.reorder=function(a){array=a;var h=hash;hash={};var len=array.length;for(var i=0;i<len;i++){var key=array[i];if(h[key]){hash[key]=h[key];delete h[key]}}h=undefined};vha.clear=function(){hash=undefined;array=undefined;hash={};array=[]};vha.add=function(name,val,insertAt){var redraw=false;if(!hash[name]){if(insertAt===undefined||insertAt<0||insertAt>=array.length){array.push(name)}else{var x=0;var n=[];var len=array.length;for(var i=0;i<len;i++){if(x++==insertAt){n.push(name)}n.push(array[i])}array=undefined;array=n;n=undefined;redraw=true}}hash[name]=val;return redraw};vha.del=function(name){var r=false;if(hash[name]){array=del_array(array,name);delete hash[name];r=true}else{console.error("can't del nonexistant key "+name)}return r};vha.get=function(name){return hash[name]};vha.order=function(){return array};vha.hash=function(){return hash};vha.indexOf=function(name){var len=array.length;for(var i=0;i<len;i++){if(array[i]==name){return i}}};vha.arrayLen=function(){return array.length};vha.asArray=function(){var r=[];var len=array.length;for(var i=0;i<len;i++){var key=array[i];r.push(hash[key])}return r};vha.each=function(cb){var len=array.length;for(var i=0;i<len;i++){cb(array[i],hash[array[i]])}};vha.dump=function(html){var str="";vha.each(function(name,val){str+="name: "+name+" val: "+JSON.stringify(val)+(html?"<br>":"\n")});return str}};Verto.liveArray=function(verto,context,name,config){var la=this;var lastSerno=0;var binding=null;var user_obj=config.userObj;var local=false;hashArray.call(la);la._add=la.add;la._del=la.del;la._reorder=la.reorder;la._clear=la.clear;la.context=context;la.name=name;la.user_obj=user_obj;la.verto=verto;la.broadcast=function(channel,obj){verto.broadcast(channel,obj)};la.errs=0;la.clear=function(){la._clear();lastSerno=0;if(la.onChange){la.onChange(la,{action:"clear"})}};la.checkSerno=function(serno){if(serno<0){return true}if(lastSerno>0&&serno!=lastSerno+1){if(la.onErr){la.onErr(la,{lastSerno:lastSerno,serno:serno})}la.errs++;console.debug(la.errs);if(la.errs<3){la.bootstrap(la.user_obj)}return false}else{lastSerno=serno;return true}};la.reorder=function(serno,a){if(la.checkSerno(serno)){la._reorder(a);if(la.onChange){la.onChange(la,{serno:serno,action:"reorder"})}}};la.init=function(serno,val,key,index){if(key===null||key===undefined){key=serno}if(la.checkSerno(serno)){if(la.onChange){la.onChange(la,{serno:serno,action:"init",index:index,key:key,data:val})}}};la.bootObj=function(serno,val){if(la.checkSerno(serno)){for(var i in val){la._add(val[i][0],val[i][1])}if(la.onChange){la.onChange(la,{serno:serno,action:"bootObj",data:val,redraw:true})}}};la.add=function(serno,val,key,index){if(key===null||key===undefined){key=serno}if(la.checkSerno(serno)){var redraw=la._add(key,val,index);if(la.onChange){la.onChange(la,{serno:serno,action:"add",index:index,key:key,data:val,redraw:redraw})}}};la.modify=function(serno,val,key,index){if(key===null||key===undefined){key=serno}if(la.checkSerno(serno)){la._add(key,val,index);if(la.onChange){la.onChange(la,{serno:serno,action:"modify",key:key,data:val,index:index})}}};la.del=function(serno,key,index){if(key===null||key===undefined){key=serno}if(la.checkSerno(serno)){if(index===null||index<0||index===undefined){index=la.indexOf(key)}var ok=la._del(key);if(ok&&la.onChange){la.onChange(la,{serno:serno,action:"del",key:key,index:index})}}};var eventHandler=function(v,e,la){var packet=e.data;if(packet.name!=la.name){return}switch(packet.action){case"init":la.init(packet.wireSerno,packet.data,packet.hashKey,packet.arrIndex);break;case"bootObj":la.bootObj(packet.wireSerno,packet.data);break;case"add":la.add(packet.wireSerno,packet.data,packet.hashKey,packet.arrIndex);break;case"modify":if(!(packet.arrIndex||packet.hashKey)){console.error("Invalid Packet",packet)}else{la.modify(packet.wireSerno,packet.data,packet.hashKey,packet.arrIndex)}break;case"del":if(!(packet.arrIndex||packet.hashKey)){console.error("Invalid Packet",packet)}else{la.del(packet.wireSerno,packet.hashKey,packet.arrIndex)}break;case"clear":la.clear();break;case"reorder":la.reorder(packet.wireSerno,packet.order);break;default:if(la.checkSerno(packet.wireSerno)){if(la.onChange){la.onChange(la,{serno:packet.wireSerno,action:packet.action,data:packet.data})}}break}};if(la.context){binding=la.verto.subscribe(la.context,{handler:eventHandler,userData:la,subParams:config.subParams})}la.destroy=function(){la._clear();la.verto.unsubscribe(binding)};la.sendCommand=function(cmd,obj){var self=la;self.broadcast(self.context,{liveArray:{command:cmd,context:self.context,name:self.name,obj:obj}})};la.bootstrap=function(obj){var self=la;la.sendCommand("bootstrap",obj)};la.changepage=function(obj){var self=la;self.clear();self.broadcast(self.context,{liveArray:{command:"changepage",context:la.context,name:la.name,obj:obj}})};la.heartbeat=function(obj){var self=la;var callback=function(){self.heartbeat.call(self,obj)};self.broadcast(self.context,{liveArray:{command:"heartbeat",context:self.context,name:self.name,obj:obj}});self.hb_pid=setTimeout(callback,3e4)};la.bootstrap(la.user_obj)};Verto.liveTable=function(verto,context,name,jq,config){var dt;var la=new Verto.liveArray(verto,context,name,{subParams:config.subParams});var lt=this;lt.liveArray=la;lt.dataTable=dt;lt.verto=verto;lt.destroy=function(){if(dt){dt.fnDestroy()}if(la){la.destroy()}dt=null;la=null};la.onErr=function(obj,args){console.error("Error: ",obj,args)};function genRow(data){if(typeof data[4]==="string"&&data[4].indexOf("{")>-1){var tmp=$.parseJSON(data[4]);data[4]=tmp.oldStatus;data[5]=null}return data}function genArray(obj){var data=obj.asArray();for(var i in data){data[i]=genRow(data[i])}return data}la.onChange=function(obj,args){var index=0;var iserr=0;if(!dt){if(!config.aoColumns){if(args.action!="init"){return}config.aoColumns=[];for(var i in args.data){config.aoColumns.push({sTitle:args.data[i]})}}dt=jq.dataTable(config)}if(dt&&(args.action=="del"||args.action=="modify")){index=args.index;if(index===undefined&&args.key){index=la.indexOf(args.key)}if(index===undefined){console.error("INVALID PACKET Missing INDEX\n",args);return}}if(config.onChange){config.onChange(obj,args)}try{switch(args.action){case"bootObj":if(!args.data){console.error("missing data");return}dt.fnClearTable();dt.fnAddData(genArray(obj));dt.fnAdjustColumnSizing();break;case"add":if(!args.data){console.error("missing data");return}if(args.redraw>-1){dt.fnClearTable();dt.fnAddData(genArray(obj))}else{dt.fnAddData(genRow(args.data))}dt.fnAdjustColumnSizing();break;case"modify":if(!args.data){return}dt.fnUpdate(genRow(args.data),index);dt.fnAdjustColumnSizing();break;case"del":dt.fnDeleteRow(index);dt.fnAdjustColumnSizing();break;case"clear":dt.fnClearTable();break;case"reorder":dt.fnClearTable();dt.fnAddData(genArray(obj));break;case"hide":jq.hide();break;case"show":jq.show();break}}catch(err){console.error("ERROR: "+err);iserr++}if(iserr){obj.errs++;if(obj.errs<3){obj.bootstrap(obj.user_obj)}}else{obj.errs=0}};la.onChange(la,{action:"init"})};var CONFMAN_SERNO=1;Verto.conf=function(verto,params){var conf=this;conf.params=$.extend({dialog:null,hasVid:false,laData:null,onBroadcast:null,onLaChange:null,onLaRow:null},params);conf.verto=verto;conf.serno=CONFMAN_SERNO++;createMainModeratorMethods();verto.subscribe(conf.params.laData.modChannel,{handler:function(v,e){if(conf.params.onBroadcast){conf.params.onBroadcast(verto,conf,e.data)}}});verto.subscribe(conf.params.laData.infoChannel,{handler:function(v,e){if(typeof conf.params.infoCallback==="function"){conf.params.infoCallback(v,e)}}});verto.subscribe(conf.params.laData.chatChannel,{handler:function(v,e){if(typeof conf.params.chatCallback==="function"){conf.params.chatCallback(v,e)}}})};Verto.conf.prototype.modCommand=function(cmd,id,value){var conf=this;conf.verto.rpcClient.call("verto.broadcast",{eventChannel:conf.params.laData.modChannel,data:{application:"conf-control",command:cmd,id:id,value:value}})};Verto.conf.prototype.destroy=function(){var conf=this;conf.destroyed=true;conf.params.onBroadcast(conf.verto,conf,"destroy");if(conf.params.laData.modChannel){conf.verto.unsubscribe(conf.params.laData.modChannel)}if(conf.params.laData.chatChannel){conf.verto.unsubscribe(conf.params.laData.chatChannel)}if(conf.params.laData.infoChannel){conf.verto.unsubscribe(conf.params.laData.infoChannel)}};function createMainModeratorMethods(){Verto.conf.prototype.listVideoLayouts=function(){this.modCommand("list-videoLayouts",null,null)};Verto.conf.prototype.play=function(file){this.modCommand("play",null,file)};Verto.conf.prototype.stop=function(){this.modCommand("stop",null,"all")};Verto.conf.prototype.deaf=function(memberID){this.modCommand("deaf",parseInt(memberID))};Verto.conf.prototype.undeaf=function(memberID){this.modCommand("undeaf",parseInt(memberID))};Verto.conf.prototype.record=function(file){this.modCommand("recording",null,["start",file])};Verto.conf.prototype.stopRecord=function(){this.modCommand("recording",null,["stop","all"])};Verto.conf.prototype.snapshot=function(file){if(!this.params.hasVid){throw"Conference has no video"}this.modCommand("vid-write-png",null,file)};Verto.conf.prototype.setVideoLayout=function(layout,canvasID){if(!this.params.hasVid){throw"Conference has no video"}if(canvasID){this.modCommand("vid-layout",null,[layout,canvasID])}else{this.modCommand("vid-layout",null,layout)}};Verto.conf.prototype.kick=function(memberID){this.modCommand("kick",parseInt(memberID))};Verto.conf.prototype.muteMic=function(memberID){this.modCommand("tmute",parseInt(memberID))};Verto.conf.prototype.muteVideo=function(memberID){if(!this.params.hasVid){throw"Conference has no video"}this.modCommand("tvmute",parseInt(memberID))};Verto.conf.prototype.presenter=function(memberID){if(!this.params.hasVid){throw"Conference has no video"}this.modCommand("vid-res-id",parseInt(memberID),"presenter")};Verto.conf.prototype.videoFloor=function(memberID){if(!this.params.hasVid){throw"Conference has no video"}this.modCommand("vid-floor",parseInt(memberID),"force")};Verto.conf.prototype.banner=function(memberID,text){if(!this.params.hasVid){throw"Conference has no video"}this.modCommand("vid-banner",parseInt(memberID),escape(text))};Verto.conf.prototype.volumeDown=function(memberID){this.modCommand("volume_out",parseInt(memberID),"down")};Verto.conf.prototype.volumeUp=function(memberID){this.modCommand("volume_out",parseInt(memberID),"up")};Verto.conf.prototype.gainDown=function(memberID){this.modCommand("volume_in",parseInt(memberID),"down")};Verto.conf.prototype.gainUp=function(memberID){this.modCommand("volume_in",parseInt(memberID),"up")};Verto.conf.prototype.transfer=function(memberID,exten){this.modCommand("transfer",parseInt(memberID),exten)};Verto.conf.prototype.sendChat=function(message,type){var conf=this;conf.verto.rpcClient.call("verto.broadcast",{eventChannel:conf.params.laData.chatChannel,data:{action:"send",message:message,type:type}})}}Verto.modfuncs={};Verto.confMan=function(verto,params){var confMan=this;confMan.params=$.extend({tableID:null,statusID:null,mainModID:null,dialog:null,hasVid:false,laData:null,onBroadcast:null,onLaChange:null,onLaRow:null},params);confMan.verto=verto;confMan.serno=CONFMAN_SERNO++;confMan.canvasCount=confMan.params.laData.canvasCount;function genMainMod(jq){var play_id="play_"+confMan.serno;var stop_id="stop_"+confMan.serno;var recording_id="recording_"+confMan.serno;var snapshot_id="snapshot_"+confMan.serno;var rec_stop_id="recording_stop"+confMan.serno;var div_id="confman_"+confMan.serno;var html="<div id='"+div_id+"'><br>"+"<button class='ctlbtn' id='"+play_id+"'>Play</button>"+"<button class='ctlbtn' id='"+stop_id+"'>Stop</button>"+"<button class='ctlbtn' id='"+recording_id+"'>Record</button>"+"<button class='ctlbtn' id='"+rec_stop_id+"'>Record Stop</button>"+(confMan.params.hasVid?"<button class='ctlbtn' id='"+snapshot_id+"'>PNG Snapshot</button>":"")+"<br><br></div>";jq.html(html);Verto.modfuncs.change_video_layout=function(id,canvas_id){var val=$("#"+id+" option:selected").text();if(val!=="none"){confMan.modCommand("vid-layout",null,[val,canvas_id])}};if(confMan.params.hasVid){for(var j=0;j<confMan.canvasCount;j++){var vlayout_id="confman_vid_layout_"+j+"_"+confMan.serno;var vlselect_id="confman_vl_select_"+j+"_"+confMan.serno;var vlhtml="<div id='"+vlayout_id+"'><br>"+"<b>Video Layout Canvas "+(j+1)+"</b> <select onChange='Verto.modfuncs.change_video_layout(\""+vlayout_id+'", "'+(j+1)+"\")' id='"+vlselect_id+"'></select> "+"<br><br></div>";jq.append(vlhtml)}$("#"+snapshot_id).click(function(){var file=prompt("Please enter file name","");if(file){confMan.modCommand("vid-write-png",null,file)}})}$("#"+play_id).click(function(){var file=prompt("Please enter file name","");if(file){confMan.modCommand("play",null,file)}});$("#"+stop_id).click(function(){confMan.modCommand("stop",null,"all")});$("#"+recording_id).click(function(){var file=prompt("Please enter file name","");if(file){confMan.modCommand("recording",null,["start",file])}});$("#"+rec_stop_id).click(function(){confMan.modCommand("recording",null,["stop","all"])})}function genControls(jq,rowid){var x=parseInt(rowid);var kick_id="kick_"+x;var canvas_in_next_id="canvas_in_next_"+x;var canvas_in_prev_id="canvas_in_prev_"+x;var canvas_out_next_id="canvas_out_next_"+x;var canvas_out_prev_id="canvas_out_prev_"+x;var canvas_in_set_id="canvas_in_set_"+x;var canvas_out_set_id="canvas_out_set_"+x;var layer_set_id="layer_set_"+x;var layer_next_id="layer_next_"+x;var layer_prev_id="layer_prev_"+x;var tmute_id="tmute_"+x;var tvmute_id="tvmute_"+x;var vbanner_id="vbanner_"+x;var tvpresenter_id="tvpresenter_"+x;var tvfloor_id="tvfloor_"+x;var box_id="box_"+x;var gainup_id="gain_in_up"+x;var gaindn_id="gain_in_dn"+x;var volup_id="vol_in_up"+x;var voldn_id="vol_in_dn"+x;var transfer_id="transfer"+x;var html="<div id='"+box_id+"'>";html+="<b>General Controls</b><hr noshade>";html+="<button class='ctlbtn' id='"+kick_id+"'>Kick</button>"+"<button class='ctlbtn' id='"+tmute_id+"'>Mute</button>"+"<button class='ctlbtn' id='"+gainup_id+"'>Gain -</button>"+"<button class='ctlbtn' id='"+gaindn_id+"'>Gain +</button>"+"<button class='ctlbtn' id='"+voldn_id+"'>Vol -</button>"+"<button class='ctlbtn' id='"+volup_id+"'>Vol +</button>"+"<button class='ctlbtn' id='"+transfer_id+"'>Transfer</button>";if(confMan.params.hasVid){html+="<br><br><b>Video Controls</b><hr noshade>";html+="<button class='ctlbtn' id='"+tvmute_id+"'>VMute</button>"+"<button class='ctlbtn' id='"+tvpresenter_id+"'>Presenter</button>"+"<button class='ctlbtn' id='"+tvfloor_id+"'>Vid Floor</button>"+"<button class='ctlbtn' id='"+vbanner_id+"'>Banner</button>";if(confMan.canvasCount>1){html+="<br><br><b>Canvas Controls</b><hr noshade>"+"<button class='ctlbtn' id='"+canvas_in_set_id+"'>Set Input Canvas</button>"+"<button class='ctlbtn' id='"+canvas_in_prev_id+"'>Prev Input Canvas</button>"+"<button class='ctlbtn' id='"+canvas_in_next_id+"'>Next Input Canvas</button>"+"<br>"+"<button class='ctlbtn' id='"+canvas_out_set_id+"'>Set Watching Canvas</button>"+"<button class='ctlbtn' id='"+canvas_out_prev_id+"'>Prev Watching Canvas</button>"+"<button class='ctlbtn' id='"+canvas_out_next_id+"'>Next Watching Canvas</button>"}html+="<br>"+"<button class='ctlbtn' id='"+layer_set_id+"'>Set Layer</button>"+"<button class='ctlbtn' id='"+layer_prev_id+"'>Prev Layer</button>"+"<button class='ctlbtn' id='"+layer_next_id+"'>Next Layer</button>"+"</div>"}jq.html(html);if(!jq.data("mouse")){$("#"+box_id).hide()}jq.mouseover(function(e){jq.data({mouse:true});$("#"+box_id).show()});jq.mouseout(function(e){jq.data({mouse:false});$("#"+box_id).hide()});$("#"+transfer_id).click(function(){var xten=prompt("Enter Extension");if(xten){confMan.modCommand("transfer",x,xten)}});$("#"+kick_id).click(function(){confMan.modCommand("kick",x)});$("#"+layer_set_id).click(function(){var cid=prompt("Please enter layer ID","");if(cid){confMan.modCommand("vid-layer",x,cid)}});$("#"+layer_next_id).click(function(){confMan.modCommand("vid-layer",x,"next")});$("#"+layer_prev_id).click(function(){confMan.modCommand("vid-layer",x,"prev")});$("#"+canvas_in_set_id).click(function(){var cid=prompt("Please enter canvas ID","");if(cid){confMan.modCommand("vid-canvas",x,cid)}});$("#"+canvas_out_set_id).click(function(){var cid=prompt("Please enter canvas ID","");if(cid){confMan.modCommand("vid-watching-canvas",x,cid)}});$("#"+canvas_in_next_id).click(function(){confMan.modCommand("vid-canvas",x,"next")});$("#"+canvas_in_prev_id).click(function(){confMan.modCommand("vid-canvas",x,"prev")});$("#"+canvas_out_next_id).click(function(){confMan.modCommand("vid-watching-canvas",x,"next")});$("#"+canvas_out_prev_id).click(function(){confMan.modCommand("vid-watching-canvas",x,"prev")});$("#"+tmute_id).click(function(){confMan.modCommand("tmute",x)});if(confMan.params.hasVid){$("#"+tvmute_id).click(function(){confMan.modCommand("tvmute",x)});$("#"+tvpresenter_id).click(function(){confMan.modCommand("vid-res-id",x,"presenter")});$("#"+tvfloor_id).click(function(){confMan.modCommand("vid-floor",x,"force")});$("#"+vbanner_id).click(function(){var text=prompt("Please enter text","");if(text){confMan.modCommand("vid-banner",x,escape(text))}})}$("#"+gainup_id).click(function(){confMan.modCommand("volume_in",x,"up")});$("#"+gaindn_id).click(function(){confMan.modCommand("volume_in",x,"down")});$("#"+volup_id).click(function(){confMan.modCommand("volume_out",x,"up")});$("#"+voldn_id).click(function(){confMan.modCommand("volume_out",x,"down")});return html}var atitle="";var awidth=0;verto.subscribe(confMan.params.laData.infoChannel,{handler:function(v,e){if(typeof confMan.params.infoCallback==="function"){confMan.params.infoCallback(v,e)}}});verto.subscribe(confMan.params.laData.chatChannel,{handler:function(v,e){if(typeof confMan.params.chatCallback==="function"){confMan.params.chatCallback(v,e)}}});if(confMan.params.laData.role==="moderator"){atitle="Action";awidth=600;if(confMan.params.mainModID){genMainMod($(confMan.params.mainModID));$(confMan.params.displayID).html("Moderator Controls Ready<br><br>")}else{$(confMan.params.mainModID).html("")}verto.subscribe(confMan.params.laData.modChannel,{handler:function(v,e){if(confMan.params.onBroadcast){confMan.params.onBroadcast(verto,confMan,e.data)}if(e.data["conf-command"]==="list-videoLayouts"){for(var j=0;j<confMan.canvasCount;j++){var vlselect_id="#confman_vl_select_"+j+"_"+confMan.serno;var vlayout_id="#confman_vid_layout_"+j+"_"+confMan.serno;var x=0;var options;$(vlselect_id).selectmenu({});$(vlselect_id).selectmenu("enable");$(vlselect_id).empty();$(vlselect_id).append(new Option("Choose a Layout","none"));if(e.data.responseData){var rdata=[];for(var i in e.data.responseData){rdata.push(e.data.responseData[i].name)}options=rdata.sort(function(a,b){var ga=a.substring(0,6)=="group:"?true:false;var gb=b.substring(0,6)=="group:"?true:false;if((ga||gb)&&ga!=gb){return ga?-1:1}return a==b?0:a>b?1:-1});for(var i in options){$(vlselect_id).append(new Option(options[i],options[i]));x++}}if(x){$(vlselect_id).selectmenu("refresh",true)}else{$(vlayout_id).hide()}}}else{if(!confMan.destroyed&&confMan.params.displayID){$(confMan.params.displayID).html(e.data.response+"<br><br>");if(confMan.lastTimeout){clearTimeout(confMan.lastTimeout);confMan.lastTimeout=0}confMan.lastTimeout=setTimeout(function(){$(confMan.params.displayID).html(confMan.destroyed?"":"Moderator Controls Ready<br><br>")},4e3)}}}});if(confMan.params.hasVid){confMan.modCommand("list-videoLayouts",null,null)}}var row_callback=null;if(confMan.params.laData.role==="moderator"){row_callback=function(nRow,aData,iDisplayIndex,iDisplayIndexFull){if(!aData[5]){var $row=$("td:eq(5)",nRow);genControls($row,aData);if(confMan.params.onLaRow){confMan.params.onLaRow(verto,confMan,$row,aData)}}}}confMan.lt=new Verto.liveTable(verto,confMan.params.laData.laChannel,confMan.params.laData.laName,$(confMan.params.tableID),{subParams:{callID:confMan.params.dialog?confMan.params.dialog.callID:null},onChange:function(obj,args){$(confMan.params.statusID).text("Conference Members: "+" ("+obj.arrayLen()+" Total)");if(confMan.params.onLaChange){confMan.params.onLaChange(verto,confMan,Verto.enum.confEvent.laChange,obj,args)}},aaData:[],aoColumns:[{sTitle:"ID",sWidth:"50"},{sTitle:"Number",sWidth:"250"},{sTitle:"Name",sWidth:"250"},{sTitle:"Codec",sWidth:"100"},{sTitle:"Status",sWidth:confMan.params.hasVid?"200px":"150px"},{sTitle:atitle,sWidth:awidth}],bAutoWidth:true,bDestroy:true,bSort:false,bInfo:false,bFilter:false,bLengthChange:false,bPaginate:false,iDisplayLength:1400,oLanguage:{sEmptyTable:"The Conference is Empty....."},fnRowCallback:row_callback})};Verto.confMan.prototype.modCommand=function(cmd,id,value){var confMan=this;confMan.verto.rpcClient.call("verto.broadcast",{eventChannel:confMan.params.laData.modChannel,data:{application:"conf-control",command:cmd,id:id,value:value}})};Verto.confMan.prototype.sendChat=function(message,type){var confMan=this;confMan.verto.rpcClient.call("verto.broadcast",{eventChannel:confMan.params.laData.chatChannel,data:{action:"send",message:message,type:type}})};Verto.confMan.prototype.destroy=function(){var confMan=this;confMan.destroyed=true;if(confMan.lt){confMan.lt.destroy()}if(confMan.params.laData.chatChannel){confMan.verto.unsubscribe(confMan.params.laData.chatChannel)}if(confMan.params.laData.modChannel){confMan.verto.unsubscribe(confMan.params.laData.modChannel)}if(confMan.params.mainModID){$(confMan.params.mainModID).html("")}};Verto.dialog=function(direction,verto,params){var dialog=this;dialog.params=$.extend({useVideo:verto.options.useVideo,useStereo:verto.options.useStereo,screenShare:false,useCamera:false,useMic:verto.options.deviceParams.useMic,useSpeak:verto.options.deviceParams.useSpeak,tag:verto.options.tag,localTag:verto.options.localTag,login:verto.options.login,videoParams:verto.options.videoParams},params);if(!dialog.params.screenShare){dialog.params.useCamera=verto.options.deviceParams.useCamera}dialog.verto=verto;dialog.direction=direction;dialog.lastState=null;dialog.state=dialog.lastState=Verto.enum.state.new;dialog.callbacks=verto.callbacks;dialog.answered=false;dialog.attach=params.attach||false;dialog.screenShare=params.screenShare||false;dialog.useCamera=dialog.params.useCamera;dialog.useMic=dialog.params.useMic;dialog.useSpeak=dialog.params.useSpeak;if(dialog.params.callID){dialog.callID=dialog.params.callID}else{dialog.callID=dialog.params.callID=generateGUID()}if(typeof dialog.params.tag==="function"){dialog.params.tag=dialog.params.tag()}if(dialog.params.tag){dialog.audioStream=document.getElementById(dialog.params.tag);if(dialog.params.useVideo){dialog.videoStream=dialog.audioStream}}if(dialog.params.localTag){dialog.localVideo=document.getElementById(dialog.params.localTag)}dialog.verto.dialogs[dialog.callID]=dialog;var RTCcallbacks={};if(dialog.direction==Verto.enum.direction.inbound){if(dialog.params.display_direction==="outbound"){dialog.params.remote_caller_id_name=dialog.params.caller_id_name;dialog.params.remote_caller_id_number=dialog.params.caller_id_number}else{dialog.params.remote_caller_id_name=dialog.params.callee_id_name;dialog.params.remote_caller_id_number=dialog.params.callee_id_number}if(!dialog.params.remote_caller_id_name){dialog.params.remote_caller_id_name="Nobody"}if(!dialog.params.remote_caller_id_number){dialog.params.remote_caller_id_number="UNKNOWN"}RTCcallbacks.onMessage=function(rtc,msg){console.debug(msg)};RTCcallbacks.onAnswerSDP=function(rtc,sdp){console.error("answer sdp",sdp)}}else{dialog.params.remote_caller_id_name="Outbound Call";dialog.params.remote_caller_id_number=dialog.params.destination_number}RTCcallbacks.onICESDP=function(rtc){console.log("RECV "+rtc.type+" SDP",rtc.mediaData.SDP);if(dialog.state==Verto.enum.state.requesting||dialog.state==Verto.enum.state.answering||dialog.state==Verto.enum.state.active){location.reload();return}if(rtc.type=="offer"){if(dialog.state==Verto.enum.state.active){dialog.setState(Verto.enum.state.requesting);dialog.sendMethod("verto.attach",{sdp:rtc.mediaData.SDP})}else{dialog.setState(Verto.enum.state.requesting);dialog.sendMethod("verto.invite",{sdp:rtc.mediaData.SDP})}}else{dialog.setState(Verto.enum.state.answering);dialog.sendMethod(dialog.attach?"verto.attach":"verto.answer",{sdp:dialog.rtc.mediaData.SDP})}};RTCcallbacks.onICE=function(rtc){if(rtc.type=="offer"){console.log("offer",rtc.mediaData.candidate);return}};RTCcallbacks.onStream=function(rtc,stream){if(dialog.verto.options.permissionCallback&&typeof dialog.verto.options.permissionCallback.onGranted==="function"){dialog.verto.options.permissionCallback.onGranted(stream)}console.log("stream started")};RTCcallbacks.onError=function(e){if(dialog.verto.options.permissionCallback&&typeof dialog.verto.options.permissionCallback.onDenied==="function"){dialog.verto.options.permissionCallback.onDenied()}console.error("ERROR:",e);dialog.hangup({cause:"Device or Permission Error"})};dialog.rtc=new FSRTC({callbacks:RTCcallbacks,localVideo:dialog.screenShare?null:dialog.localVideo,useVideo:dialog.params.useVideo?dialog.videoStream:null,useAudio:dialog.audioStream,useStereo:dialog.params.useStereo,videoParams:dialog.params.videoParams,audioParams:verto.options.audioParams,iceServers:verto.options.iceServers,screenShare:dialog.screenShare,useCamera:dialog.useCamera,useMic:dialog.useMic,useSpeak:dialog.useSpeak});dialog.rtc.verto=dialog.verto;if(dialog.direction==Verto.enum.direction.inbound){if(dialog.attach){dialog.answer()}else{dialog.ring()}}};Verto.dialog.prototype.invite=function(){var dialog=this;dialog.rtc.call()};Verto.dialog.prototype.sendMethod=function(method,obj){var dialog=this;obj.dialogParams={};for(var i in dialog.params){if(i=="sdp"&&method!="verto.invite"&&method!="verto.attach"){continue}if(obj.noDialogParams&&i!="callID"){continue}obj.dialogParams[i]=dialog.params[i]}delete obj.noDialogParams;dialog.verto.rpcClient.call(method,obj,function(e){dialog.processReply(method,true,e)},function(e){dialog.processReply(method,false,e)})};function checkStateChange(oldS,newS){if(newS==Verto.enum.state.purge||Verto.enum.states[oldS.name][newS.name]){return true}return false}function find_name(id){for(var i in Verto.audioOutDevices){var source=Verto.audioOutDevices[i];if(source.id===id){return source.label}}return id}Verto.dialog.prototype.setAudioPlaybackDevice=function(sinkId,callback,arg){var dialog=this;var element=dialog.audioStream;if(typeof element.sinkId!=="undefined"){var devname=find_name(sinkId);console.info("Dialog: "+dialog.callID+" Setting speaker:",element,devname);element.setSinkId(sinkId).then(function(){console.log("Dialog: "+dialog.callID+" Success, audio output device attached: "+sinkId);if(callback){callback(true,devname,arg)}}).catch(function(error){var errorMessage=error;if(error.name==="SecurityError"){errorMessage="Dialog: "+dialog.callID+" You need to use HTTPS for selecting audio output "+"device: "+error}if(callback){callback(false,null,arg)}console.error(errorMessage)})}else{console.warn("Dialog: "+dialog.callID+" Browser does not support output device selection.");if(callback){callback(false,null,arg)}}};Verto.dialog.prototype.setState=function(state){var dialog=this;if(dialog.state==Verto.enum.state.ringing){dialog.stopRinging()}if(dialog.state==state||!checkStateChange(dialog.state,state)){console.error("Dialog "+dialog.callID+": INVALID state change from "+dialog.state.name+" to "+state.name);dialog.hangup();return false}console.log("Dialog "+dialog.callID+": state change from "+dialog.state.name+" to "+state.name);dialog.lastState=dialog.state;dialog.state=state;if(dialog.callbacks.onDialogState){dialog.callbacks.onDialogState(this)}switch(dialog.state){case Verto.enum.state.early:case Verto.enum.state.active:var speaker=dialog.useSpeak;console.info("Using Speaker: ",speaker);if(speaker&&speaker!=="any"&&speaker!=="none"){setTimeout(function(){dialog.setAudioPlaybackDevice(speaker)},500)}break;case Verto.enum.state.trying:setTimeout(function(){if(dialog.state==Verto.enum.state.trying){dialog.setState(Verto.enum.state.hangup)}},3e4);break;case Verto.enum.state.purge:dialog.setState(Verto.enum.state.destroy);break;case Verto.enum.state.hangup:if(dialog.lastState.val>Verto.enum.state.requesting.val&&dialog.lastState.val<Verto.enum.state.hangup.val){dialog.sendMethod("verto.bye",{})}dialog.setState(Verto.enum.state.destroy);break;case Verto.enum.state.destroy:if(typeof dialog.verto.options.tag==="function"){$("#"+dialog.params.tag).remove()}delete dialog.verto.dialogs[dialog.callID];if(dialog.params.screenShare){dialog.rtc.stopPeer()}else{dialog.rtc.stop()}break}return true};Verto.dialog.prototype.processReply=function(method,success,e){var dialog=this;switch(method){case"verto.answer":case"verto.attach":if(success){dialog.setState(Verto.enum.state.active)}else{dialog.hangup()}break;case"verto.invite":if(success){dialog.setState(Verto.enum.state.trying)}else{dialog.setState(Verto.enum.state.destroy)}break;case"verto.bye":dialog.hangup();break;case"verto.modify":if(e.holdState){if(e.holdState=="held"){if(dialog.state!=Verto.enum.state.held){dialog.setState(Verto.enum.state.held)}}else if(e.holdState=="active"){if(dialog.state!=Verto.enum.state.active){dialog.setState(Verto.enum.state.active)}}}if(success){}break;default:break}};Verto.dialog.prototype.hangup=function(params){var dialog=this;if(params){if(params.causeCode){dialog.causeCode=params.causeCode}if(params.cause){dialog.cause=params.cause}}if(!dialog.cause&&!dialog.causeCode){dialog.cause="NORMAL_CLEARING"}if(dialog.state.val>=Verto.enum.state.new.val&&dialog.state.val<Verto.enum.state.hangup.val){dialog.setState(Verto.enum.state.hangup)}else if(dialog.state.val<Verto.enum.state.destroy){dialog.setState(Verto.enum.state.destroy)}};Verto.dialog.prototype.stopRinging=function(){var dialog=this;if(dialog.verto.ringer){dialog.verto.ringer.stop()}};Verto.dialog.prototype.indicateRing=function(){var dialog=this;if(dialog.verto.ringer){dialog.verto.ringer.attr("src",dialog.verto.options.ringFile)[0].play();setTimeout(function(){dialog.stopRinging();if(dialog.state==Verto.enum.state.ringing){dialog.indicateRing()}},dialog.verto.options.ringSleep)}};Verto.dialog.prototype.ring=function(){var dialog=this;dialog.setState(Verto.enum.state.ringing);dialog.indicateRing()};Verto.dialog.prototype.useVideo=function(on){var dialog=this;dialog.params.useVideo=on;if(on){dialog.videoStream=dialog.audioStream}else{dialog.videoStream=null}dialog.rtc.useVideo(dialog.videoStream,dialog.localVideo)};Verto.dialog.prototype.setMute=function(what){var dialog=this;return dialog.rtc.setMute(what)};Verto.dialog.prototype.getMute=function(){var dialog=this;return dialog.rtc.getMute()};Verto.dialog.prototype.setVideoMute=function(what){var dialog=this;return dialog.rtc.setVideoMute(what)};Verto.dialog.prototype.getVideoMute=function(){var dialog=this;return dialog.rtc.getVideoMute()};Verto.dialog.prototype.useStereo=function(on){var dialog=this;dialog.params.useStereo=on;dialog.rtc.useStereo(on)};Verto.dialog.prototype.dtmf=function(digits){var dialog=this;if(digits){dialog.sendMethod("verto.info",{dtmf:digits})}};Verto.dialog.prototype.rtt=function(obj){var dialog=this;var pobj={};if(!obj){return false}pobj.code=obj.code;pobj.chars=obj.chars;if(pobj.chars||pobj.code){dialog.sendMethod("verto.info",{txt:obj,noDialogParams:true})}};Verto.dialog.prototype.transfer=function(dest,params){var dialog=this;if(dest){dialog.sendMethod("verto.modify",{action:"transfer",destination:dest,params:params})}};Verto.dialog.prototype.replace=function(replaceCallID,params){var dialog=this;if(replaceCallID){dialog.sendMethod("verto.modify",{action:"replace",replaceCallID:replaceCallID,params:params})}};Verto.dialog.prototype.hold=function(params){var dialog=this;dialog.sendMethod("verto.modify",{action:"hold",params:params})};Verto.dialog.prototype.unhold=function(params){var dialog=this;dialog.sendMethod("verto.modify",{action:"unhold",params:params})};Verto.dialog.prototype.toggleHold=function(params){var dialog=this;dialog.sendMethod("verto.modify",{action:"toggleHold",params:params})};Verto.dialog.prototype.message=function(msg){var dialog=this;var err=0;msg.from=dialog.params.login;if(!msg.to){console.error("Missing To");err++}if(!msg.body){console.error("Missing Body");err++}if(err){return false}dialog.sendMethod("verto.info",{msg:msg});return true};Verto.dialog.prototype.answer=function(params){var dialog=this;if(!dialog.answered){if(!params){params={}}params.sdp=dialog.params.sdp;if(params){if(params.useVideo){dialog.useVideo(true)}dialog.params.callee_id_name=params.callee_id_name;dialog.params.callee_id_number=params.callee_id_number;if(params.useCamera){dialog.useCamera=params.useCamera}if(params.useMic){dialog.useMic=params.useMic}if(params.useSpeak){dialog.useSpeak=params.useSpeak}}dialog.rtc.createAnswer(params);dialog.answered=true}};Verto.dialog.prototype.handleAnswer=function(params){var dialog=this;dialog.gotAnswer=true;if(dialog.state.val>=Verto.enum.state.active.val){return}if(dialog.state.val>=Verto.enum.state.early.val){dialog.setState(Verto.enum.state.active)}else{if(dialog.gotEarly){console.log("Dialog "+dialog.callID+" Got answer while still establishing early media, delaying...")}else{console.log("Dialog "+dialog.callID+" Answering Channel");dialog.rtc.answer(params.sdp,function(){dialog.setState(Verto.enum.state.active)},function(e){console.error(e);dialog.hangup()});console.log("Dialog "+dialog.callID+"ANSWER SDP",params.sdp)}}};Verto.dialog.prototype.cidString=function(enc){var dialog=this;var party=dialog.params.remote_caller_id_name+(enc?" &lt;":" <")+dialog.params.remote_caller_id_number+(enc?"&gt;":">");return party};Verto.dialog.prototype.sendMessage=function(msg,params){var dialog=this;if(dialog.callbacks.onMessage){dialog.callbacks.onMessage(dialog.verto,dialog,msg,params)}};Verto.dialog.prototype.handleInfo=function(params){var dialog=this;dialog.sendMessage(Verto.enum.message.info,params)};Verto.dialog.prototype.handleDisplay=function(params){var dialog=this;if(params.display_name){dialog.params.remote_caller_id_name=params.display_name}if(params.display_number){dialog.params.remote_caller_id_number=params.display_number}dialog.sendMessage(Verto.enum.message.display,{})};Verto.dialog.prototype.handleMedia=function(params){var dialog=this;if(dialog.state.val>=Verto.enum.state.early.val){return}dialog.gotEarly=true;dialog.rtc.answer(params.sdp,function(){console.log("Dialog "+dialog.callID+"Establishing early media");dialog.setState(Verto.enum.state.early);if(dialog.gotAnswer){console.log("Dialog "+dialog.callID+"Answering Channel");dialog.setState(Verto.enum.state.active)}},function(e){console.error(e);dialog.hangup()});console.log("Dialog "+dialog.callID+"EARLY SDP",params.sdp)};Verto.ENUM=function(s){var i=0,o={};s.split(" ").map(function(x){o[x]={name:x,val:i++}});return Object.freeze(o)};Verto.enum={};Verto.enum.states=Object.freeze({new:{requesting:1,recovering:1,ringing:1,destroy:1,answering:1,hangup:1},requesting:{trying:1,hangup:1,active:1},recovering:{answering:1,hangup:1},trying:{active:1,early:1,hangup:1},ringing:{answering:1,hangup:1},answering:{active:1,hangup:1},active:{answering:1,requesting:1,hangup:1,held:1},held:{hangup:1,active:1},early:{hangup:1,active:1},hangup:{destroy:1},destroy:{},purge:{destroy:1}});Verto.enum.state=Verto.ENUM("new requesting trying recovering ringing answering early active held hangup destroy purge");Verto.enum.direction=Verto.ENUM("inbound outbound");Verto.enum.message=Verto.ENUM("display info pvtEvent clientReady");Verto.enum=Object.freeze(Verto.enum);Verto.saved=[];Verto.unloadJobs=[];Verto.videoDevices=[];Verto.audioInDevices=[];Verto.audioOutDevices=[];var checkDevices=function(runtime){console.info("enumerating devices");var aud_in=[],aud_out=[],vid=[];var has_video=0,has_audio=0;var Xstream;function gotDevices(deviceInfos){for(var i=0;i!==deviceInfos.length;++i){var deviceInfo=deviceInfos[i];var text="";console.log(deviceInfo);console.log(deviceInfo.kind+": "+deviceInfo.label+" id = "+deviceInfo.deviceId);if(deviceInfo.kind==="audioinput"){text=deviceInfo.label||"microphone "+(aud_in.length+1);aud_in.push({id:deviceInfo.deviceId,kind:"audio_in",label:text})}else if(deviceInfo.kind==="audiooutput"){text=deviceInfo.label||"speaker "+(aud_out.length+1);aud_out.push({id:deviceInfo.deviceId,kind:"audio_out",label:text})}else if(deviceInfo.kind==="videoinput"){text=deviceInfo.label||"camera "+(vid.length+1);vid.push({id:deviceInfo.deviceId,kind:"video",label:text})}else{console.log("Some other kind of source/device: ",deviceInfo)}}Verto.videoDevices=vid;Verto.audioInDevices=aud_in;Verto.audioOutDevices=aud_out;console.info("Audio IN Devices",Verto.audioInDevices);console.info("Audio Out Devices",Verto.audioOutDevices);console.info("Video Devices",Verto.videoDevices);if(Xstream){Xstream.getTracks().forEach(function(track){track.stop()})}if(runtime){runtime(true)}}function handleError(error){console.log("device enumeration error: ",error);if(runtime)runtime(false)}function checkTypes(devs){for(var i=0;i!==devs.length;++i){if(devs[i].kind==="audioinput"){has_audio++}else if(devs[i].kind==="videoinput"){has_video++}}navigator.getUserMedia({audio:has_audio>0?true:false,video:has_video>0?true:false},function(stream){Xstream=stream;navigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError)},function(err){console.log("The following error occurred: "+err.name)})}navigator.mediaDevices.enumerateDevices().then(checkTypes).catch(handleError)};Verto.refreshDevices=function(runtime){checkDevices(runtime)};Verto.init=function(obj,runtime){if(!obj){obj={}}if(!obj.skipPermCheck&&!obj.skipDeviceCheck){FSRTC.checkPerms(function(status){checkDevices(runtime)},true,true)}else if(obj.skipPermCheck&&!obj.skipDeviceCheck){checkDevices(runtime)}else if(!obj.skipPermCheck&&obj.skipDeviceCheck){FSRTC.checkPerms(function(status){runtime(status)},true,true)}else{runtime(null)}};Verto.genUUID=function(){return generateGUID()};return Verto});(function(global,factory){if(typeof define==="function"&&define.amd){define(["./verto/verto","socket.io-client","peerjs"],factory)}else if(typeof module==="object"&&module.exports){module.exports=factory(require("./verto/verto"),require("socket.io-client"),require("peerjs"))}else{global.CliqueClient=factory(global.Verto,global.io,global.Peer)}})(this,function(Verto,io,Peer){class CliqueContact{constructor(data){this._types=["email","sms","call"];this.type=data.type;this.contact=data.contact||data.text;this.name=data.name}validate(){switch(this.type){case"email":return!!this.contact.match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);case"sms":return!!this.contact.match(/^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/);case"call":return!!this.contact;default:return false}}toString(){return this.contact||""}isEmail(){return this.type==="email"}isSms(){return this.type==="sms"}isCall(){return this.type==="call"}}function AjaxRequest(request){return new Promise(function(resolve,reject){if(request.method==null)request.method="GET";var xmlhttp=new XMLHttpRequest;xmlhttp.onreadystatechange=function(){if(xmlhttp.readyState==XMLHttpRequest.DONE){if(xmlhttp.status>=200&&xmlhttp.status<400)return resolve(xmlhttp.response);reject(xmlhttp.status)}};xmlhttp.responseType=request.dataType.toLowerCase()||"";var params="";for(var key in request.data){params=params+"&"+key+"="+request.data[key]}params=params.replace("&","");xmlhttp.open(request.method,request.url+(request.method==="GET"&&params?"?"+params:""),true);xmlhttp.setRequestHeader("X-Requested-With","XMLHttpRequest");if(request.bearer)xmlhttp.setRequestHeader("Authorization","Bearer "+request.bearer);if(request.method!=="GET"){xmlhttp.setRequestHeader("Content-Type","application/json");xmlhttp.send(JSON.stringify(request.data))}else{xmlhttp.send()}})}class CliqueAPI{constructor(options){let self=this;self.sessionToken=options.sessionToken;self.apiEndpoint=options.baseURL+"/api/v2"}init(){let self=this;return new Promise(function(resolve,reject){if(self.user)return resolve();AjaxRequest({url:self.apiEndpoint+"/users/?token="+self.sessionToken,dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)return reject({code:"api-error",data:data});self.user=data.result[0];return resolve()}).catch(function(error){return reject({code:"http-error",data:error})})})}userUpdate(user_data){let self=this;return AjaxRequest({url:self.apiEndpoint+"/users/"+self.user.uuid,method:"PUT",dataType:"JSON",bearer:self.sessionToken,data:user_data}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};self.user=data.user;return self.user}).catch(function(err){throw{code:"http-error",data:err}})}userFetch(){let self=this;return AjaxRequest({url:self.apiEndpoint+"/users/"+self.user.uuid,method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};self.user=data.user;return self.user}).catch(function(err){throw{code:"http-error",data:err}})}conferenceCreate(options){let self=this;var post_data={creator_uuid:self.user.uuid,node_autoassign:true,settings:options&&options.conference_settings};if(options&&options.p2p){post_data.node_autoassign=false;post_data.node_domain="p2p"}return AjaxRequest({url:self.apiEndpoint+"/conferences/",method:"POST",dataType:"JSON",bearer:self.sessionToken,data:post_data}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.conference})}conferenceFetch(id,startFlag){let self=this;return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+(startFlag?"/start":""),method:startFlag?"POST":"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.conference}).catch(function(err){throw{code:"http-error",data:err}})}conferenceUpdate(id,conference_data){let self=this;return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id,method:"PUT",dataType:"JSON",bearer:self.sessionToken,data:conference_data}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.conference}).catch(function(err){throw{code:"http-error",data:err}})}conferenceUsers(id){let self=this;return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+"/user-list-hash",method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.result}).catch(function(err){throw{code:"http-error",data:err}})}conferenceSettings(id,settings){let self=this;if(typeof settings==="undefined")return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+"/settings",method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.settings}).catch(function(err){throw{code:"http-error",data:err}});else return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+"/settings",method:"PUT",dataType:"JSON",bearer:self.sessionToken,data:settings}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.settings}).catch(function(err){throw{code:"http-error",data:err}})}conferenceInvite(id,inviteData){let self=this;return AjaxRequest({url:self.apiEndpoint+"/invites/"+id+"/send",method:"POST",dataType:"JSON",bearer:self.sessionToken,data:inviteData}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.failures}).catch(function(err){throw{code:"http-error",data:err}})}conferenceFind(params){let self=this;var queryString=Object.keys(params).map(function(k){return window.encodeURIComponent(k)+"="+window.encodeURIComponent(params[k])}).join("&");return AjaxRequest({url:self.apiEndpoint+"/conferences?"+queryString,method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.result}).catch(function(err){throw{code:"http-error",data:err}})}recordingById(recordingId){let self=this;return AjaxRequest({url:self.apiEndpoint+"/recording/"+recordingId,method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.record}).catch(function(err){throw{code:"http-error",data:err}})}recordingBySessionId(sessionId){let self=this;return AjaxRequest({url:self.apiEndpoint+"/recording/"+sessionId+"/session",method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.record}).catch(function(err){throw{code:"http-error",data:err}})}phoneNumberAssign(id,data){let self=this;return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+"/phone_number",method:"POST",dataType:"JSON",bearer:self.sessionToken,data:data}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.phone_number}).catch(function(err){throw{code:"http-error",data:err}})}phoneNumberUpdate(id,data){let self=this;return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+"/phone_number",method:"PUT",dataType:"JSON",bearer:self.sessionToken,data:data}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data.phone_number}).catch(function(err){throw{code:"http-error",data:err}})}phoneNumberRelease(id){let self=this;return AjaxRequest({url:self.apiEndpoint+"/conferences/"+id+"/phone_number",method:"DELETE",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return true}).catch(function(err){throw{code:"http-error",data:err}})}chatCreate(data={}){let self=this;return AjaxRequest({url:self.apiEndpoint+"/chats",method:"POST",dataType:"JSON",bearer:self.sessionToken,data:data}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}chatJoin(chatId){let self=this;return AjaxRequest({url:self.apiEndpoint+"/chats/"+chatId+"/join",method:"POST",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}chatLeave(chatId){let self=this;return AjaxRequest({url:self.apiEndpoint+"/chats/"+chatId+"/leave",method:"POST",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}whitelistCreate(conference_id,allowed_users){let self=this;return AjaxRequest({url:self.apiEndpoint+"/whitelists",method:"POST",dataType:"JSON",bearer:self.sessionToken,data:{conference_id:conference_id,allowed_users:allowed_users}}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}whitelistGet(conference_id){let self=this;return AjaxRequest({url:self.apiEndpoint+"/whitelists/"+conference_id,method:"GET",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}whitelistAddUsers(conference_id,users){let self=this;return AjaxRequest({url:self.apiEndpoint+"/whitelists/"+conference_id+"/add_users",method:"PUT",dataType:"JSON",bearer:self.sessionToken,data:{users:users}}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}whitelistDelUsers(conference_id,users){let self=this;return AjaxRequest({url:self.apiEndpoint+"/whitelists/"+conference_id+"/del_users",method:"PUT",dataType:"JSON",bearer:self.sessionToken,data:{users:users}}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}whitelistDelete(conference_id){let self=this;return AjaxRequest({url:self.apiEndpoint+"/whitelists/"+conference_id,method:"DELETE",dataType:"JSON",bearer:self.sessionToken}).then(function(data){if(!data.ok)throw{code:"api-error",data:data};return data}).catch(function(err){throw{code:"http-error",data:err}})}}class CliqueAbstract{constructor(options){if(typeof Verto==="undefined")throw new Error("Verto is not available");if(typeof io==="undefined")throw new Error("Socket.io is not available");if(typeof Peer==="undefined")throw new Error("Peer.js is not available");if(!options||options&&(!(options.base_url||options.baseURL)||!(options.session_token||options.sessionToken)))throw new Error("Invalid config params");let self=this;self.baseURL=options.base_url||options.baseURL;self.apiEndpoint=self.baseURL+"/api/v2";self.websocketEndpoint=self.baseURL;self.sessionToken=options.session_token||options.sessionToken;self.debug=options.debug||options.Debug||false;console.log("DEBUG is set to",self.debug);self.wssPort=options.wss_port||options.wssPort||"443";self.peerManager=options.peermanager||options.peerManager||self.baseURL+"/peermanager";self.iceServers=options.ice_servers||options.iceServers||[{url:"stun:stun.l.google.com:19302"}];self.musicOnHoldUrl=options.music_on_hold_url||options.musicOnHoldUrl||"data:audio/mp3;base64,";self.eventHandlers={};self.verto={};self.call=null;self.socket=null;self.initCompletionPromise=null}init(){let self=this;if(!self.initCompletionPromise)self.initCompletionPromise=new Promise(function(resolve,reject){if(self.user)return resolve();self.api=new CliqueAPI({baseURL:self.baseURL,sessionToken:self.sessionToken});self.api.init().then(()=>{self.user=self.api.user;resolve()}).catch(error=>{return reject({code:"http-error",data:error})})});return self.initCompletionPromise}on(event_name,event_handler){let self=this;if(typeof event_name!=="string"||typeof event_handler!=="function")throw new Error("Invalid function params");if(!self.eventHandlers[event_name])self.eventHandlers[event_name]=[];self.eventHandlers[event_name].push(event_handler)}off(event_name){let self=this;self.eventHandlers[event_name]=null}socketInit_(p2pSessionId){let self=this;if(!self.socket){let query="token="+self.sessionToken;if(p2pSessionId)query=query+"&p2pSessionId="+p2pSessionId;self.socket=io.connect(self.websocketEndpoint,{query:query});self.handleEvents_()}}socketSubscribe_(id){let self=this;self.socket.emit("join",id)}socketClose_(){let self=this;self.socket.close();self.socket=null}trigger_(event_name,event_data){let self=this;if(!self.eventHandlers[event_name])return;self.eventHandlers[event_name].forEach(event_handler=>{event_handler(event_data)})}cleanup_(){}}class CliqueBase extends CliqueAbstract{handleEvents_(){}audioElementCreate_(id){function guid(){function s4(){return Math.floor((1+Math.random())*65536).toString(16).substring(1)}return s4()+s4()+"-"+s4()+"-"+s4()+"-"+s4()+"-"+s4()+s4()+s4()}var audioElement=document.createElement("audio");if(!id)id=guid();audioElement.id=id;audioElement.autoplay=true;audioElement.style.display="none";document.body.appendChild(audioElement);return id}localVolume(volume){var v=document.getElementById(this.number||this.conference.id);if(!v)throw new Error("Audio element not found.");if(volume)v.volume=volume/100;return v.volume*100}initUA_(node_domain){let self=this;return new Promise(function(resolve,reject){var vertoCallbacks={onWSLogin:onWSLogin,onWSClose:onWSClose,onDialogState:onDialogState};const confId=self.conference?self.conference.id:null;let audio_id=self.audioElementCreate_(confId);self.socketInit_();self.verto=new Verto({socketUrl:"wss://"+node_domain+":"+self.wssPort,login:self.user.uuid,passwd:self.user.sip_pwd,iceServers:self.iceServers,tag:audio_id,keepalive:1e3*60*3},vertoCallbacks);self.trackVertoStats_(self.verto);function onWSLogin(verto,success){success?resolve(self.verto):reject("Signaling connection failed")}function onWSClose(verto,success){}function onDialogState(d){self.vertoDialogState_(d)}})}vertoDialogState_(d){}isNetworkConnectionLost_(data){let connectionLost=false;if(!self.webrtcStats){self.webrtcStats={audio:{packetsSent:0,sentLost:0,packetsReceived:0,receivedLost:0},video:{packetsSent:0,sentLost:0,packetsReceived:0,receivedLost:0}}}if(data.packetsSent){const sentPacketsDelta=Math.abs((+data.packetsSent||0)-self.webrtcStats[data.mediaType].packetsSent);const sentLostDelta=Math.abs((+data.packetsLost||0)-self.webrtcStats[data.mediaType].sentLost);connectionLost=Math.abs((sentPacketsDelta-sentLostDelta)/sentPacketsDelta)<=.7;self.webrtcStats[data.mediaType].packetsSent=+data.packetsSent||0;self.webrtcStats[data.mediaType].sentLost=+data.packetsLost||0}if(data.packetsReceived){const receivedPacketsDelta=Math.abs((+data.packetsReceived||0)-self.webrtcStats[data.mediaType].packetsReceived);const receivedLostDelta=Math.abs((+data.packetsLost||0)-self.webrtcStats[data.mediaType].receivedLost);connectionLost=Math.abs((receivedPacketsDelta-receivedLostDelta)/receivedPacketsDelta)<=.7;self.webrtcStats[data.mediaType].packetsReceived=+data.packetsReceived||0;self.webrtcStats[data.mediaType].receivedLost=+data.packetsLost||0}return connectionLost}sendNetworkConnectionEvent_(status){if(!this.networkStatusTimestamp)this.networkStatusTimestamp={};if(this.networkStatusTimestamp[status]&&this.networkStatusTimestamp[status]-Date.now()<15e3){this.trigger_("network-status",{status:status})}this.networkStatusTimestamp[status]=Date.now()}trackVertoStats_(verto,options={}){let self=this;const repeatInterval=options.repeatInterval||3e3;self.removeVertoStats_();if(!verto.dialogs)throw{code:"not-supported",data:"WebRTC stats is not supported"};self.repeatVertoStatsInterval=setInterval(()=>{Object.keys(verto.dialogs).forEach(dialogId=>{if(!verto.dialogs[dialogId].rtc.peer)return;self.getPeerStats_(verto.dialogs[dialogId].rtc.peer.peer).catch(err=>console.log("WebRTC stats",err))})},repeatInterval)}trackPeerjsStats_(peer,options={}){let self=this;const repeatInterval=options.repeatInterval||3e3;self.removePeerjsStats_();if(!peer.connections)throw{code:"not-supported",data:"WebRTC stats is not supported"};self.repeatPeerjsStatsInterval=setInterval(()=>{Object.keys(peer.connections).forEach(connection=>{const mediaConnection=peer.connections[connection][1];if(!mediaConnection||mediaConnection&&!mediaConnection.pc)return self.removePeerjsStats_();self.getPeerStats_(mediaConnection.pc).catch(err=>console.log("WebRTC stats",err))})},repeatInterval)}removePeerjsStats_(){if(this.repeatPeerjsStatsInterval)clearInterval(this.repeatPeerjsStatsInterval)}removeVertoStats_(){if(this.repeatVertoStatsInterval)clearInterval(this.repeatVertoStatsInterval)}getPeerStats_(peer){let self=this;if(!peer.getStats)return Promise.reject({code:"not-supported",data:"WebRTC stats is not supported"});if(!!navigator.mozGetUserMedia){return peer.getStats().then(stats=>{stats.forEach(result=>{if(result.type==="outbound-rtp"||result.type==="inbound-rtp"){if(self.isNetworkConnectionLost_(result))self.sendNetworkConnectionEvent_("packets_lost")}});return Promise.resolve({success:true})})}else{return new Promise((resolve,reject)=>{peer.getStats(stats=>{const statsList=stats.result();let ssrcStat=statsList.find(stat=>stat.type==="ssrc");if(ssrcStat){var ssrc={};ssrcStat.names().forEach(name=>{ssrc[name]=ssrcStat.stat(name)});ssrc.id=ssrcStat.id;ssrc.type=ssrcStat.type;ssrc.timestamp=ssrcStat.timestamp;if(self.isNetworkConnectionLost_(ssrc)){self.sendNetworkConnectionEvent_("packets_lost")}}resolve({success:true})})})}}}class CliqueConference extends CliqueBase{id(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};return self.conference.id}create(options){let self=this;return self.actionRun_("create",options).catch(data=>{if(self.debug)console.error(data);throw{code:"api-error",data:data}})}join(id){let self=this;return self.actionRun_("join",id).catch(data=>{if(self.debug)console.error(data);throw{code:"api-error",data:data}})}leave(){let self=this;return new Promise((resolve,reject)=>{if(!self.conference)return reject({code:"not-connected",data:"Instance is not connected to the conference"});if(self.conference.ss_calls){for(var call in self.conference.ss_calls){self.conference.ss_calls[call].close()}}if(self.isP2P){for(var call in self.conference.calls){var id=self.conference.calls[call].audio_id;if(self.conference.calls[call])self.conference.calls[call].close();var audio_el=document.getElementById(id);if(audio_el)document.body.removeChild(audio_el)}self.p2pUnbindMicManager_()}else{self.call&&self.call.hangup();var audio_el=document.getElementById(self.conference.id);if(audio_el)document.body.removeChild(audio_el)}self.cleanup_();resolve()})}users(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};return self.conference.users||[]}checkModerator(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(!self.conference.users)return[];return Object.keys(self.conference.users).filter(uuid=>self.conference.users[uuid].meta.is_moderator)}mohPlay(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};const audioFile=self.musicOnHoldUrl;self.conference.audioEl=document.getElementById(self.conference.id)||document.getElementById(self.audioElementCreate_(self.conference.id));self.conference.audioEl.setAttribute("src",audioFile);self.conference.audioEl.loop=true;self.conference.audioEl.play()}mohStop(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(self.conference.audioEl){self.conference.audioEl.loop=false;self.conference.audioEl.pause()}}invite(data,options){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};return self.init().then(function(){return self.api.conferenceSettings(self.conference.id)}).then(function(conferenceSettings){if(!conferenceSettings)return Promise.reject("Incorrect conference id");return self.prepareInvitation_(conferenceSettings,data,options)}).then(function(inviteData){return self.api.conferenceInvite(self.conference.id,inviteData)})}lock(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(self.isP2P&&self.conference.creator_uuid===self.user.uuid){var lockEvent={Action:"lock",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:(new Date).toISOString()};self.socket.emit("inject",lockEvent)}self.socket.emit("lock",self.conference.id)}setGrace(period){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("setgrace",period)}unlock(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(self.isP2P&&self.conference.creator_uuid===self.user.uuid){var lockEvent={Action:"unlock",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:(new Date).toISOString()};self.socket.emit("inject",lockEvent)}self.socket.emit("unlock",this.conference.id)}userMute(uuid){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("mute-local",uuid)}userUnmute(uuid){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("unmute-local",uuid)}muteUser(uuid){console.warn("muteUser is deprecated, please use userMute instead");this.userMute(uuid)}unmuteUser(uuid){console.warn("unmuteUser is deprecated, please use userUnmute instead");this.userUnmute(uuid)}recordingStart(options){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("recording-start",options)}recordingStop(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("recording-stop")}getRecordingById(recordingId){let self=this;if(!self.api)return Promise.reject({code:"not-ready",data:"Instance is not ready"});return self.api.recordingById(recordingId).then(recording=>({status:recording.status,conference_session_id:recording.session_id,url:recording.url}))}getRecordingBySessionId(sessionId){let self=this;if(!self.api)return Promise.reject({code:"not-ready",data:"Instance is not ready"});return self.api.recordingBySessionId(sessionId).then(recording=>({status:recording.status,conference_session_id:recording.session_id,url:recording.url}))}localMute(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("mute-local",self.user.uuid)}localUnmute(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};self.socket.emit("unmute-local",self.user.uuid)}isMuted(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(self.conference.node_domain==="p2p")return self.p2pMuted;return self.call.getMute()}screenShareStart(appId,options={}){let self=this;if(!self.conference)return Promise.reject({code:"not-connected",data:"Instance is not connected to the conference"});if(!window.chrome)return Promise.reject({code:"not-supported",data:"Browser is not supported"});if(self.ssStream)return Promise.reject({code:"in-use",data:"Screen sharing is active"});var chromeMediaSource="screen";var screen_constraints={mandatory:{chromeMediaSource:chromeMediaSource,maxWidth:screen.width>1920?screen.width:1920,maxHeight:screen.height>1080?screen.height:1080},optional:[]};if(!self.screenShareSource||self.screenShareSource.disconnected){if(self.screenShareSource)self.screenShareSource.destroy();self.screenShareSource=self.p2pScreenShareInit_();self.screenShareSource.on("error",err=>{if(self.debug)console.error("PeerJS error occured:",err);self.screenShareSource.destroy();self.screenShareSource=self.p2pScreenShareInit_();self.trackPeerjsStats_(self.screenShareSource)});self.screenShareSource.on("disconnected",()=>{self.screenShareSource.destroy();self.screenShareSource=self.p2pScreenShareInit_();self.trackPeerjsStats_(self.screenShareSource)});self.trackPeerjsStats_(self.screenShareSource);if(self.debug)console.log("Screen Share Broadcast object initialized",self.screenShareSource)}const request={action:"capture_screen",sources:options.sources||["screen","window","tab"]};return new Promise((resolve,reject)=>{window.chrome.runtime.sendMessage(appId,request,response=>{if(response&&response.error)return reject(response.error);if(!response||response&&!response.sourceId)return reject("PermissionDeniedError");return resolve(response.sourceId)})}).then(sourceId=>{return setSource(sourceId)}).catch(err=>Promise.reject({code:"mediastream",data:err}));function setSource(sourceId){return new Promise((resolve,reject)=>{screen_constraints.mandatory.chromeMediaSource="desktop";screen_constraints.mandatory.chromeMediaSourceId=sourceId;navigator.getUserMedia({video:screen_constraints,audio:false},stream=>{self.ssStream=stream;self.ssStream.getVideoTracks()[0].onended=(()=>{var currentTime=(new Date).toISOString();var screenShareStopEvent={Action:"screen-share-stop",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:currentTime};self.socket.emit("inject",screenShareStopEvent);self.screenShareSource.destroy();self.ssStream=null;self.screenShareSource=null;self.removePeerjsStats_()});var currentTime=(new Date).toISOString();var screenShareStartEvent={Action:"screen-share-start",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:currentTime};self.socket.emit("inject",screenShareStartEvent);resolve()},error=>{reject({code:"screen-share-failed",data:error})})})}}screenShareStop(){let self=this;if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(!self.ssStream)throw{code:"not-in-use",data:"Screen is not shared"};self.ssStream.getTracks().forEach(track=>track.stop());self.ssStream=null;self.screenShareSource=null;self.removePeerjsStats_();var currentTime=(new Date).toISOString();var screenShareStopEvent={Action:"screen-share-stop",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:currentTime};self.socket.emit("inject",screenShareStopEvent)}screenShareViewStart(uuid,domElement){let self=this;if(!domElement)return Promise.reject({code:"dom-element-missed",data:"DOM element is not exist"});if(!self.conference)return Promise.reject({code:"not-connected",data:"Instance is not connected to the conference"});const peerCallId="ss-"+uuid+self.id();self.conference.domElements[peerCallId]=domElement;if(!self.screenShareViewer||self.screenShareViewer.disconnected){if(self.screenShareViewer)self.screenShareViewer.destroy();self.screenShareViewer=self.p2pScreenShareInit_(self.user.p2pSessionId);self.screenShareViewer.on("error",err=>{if(self.debug)console.error("PeerJS error occured:",err);self.screenShareViewer.destroy();self.screenShareViewer=self.p2pScreenShareInit_(self.user.p2pSessionId);self.trackPeerjsStats_(self.screenShareViewer)});self.screenShareViewer.on("disconnected",()=>{if(self.screenShareViewer)self.screenShareViewer.reconnect()});self.trackPeerjsStats_(self.screenShareViewer)}var currentTime=(new Date).toISOString();var callMeEvent={Action:"call-me",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,"Callee-Callee-ID-Number":uuid,User:self.user,Time:currentTime};self.socket.emit("broadcast",callMeEvent);self.ssViewSessionsCount=self.ssViewSessionsCount+1}screenShareViewStop(uuid){let self=this;const peerCallId="ss-"+uuid+self.id();if(!self.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};if(!self.conference.ss_calls[peerCallId])throw{code:"no-session",data:"There is no screen share session for user with UUID = "+uuid};self.conference.ss_calls[peerCallId].close();delete self.conference.ss_calls[peerCallId];self.conference.domElements[peerCallId].srcObject=null;self.removePeerjsStats_();self.ssViewSessionsCount=self.ssViewSessionsCount-1;if(self.ssViewSessionsCount<=0){self.screenShareViewer.destroy();self.screenShareViewer=null}}userKick(uuid){console.warn("kickUser is deprecated, please use userKick instead");this.kickUser(uuid)}kickUser(uuid){if(!this.conference)throw{code:"not-connected",data:"Instance is not connected to the conference"};let self=this;if(self.isP2P&&self.conference.creator_uuid===self.user.uuid){var userKickSocketEvent={Action:"kick-member",Room:self.conference.id,"Caller-Caller-ID-Number":uuid,Time:(new Date).toISOString()};self.socket.emit("inject",userKickSocketEvent)}self.socket.emit("kick",uuid)}cleanup_(){let self=this;self.mohStop();self.socketClose_();if(self.screenShareSource)self.screenShareSource.destroy();self.screenShareSource=null;if(self.screenShareViewer)self.screenShareViewer.destroy();self.screenShareViewer=null;self.call=null;self.conference=null}prepareConference_(conference){let self=this;let c=Object.assign({},conference);c.calls={};c.users={};c.ss_calls={};c.domElements={};return c}initUA_(conference){let self=this;self.ssViewSessionsCount=0;self.user.p2pSessionId=Date.now();if(conference.node_domain==="p2p"){self.isP2P=true;self.p2pInit_(conference.id);return Promise.resolve()}else{return super.initUA_(conference.node_domain)}}vertoDialogState_(d){let self=this;switch(d.state.name){case"trying":break;case"answering":break;case"active":if(self.conference&&self.conference.Settings&&self.conference.Settings.e1_joins_muted)self.call&&self.call.setMute("off");self.trigger_("session-connect",{});break;case"hangup":var error;if(d.cause!=="NORMAL_CLEARING"){error=d.cause}self.trigger_("session-disconnect",{});break;case"destroy":self.cleanup_();break}}handleEvents_(){let self=this;self.socket.on("reconnect",function(event){if(self.conference&&self.conference.id){self.actionRun_("reconnect",self.conference.id)}});self.socket.on("event",function(event){switch(event.Action){case"add-member":const sameUser=event.User.uuid===self.user.uuid;const response={user:event.User,is_moderator:event.User.meta.is_moderator,p2p_session_id:event.User.p2pSessionId};if(self.user.uuid===event["Caller-Caller-ID-Number"]){self.conference.users=Object.assign({},self.conference.users,event.ListUsersInConference);response.listUsersInConference=Object.assign({},self.conference.users)}let userAlreadyInList=self.conference.users[event.User.uuid];if(self.debug)console.log("userAlreadyInList",userAlreadyInList);if(self.isP2P){self.conference.users[event.User.uuid]=event.User;const conferenceHasModerator=self.checkModerator().length;const numberUsersInConference=Object.keys(self.conference.users).length;const waitForModerator=self.conference.Settings.wait_for_moderator;const musicOnHold=self.conference.Settings.music_on_hold;if(userAlreadyInList){let peerCallId=userAlreadyInList.uuid+self.conference.id+userAlreadyInList.p2pSessionId;if(self.conference.calls[peerCallId]){self.conference.calls[peerCallId].close();var audio_el=document.getElementById(self.conference.calls[peerCallId].audio_id);if(audio_el)document.body.removeChild(audio_el);delete self.conference.calls[peerCallId]}if(userAlreadyInList.uuid==self.user.uuid&&userAlreadyInList.p2pSessionId==self.user.p2pSessionId){let res={newUser:event.User,oldUser:userAlreadyInList};self.leave();self.trigger_("device-switch",res);return}}if(musicOnHold&&sameUser&&(!conferenceHasModerator&&waitForModerator||numberUsersInConference===1)){self.mohPlay()}if(musicOnHold&&numberUsersInConference!==1&&(conferenceHasModerator&&waitForModerator||!waitForModerator)){self.mohStop()}if(!waitForModerator||conferenceHasModerator&&waitForModerator){Object.keys(self.conference.users||{}).forEach(uuid=>{let peerCallId=uuid+self.conference.id+self.conference.users[uuid].p2pSessionId||"";if(uuid!==self.user.uuid&&!self.conference.calls[peerCallId]){if(self.debug)console.log("Call",uuid,self.conference.users[uuid].p2pSessionId);self.p2pCall_(self.conference.id,uuid,self.conference.users[uuid].p2pSessionId).then((call,id)=>{if(self.debug)console.log("Call",uuid,self.conference.users[uuid].p2pSessionId,"ready");self.conference.calls[peerCallId]=call;self.conference.calls[peerCallId].audio_id=id}).catch(error=>{if(self.debug)console.log("Call",uuid,self.conference.users[uuid].p2pSessionId,"failed");if(self.debug)console.error("P2P call error:",error)})}})}}else{self.conference.users[event.User.uuid]=event.User}self.trigger_("add-member",response);break;case"del-member":if(self.conference&&self.conference.users){let user=self.conference.users[event["Caller-Caller-ID-Number"]];if(user&&user.p2pSessionId==event.User.p2pSessionId||!self.isP2P){if(self.debug)console.log("del-member:",user);delete self.conference.users[event["Caller-Caller-ID-Number"]]}}self.trigger_("del-member",{uuid:event["Caller-Caller-ID-Number"],p2p_session_id:event.User.p2pSessionId});break;case"start-talking":self.trigger_("start-talking",{uuid:event["Caller-Caller-ID-Number"]});break;case"stop-talking":self.trigger_("stop-talking",{uuid:event["Caller-Caller-ID-Number"]});break;case"mute-member":if(self.user.uuid===event["Caller-Caller-ID-Number"]){if(self.isP2P){self.p2pChangeMuteState_(true)}else{self.call&&self.call.setMute("off")}}self.trigger_("mute-member",{uuid:event["Caller-Caller-ID-Number"]});break;case"unmute-member":if(self.user.uuid===event["Caller-Caller-ID-Number"]){if(self.isP2P){self.p2pChangeMuteState_(false)}else{self.call&&self.call.setMute("on")}}self.trigger_("unmute-member",{uuid:event["Caller-Caller-ID-Number"]});break;case"lock":self.trigger_("lock",{});break;case"unlock":self.trigger_("unlock",{});break;case"kick-member":if(self.isP2P){self.p2pKick_(event["Caller-Caller-ID-Number"],event.User.p2pSessionId)}self.trigger_("kick-member",{uuid:event["Caller-Caller-ID-Number"],p2p_session_id:event.User.p2pSessionId});break;case"conference-create":self.trigger_("conference-create",{conference_session_id:event["ConferenceUniqueID"]});break;case"conference-destroy":self.trigger_("conference-destroy",{conference_session_id:event["ConferenceUniqueID"]});break;case"call-status-amd":self.trigger_("call-status-amd",{uuid:event["Caller-Caller-ID-Number"],status:event["Status"]});break;case"call-status":self.trigger_("call-status",{uuid:event["Caller-Callee-ID-Number"],status:event["Status"],number:event["Number"]});break;case"setgrace":self.trigger_("setgrace",{});break;case"start-recording":self.trigger_("start-recording",{recordingID:event.Record});break;case"stop-recording":self.trigger_("stop-recording",{recordingID:event.Record});break;case"recording-completed":self.trigger_("recording-completed",{recordingID:event.Record,url:event.url});break;case"screen-share-start":self.trigger_("screen-share-start",{uuid:event["Caller-Caller-ID-Number"]});break;case"screen-share-stop":self.trigger_("screen-share-stop",{uuid:event["Caller-Caller-ID-Number"]});break;case"call-me":if(self.debug)console.log(event);if(event["Callee-Callee-ID-Number"]==self.user.uuid&&self.ssStream){if(!self.screenShareSource||self.screenShareSource.disconnected){self.screenShareSource=self.p2pScreenShareInit_();self.screenShareSource.on("error",err=>{if(self.debug)console.error("PeerJS error occured:",err);self.screenShareSource.destroy();self.screenShareSource=self.p2pScreenShareInit_();self.trackPeerjsStats_(self.screenShareSource)});self.screenShareSource.on("disconnected",()=>{if(self.screenShareSource)self.screenShareSource.reconnect()});self.trackPeerjsStats_(self.screenShareSource)}var call;let tries=1;let timer=setInterval(()=>{call=self.screenShareSource.call("ss-"+event["Caller-Caller-ID-Number"]+self.id()+(event.User.p2pSessionId||""),self.ssStream);if(self.debug)console.log(`Attempt ${tries}: calling ss-`+event["Caller-Caller-ID-Number"]+self.id()+(event.User.p2pSessionId||""));if(call){call.on("stream",remoteStream=>{})}else{tries=tries+1}if(call||tries>5){clearInterval(timer);if(self.debug&&!call)console.error(`Calling ss-`+event["Caller-Caller-ID-Number"]+self.id()+(event.User.p2pSessionId||"")+" failed")}},1e3)}break}})}prepareInvitation_(conferenceSettings,data,options){let self=this;if(!options||options&&!options.conference_url)return Promise.reject("Missing conference url");if(!data)return Promise.reject("Missing contacts information");var inviteData={invited_by_uuid:this.user.uuid};var contacts=[];data.forEach(function(data){return contacts.push(new CliqueContact(data))});var emails=contacts.filter(function(el){return el.isEmail()}).map(function(el){return{contact:el.contact}});var phones=contacts.filter(function(el){return el.isSms()}).map(function(el){return{contact:el.contact}});var calls=contacts.filter(function(el){return el.isCall()}).map(function(el){return{contact:el.contact}});if(emails.length)inviteData.email={contacts:emails,template_name:options.email_template,template_params:{name:options.sender_name||options.sender_email||"Your contact",conference_url:options.conference_url,defaultLogoUrl:options.defaultLogoUrl,phone:conferenceSettings.phone_number}};if(phones.length)inviteData.sms={contacts:phones,template_name:options.sms_template,template_params:{name:options.sender_name||options.sender_email||"Your contact",conference_url:options.conference_url,phone:conferenceSettings.phone_number}};if(calls.length&&self.conference.node_domain!=="p2p")inviteData.call={contacts:calls};return Promise.resolve(inviteData)}actionRun_(action,data){let self=this;if(self.call&&action!=="reconnect")return Promise.reject({code:"already-connected",data:"Instance is already connected to the conference"});return new Promise((resolve,reject)=>{self.init().then(()=>{let whitelist=Object.assign({},data.whitelist||{});if(data.whitelist){delete data.whitelist}let conferencePromise=action=="create"?self.api.conferenceCreate(data):self.api.conferenceFetch(data,true);if(Object.keys(whitelist).length){let wl_array=Object.values(whitelist);if(!wl_array.includes(self.user.uuid)){wl_array.push(self.user.uuid)}return new Promise((resolve_,reject_)=>{conferencePromise.then(conference=>{self.api.whitelistCreate(conference.id,wl_array);resolve_(conference)})})}else return conferencePromise}).then(conference=>{self.conference=self.prepareConference_(conference);self.p2pMuted=conference.Settings.e1_joins_muted;if(conference.locked&&self.user.uuid!==conference.creator_uuid){return Promise.reject({code:"conference-locked",data:"Conference is locked"})}return self.initUA_(conference)}).then(function(){self.socketSubscribe_(self.conference.id);if(self.isP2P){var currentTime=(new Date).toISOString();self.user.meta.is_moderator=self.conference.creator_uuid===self.user.uuid;var userAddSocketEvent={Action:"add-member",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:currentTime};if(self.debug)console.log("P2P add-member",self.user);self.socket.emit("inject",userAddSocketEvent)}else if(action!=="reconnect"){self.call=self.verto.newCall({destination_number:"conference_"+self.conference.id,caller_id_number:self.user.uuid})}resolve(self.conference)}).catch(data=>{reject(data)})})}p2pChangeMuteState_(isMuted){let self=this;self.p2pMuted=isMuted;if(self.conference.calls){Object.keys(self.conference.calls).forEach(peerCallId=>{self.conference.calls[peerCallId].localStream.getAudioTracks()[0].enabled=!isMuted})}}p2pBindMicManager_(stream,threshold){let self=this;if(self.micContext)return;self.micContext=new(window.AudioContext||window.webkitAudioContext);let micSource=self.micContext.createMediaStreamSource(stream);let micProcessor=self.micContext.createScriptProcessor(2048,1,1);let micAnalyser=self.micContext.createAnalyser();micProcessor.connect(self.micContext.destination);micSource.connect(micAnalyser);micAnalyser.fftSize=64;var data=new Uint8Array(micAnalyser.frequencyBinCount);var talkStatus=false;var talkCount=0;micProcessor.onaudioprocess=function(){micAnalyser.getByteFrequencyData(data);var sum=0;for(let item of data){if(item)sum+=item}if(sum>threshold){if(!talkStatus&&talkCount>10){talkStatus=true;let currentTime=(new Date).toISOString();if(self.conference&&self.conference.p2p){let startTalkingEvent={Action:"start-talking",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:currentTime};self.socket.emit("inject",startTalkingEvent)}}if(!talkStatus)talkCount++}else{if(talkStatus&&talkCount<=0){talkStatus=false;let currentTime=(new Date).toISOString();if(self.conference&&self.conference.p2p){let stopTalkingEvent={Action:"stop-talking",Room:self.conference.id,"Caller-Caller-ID-Number":self.user.uuid,User:self.user,Time:currentTime};self.socket.emit("inject",stopTalkingEvent)}}if(talkStatus)talkCount--}}}p2pUnbindMicManager_(){let self=this;if(!self.micContext)return;self.micContext.close();delete self.micContext}p2pScreenShareInit_(p2pSessionId){let self=this;p2pSessionId=p2pSessionId?p2pSessionId:"";var location=new URL(self.peerManager);var port=location.port||(location.protocol=="https:"?"443":"80");var ssPeer=new Peer("ss-"+self.user.uuid+self.id()+p2pSessionId,{debug:3,secure:location.protocol=="https:",host:location.hostname,port:port,path:location.pathname,authParams:{conference_id:self.id(),session_token:self.sessionToken},config:{iceServers:self.iceServers}});ssPeer.on("call",function(call){if(self.debug)console.log(call.peer);self.conference.ss_calls[call.peer]=call;self.conference.ss_calls[call.peer].answer(null);self.conference.ss_calls[call.peer].on("stream",function(remoteStream){self.conference.domElements[call.peer].srcObject=remoteStream;let p=self.conference.domElements[call.peer].play();if(p)p.then(()=>{}).catch(()=>{})});self.conference.ss_calls[call.peer].on("error",function(err){if(self.debug)console.error(err)});self.conference.ss_calls[call.peer].on("close",function(){if(self.debug)console.log("Close connection");delete self.conference.ss_calls[call.peer]})});return ssPeer}p2pInit_(conference_id){let self=this;if(self.p2pObj)return;self.p2pMicThreshold=self.p2pMicThreshold||800;self.socketInit_(self.user.p2pSessionId);var location=new URL(self.peerManager);var port=location.port||(location.protocol=="https:"?"443":"80");if(self.debug)console.log("Init P2P",self.user.uuid,self.id(),self.user.p2pSessionId);self.p2pObj=new Peer(self.user.uuid+self.id()+self.user.p2pSessionId,{debug:3,secure:location.protocol=="https:",host:location.hostname,port:port,path:location.pathname,authParams:{conference_id:self.id(),session_token:self.sessionToken},config:{iceServers:self.iceServers}});self.p2pObj.on("call",function(call){if(!self.conference)return;navigator.getUserMedia({video:false,audio:true},function(stream){self.micStream=stream;self.p2pBindMicManager_(stream,self.p2pMicThreshold);if(!self.conference.calls)self.conference.calls={};self.conference.p2p=true;self.conference.calls[call.peer]=call;call.answer(stream);call.on("stream",function(remoteStream){var id=self.audioElementCreate_(call.peer);document.getElementById(id).srcObject=remoteStream;self.conference.calls[call.peer].audio_id=id;if(self.p2pMuted){self.conference.calls[call.peer].localStream.getAudioTracks()[0].enabled=false}})},function(error){if(self.debug)console.error("FATAL: Can't getUserMedia",error);throw error})})}p2pCall_(conference_id,user_id,p2pSessionId){let self=this;if(self.debug)console.log("P2P Call:",conference_id,user_id,p2pSessionId);return new Promise((resolve,reject)=>{var peerCallId=user_id+conference_id+p2pSessionId;navigator.getUserMedia({video:false,audio:true},function(stream){if(!self.conference.users[user_id]){return reject({code:"no-user"})}self.micStream=stream;let call=self.p2pObj.call(peerCallId,stream);if(!call){return reject({code:"no-call"})}if(self.debug)console.log("P2P Call Stage #2");self.p2pBindMicManager_(stream,self.p2pMicThreshold);var id=self.audioElementCreate_(peerCallId);call.on("stream",function(remoteStream){if(self.debug)console.log("P2P Call Stream Ready",remoteStream);document.getElementById(id).srcObject=remoteStream;if(self.p2pMuted){call.localStream.getAudioTracks()[0].enabled=false}});return resolve(call,id)},function(error){if(self.debug)console.error("FATAL: Can't getUserMedia",error);return reject({code:"webrtc-error",error:error})})})}p2pKick_(uuid,p2pSessionId){let self=this;return new Promise((resolve,reject)=>{if(!self.conference)return reject({code:"not-connected",data:"Instance is not connected to the conference"});if(uuid!==self.user.uuid){const peerCallId=uuid+self.conference.id+(p2pSessionId||"");if(self.conference.calls&&self.conference.calls[peerCallId]){self.conference.calls[peerCallId].close()}}else{if(p2pSessionId==self.user.p2pSessionId){self.leave()}}resolve()})}}class CliqueSimpleCall extends CliqueBase{id(){let self=this;return self.number}initUA_(){let self=this;self.socketInit_();return AjaxRequest({url:self.apiEndpoint+"/nodes",dataType:"JSON",bearer:self.sessionToken}).then(data=>{var minLoad=101;var minIndex=0;for(var i in data.result){if(data.result[i].cpu_load<minLoad){minLoad=data.result[i].cpu_load;minIndex=i}}var node=data.result[minIndex];if(!node)throw new Error("Node is undefined");return super.initUA_(node.domain_name)}).then(()=>{return self.verto})}vertoDialogState_(d){let self=this;switch(d.state.name){case"trying":break;case"answering":self.trigger_("call-answer",{});break;case"active":self.trigger_("call-active",{});break;case"hangup":var error;if(d.cause!=="NORMAL_CLEARING"){error=d.cause}self.trigger_("call-hangup",{});break;case"destroy":self.cleanup_();break}}handleEvents_(){let self=this;self.socket.on("event",function(event){switch(event.Action){default:break}})}dial(number,options){let self=this;self.init().then(()=>{return self.initUA_()}).then(function(ua){var vars={};if(options&&(options.detect_machine||options.detectMachine))vars.Live_Answer=true;if(options&&(options.detect_beep||options.detectBeep))vars.Detect_Beep=true;if(options&&(options.connect_on_live||options.connectOnLive)){vars.Live_Answer=true;vars.Connect_On_Live=true}if(!vars.Live_Answer){vars.Detect_Beep=false}self.call=ua.newCall({destination_number:number,userVariables:vars,caller_id_number:options&&options.source||self.user.uuid});self.number=number;return Promise.resolve(self.call)}).catch(function(err){throw{code:"http-error",data:err}})}hangup(){this.call&&this.call.hangup()}cleanup_(){let self=this;self.call=null;self.number=null}}class CliqueUser extends CliqueAbstract{getConferenceSettings(){return this.init().then(()=>{return this.api.userFetch()}).then(user=>user.settings)}updateConferenceSettings(props){return this.init().then(()=>{return this.api.userUpdate({settings:props})}).then(user=>user.settings)}}class CliqueChat extends CliqueAbstract{constructor(options){super(options);this.doneTypingInterval=5e3;this.subscribedChats={};this.typingTimer=[];this.socketInit_()}create(data){let self=this;return self.init().then(()=>{return self.api.chatCreate(data)}).then(chatInfo=>{self.subscribedChats[chatInfo.chat.chat_id]={};self.subscribe_(chatInfo.chat.chat_id);return chatInfo.chat})}join(chatId){let self=this;return self.init().then(()=>{return self.api.chatJoin(chatId)}).then(chatInfo=>{self.subscribedChats[chatInfo.chat.chat_id]={};self.subscribe_(chatInfo.chat.chat_id);return chatInfo.chat})}leave(chatId){let self=this;return self.init().then(()=>{return self.api.chatLeave(chatId)}).then(chatInfo=>{delete self.subscribedChats[chatId];self.unsubscribe_(chatId);return chatInfo.chat})}send(chat_id,message){let self=this;if(!chat_id)return Promise.reject({code:"not-connected",data:"Chat id missed"});self.socket.emit("message",{chat_id:chat_id,message:message,timestamp:(new Date).toISOString()})}fetchMessageHistory(chat_id,options={}){let self=this;return self.init().then(()=>{self.socket.emit("message-history",{chat_id:chat_id,options:options})})}markMessagesAsRead(chat_id,timestamp){this.socket.emit("message-marked-read",{chat_id:chat_id})}subscribe_(chat_id){this.socket.emit("subscribe",{channel:chat_id,type:"chat"})}unsubscribe_(chat_id){this.socket.emit("unsubscribe",{channel:chat_id,type:"chat"})}handleEvents_(){let self=this;self.socket.on("reconnect",function(event){if(Object.keys(self.subscribedChats).length){self.actionRun_("reconnect",Object.keys(self.subscribedChats))}});self.socket.on("event",function(event){switch(event.Action){case"message":self.trigger_("message",{uuid:event["Caller-Caller-ID-Number"],message:event.message,chat_id:event.chat_id,timestamp:event.timestamp});break;case"message-history":self.trigger_("message-history",{uuid:event["Caller-Caller-ID-Number"],messages:event.messages,total:event.total,chat_id:event.chat_id});break;case"message-start-typing":self.trigger_("message-start-typing",{uuid:event["Caller-Caller-ID-Number"],chat_id:event.chat_id});break;case"subscribe":self.trigger_("subscribe",{uuid:event["Caller-Caller-ID-Number"],chat_id:event.channel,unread_message_count:event.unread_message_count});break;case"unsubscribe":self.trigger_("unsubscribe",{uuid:event["Caller-Caller-ID-Number"],chat_id:event.channel});break;case"message-stop-typing":self.trigger_("message-stop-typing",{uuid:event["Caller-Caller-ID-Number"],chat_id:event.chat_id});break}})}actionRun_(action,chatList=[]){let self=this;self.socketInit_();return Promise.all(chatList.map(chatId=>self.join(chatId)))}}return{Conference:CliqueConference,User:CliqueUser,SimpleCall:CliqueSimpleCall,Chat:CliqueChat}});